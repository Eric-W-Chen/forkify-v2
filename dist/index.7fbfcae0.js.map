{"mappings":"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","sources":["<anon>","starter/src/js/controller.js","node_modules/core-js/modules/web.immediate.js","node_modules/core-js/modules/web.clear-immediate.js","node_modules/core-js/internals/export.js","node_modules/core-js/internals/global.js","node_modules/core-js/internals/object-get-own-property-descriptor.js","node_modules/core-js/internals/descriptors.js","node_modules/core-js/internals/fails.js","node_modules/core-js/internals/function-call.js","node_modules/core-js/internals/function-bind-native.js","node_modules/core-js/internals/object-property-is-enumerable.js","node_modules/core-js/internals/create-property-descriptor.js","node_modules/core-js/internals/to-indexed-object.js","node_modules/core-js/internals/indexed-object.js","node_modules/core-js/internals/function-uncurry-this.js","node_modules/core-js/internals/classof-raw.js","node_modules/core-js/internals/require-object-coercible.js","node_modules/core-js/internals/is-null-or-undefined.js","node_modules/core-js/internals/to-property-key.js","node_modules/core-js/internals/to-primitive.js","node_modules/core-js/internals/is-object.js","node_modules/core-js/internals/is-callable.js","node_modules/core-js/internals/is-symbol.js","node_modules/core-js/internals/get-built-in.js","node_modules/core-js/internals/object-is-prototype-of.js","node_modules/core-js/internals/use-symbol-as-uid.js","node_modules/core-js/internals/symbol-constructor-detection.js","node_modules/core-js/internals/engine-v8-version.js","node_modules/core-js/internals/engine-user-agent.js","node_modules/core-js/internals/get-method.js","node_modules/core-js/internals/a-callable.js","node_modules/core-js/internals/try-to-string.js","node_modules/core-js/internals/ordinary-to-primitive.js","node_modules/core-js/internals/well-known-symbol.js","node_modules/core-js/internals/shared.js","node_modules/core-js/internals/shared-store.js","node_modules/core-js/internals/is-pure.js","node_modules/core-js/internals/define-global-property.js","node_modules/core-js/internals/has-own-property.js","node_modules/core-js/internals/to-object.js","node_modules/core-js/internals/uid.js","node_modules/core-js/internals/ie8-dom-define.js","node_modules/core-js/internals/document-create-element.js","node_modules/core-js/internals/create-non-enumerable-property.js","node_modules/core-js/internals/object-define-property.js","node_modules/core-js/internals/v8-prototype-define-bug.js","node_modules/core-js/internals/an-object.js","node_modules/core-js/internals/define-built-in.js","node_modules/core-js/internals/make-built-in.js","node_modules/core-js/internals/function-name.js","node_modules/core-js/internals/inspect-source.js","node_modules/core-js/internals/internal-state.js","node_modules/core-js/internals/weak-map-basic-detection.js","node_modules/core-js/internals/shared-key.js","node_modules/core-js/internals/hidden-keys.js","node_modules/core-js/internals/copy-constructor-properties.js","node_modules/core-js/internals/own-keys.js","node_modules/core-js/internals/object-get-own-property-names.js","node_modules/core-js/internals/object-keys-internal.js","node_modules/core-js/internals/array-includes.js","node_modules/core-js/internals/to-absolute-index.js","node_modules/core-js/internals/to-integer-or-infinity.js","node_modules/core-js/internals/math-trunc.js","node_modules/core-js/internals/length-of-array-like.js","node_modules/core-js/internals/to-length.js","node_modules/core-js/internals/enum-bug-keys.js","node_modules/core-js/internals/object-get-own-property-symbols.js","node_modules/core-js/internals/is-forced.js","node_modules/core-js/internals/task.js","node_modules/core-js/internals/function-apply.js","node_modules/core-js/internals/function-bind-context.js","node_modules/core-js/internals/function-uncurry-this-clause.js","node_modules/core-js/internals/html.js","node_modules/core-js/internals/array-slice.js","node_modules/core-js/internals/validate-arguments-length.js","node_modules/core-js/internals/engine-is-ios.js","node_modules/core-js/internals/engine-is-node.js","node_modules/core-js/modules/web.set-immediate.js","node_modules/core-js/internals/schedulers-fix.js","node_modules/core-js/internals/engine-is-bun.js","starter/src/js/model.js","starter/src/js/config.js","starter/src/js/helpers.js","starter/src/js/views/RecipeView.js","starter/src/js/views/View.js","node_modules/@parcel/runtime-js/lib/runtime-740be7a63427ddf9.js","node_modules/fracty/fracty.js","starter/src/js/views/SearchView.js","starter/src/js/views/ResultsView.js","starter/src/js/views/PreviewView.js","starter/src/js/views/PaginationView.js","starter/src/js/views/BookmarksView.js","starter/src/js/views/AddRecipeView.js","node_modules/regenerator-runtime/runtime.js"],"sourcesContent":["\n      var $parcel$global = globalThis;\n    \nfunction $parcel$interopDefault(a) {\n  return a && a.__esModule ? a.default : a;\n}\n\"use strict\";\n\"use strict\";\nvar $ca3e1754e676956d$exports = {};\n\"use strict\";\nvar $55b335199d6e6d5d$exports = {};\n\"use strict\";\nvar $55b335199d6e6d5d$var$check = function(it) {\n    return it && it.Math === Math && it;\n};\n// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028\n$55b335199d6e6d5d$exports = // eslint-disable-next-line es/no-global-this -- safe\n$55b335199d6e6d5d$var$check(typeof globalThis == \"object\" && globalThis) || $55b335199d6e6d5d$var$check(typeof window == \"object\" && window) || // eslint-disable-next-line no-restricted-globals -- safe\n$55b335199d6e6d5d$var$check(typeof self == \"object\" && self) || $55b335199d6e6d5d$var$check(typeof $parcel$global == \"object\" && $parcel$global) || $55b335199d6e6d5d$var$check(typeof $55b335199d6e6d5d$exports == \"object\" && $55b335199d6e6d5d$exports) || // eslint-disable-next-line no-new-func -- fallback\nfunction() {\n    return this;\n}() || Function(\"return this\")();\n\n\n// `Object.getOwnPropertyDescriptor` method\n// https://tc39.es/ecma262/#sec-object.getownpropertydescriptor\nvar $6d99163b6684d050$export$2d1720544b23b823;\n\"use strict\";\nvar $ef322a7f89c3ed41$exports = {};\n\"use strict\";\nvar $6140c9fa18232846$exports = {};\n\"use strict\";\n$6140c9fa18232846$exports = function(exec) {\n    try {\n        return !!exec();\n    } catch (error) {\n        return true;\n    }\n};\n\n\n// Detect IE8's incomplete defineProperty implementation\n$ef322a7f89c3ed41$exports = !$6140c9fa18232846$exports(function() {\n    // eslint-disable-next-line es/no-object-defineproperty -- required for testing\n    return Object.defineProperty({}, 1, {\n        get: function() {\n            return 7;\n        }\n    })[1] !== 7;\n});\n\n\nvar $881ad37dbe259e8f$exports = {};\n\"use strict\";\nvar $bcbe62e89adc7d37$exports = {};\n\"use strict\";\n\n$bcbe62e89adc7d37$exports = !$6140c9fa18232846$exports(function() {\n    // eslint-disable-next-line es/no-function-prototype-bind -- safe\n    var test = (function() {}).bind();\n    // eslint-disable-next-line no-prototype-builtins -- safe\n    return typeof test != \"function\" || test.hasOwnProperty(\"prototype\");\n});\n\n\nvar $881ad37dbe259e8f$var$call = Function.prototype.call;\n$881ad37dbe259e8f$exports = $bcbe62e89adc7d37$exports ? $881ad37dbe259e8f$var$call.bind($881ad37dbe259e8f$var$call) : function() {\n    return $881ad37dbe259e8f$var$call.apply($881ad37dbe259e8f$var$call, arguments);\n};\n\n\n// `Object.prototype.propertyIsEnumerable` method implementation\n// https://tc39.es/ecma262/#sec-object.prototype.propertyisenumerable\nvar $1e0782be6903ea7b$export$2d1720544b23b823;\n\"use strict\";\nvar $1e0782be6903ea7b$var$$propertyIsEnumerable = {}.propertyIsEnumerable;\n// eslint-disable-next-line es/no-object-getownpropertydescriptor -- safe\nvar $1e0782be6903ea7b$var$getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;\n// Nashorn ~ JDK8 bug\nvar $1e0782be6903ea7b$var$NASHORN_BUG = $1e0782be6903ea7b$var$getOwnPropertyDescriptor && !$1e0782be6903ea7b$var$$propertyIsEnumerable.call({\n    1: 2\n}, 1);\n$1e0782be6903ea7b$export$2d1720544b23b823 = $1e0782be6903ea7b$var$NASHORN_BUG ? function propertyIsEnumerable(V) {\n    var descriptor = $1e0782be6903ea7b$var$getOwnPropertyDescriptor(this, V);\n    return !!descriptor && descriptor.enumerable;\n} : $1e0782be6903ea7b$var$$propertyIsEnumerable;\n\n\nvar $b66966b48674609b$exports = {};\n\"use strict\";\n$b66966b48674609b$exports = function(bitmap, value) {\n    return {\n        enumerable: !(bitmap & 1),\n        configurable: !(bitmap & 2),\n        writable: !(bitmap & 4),\n        value: value\n    };\n};\n\n\nvar $4d273c9d7e1bdf46$exports = {};\n\"use strict\";\nvar $8239f4c7c6082668$exports = {};\n\"use strict\";\nvar $43b18aa2f1faac44$exports = {};\n\"use strict\";\n\nvar $43b18aa2f1faac44$var$FunctionPrototype = Function.prototype;\nvar $43b18aa2f1faac44$var$call = $43b18aa2f1faac44$var$FunctionPrototype.call;\nvar $43b18aa2f1faac44$var$uncurryThisWithBind = $bcbe62e89adc7d37$exports && $43b18aa2f1faac44$var$FunctionPrototype.bind.bind($43b18aa2f1faac44$var$call, $43b18aa2f1faac44$var$call);\n$43b18aa2f1faac44$exports = $bcbe62e89adc7d37$exports ? $43b18aa2f1faac44$var$uncurryThisWithBind : function(fn) {\n    return function() {\n        return $43b18aa2f1faac44$var$call.apply(fn, arguments);\n    };\n};\n\n\n\nvar $b0ba63bfbfb16088$exports = {};\n\"use strict\";\n\nvar $b0ba63bfbfb16088$var$toString = $43b18aa2f1faac44$exports({}.toString);\nvar $b0ba63bfbfb16088$var$stringSlice = $43b18aa2f1faac44$exports(\"\".slice);\n$b0ba63bfbfb16088$exports = function(it) {\n    return $b0ba63bfbfb16088$var$stringSlice($b0ba63bfbfb16088$var$toString(it), 8, -1);\n};\n\n\nvar $8239f4c7c6082668$var$$Object = Object;\nvar $8239f4c7c6082668$var$split = $43b18aa2f1faac44$exports(\"\".split);\n// fallback for non-array-like ES3 and non-enumerable old V8 strings\n$8239f4c7c6082668$exports = $6140c9fa18232846$exports(function() {\n    // throws an error in rhino, see https://github.com/mozilla/rhino/issues/346\n    // eslint-disable-next-line no-prototype-builtins -- safe\n    return !$8239f4c7c6082668$var$$Object(\"z\").propertyIsEnumerable(0);\n}) ? function(it) {\n    return $b0ba63bfbfb16088$exports(it) === \"String\" ? $8239f4c7c6082668$var$split(it, \"\") : $8239f4c7c6082668$var$$Object(it);\n} : $8239f4c7c6082668$var$$Object;\n\n\nvar $c378177673193450$exports = {};\n\"use strict\";\nvar $7ce250ddf7b42d4d$exports = {};\n\"use strict\";\n// we can't use just `it == null` since of `document.all` special case\n// https://tc39.es/ecma262/#sec-IsHTMLDDA-internal-slot-aec\n$7ce250ddf7b42d4d$exports = function(it) {\n    return it === null || it === undefined;\n};\n\n\nvar $c378177673193450$var$$TypeError = TypeError;\n// `RequireObjectCoercible` abstract operation\n// https://tc39.es/ecma262/#sec-requireobjectcoercible\n$c378177673193450$exports = function(it) {\n    if ($7ce250ddf7b42d4d$exports(it)) throw new $c378177673193450$var$$TypeError(\"Can't call method on \" + it);\n    return it;\n};\n\n\n$4d273c9d7e1bdf46$exports = function(it) {\n    return $8239f4c7c6082668$exports($c378177673193450$exports(it));\n};\n\n\nvar $7f19acfe53927f5c$exports = {};\n\"use strict\";\nvar $8ffb6b36a733d3c0$exports = {};\n\"use strict\";\n\nvar $6a130d390db46c8e$exports = {};\n\"use strict\";\nvar $70e34a5a2021f756$exports = {};\n\"use strict\";\n// https://tc39.es/ecma262/#sec-IsHTMLDDA-internal-slot\nvar $70e34a5a2021f756$var$documentAll = typeof document == \"object\" && document.all;\n// `IsCallable` abstract operation\n// https://tc39.es/ecma262/#sec-iscallable\n// eslint-disable-next-line unicorn/no-typeof-undefined -- required for testing\n$70e34a5a2021f756$exports = typeof $70e34a5a2021f756$var$documentAll == \"undefined\" && $70e34a5a2021f756$var$documentAll !== undefined ? function(argument) {\n    return typeof argument == \"function\" || argument === $70e34a5a2021f756$var$documentAll;\n} : function(argument) {\n    return typeof argument == \"function\";\n};\n\n\n$6a130d390db46c8e$exports = function(it) {\n    return typeof it == \"object\" ? it !== null : $70e34a5a2021f756$exports(it);\n};\n\n\nvar $0b429cc7792c7d26$exports = {};\n\"use strict\";\nvar $a5217dbd1b0d33ce$exports = {};\n\"use strict\";\n\n\nvar $a5217dbd1b0d33ce$var$aFunction = function(argument) {\n    return $70e34a5a2021f756$exports(argument) ? argument : undefined;\n};\n$a5217dbd1b0d33ce$exports = function(namespace, method) {\n    return arguments.length < 2 ? $a5217dbd1b0d33ce$var$aFunction($55b335199d6e6d5d$exports[namespace]) : $55b335199d6e6d5d$exports[namespace] && $55b335199d6e6d5d$exports[namespace][method];\n};\n\n\n\nvar $41cc576e850a251e$exports = {};\n\"use strict\";\n\n$41cc576e850a251e$exports = $43b18aa2f1faac44$exports({}.isPrototypeOf);\n\n\nvar $47f18b427c2fbabf$exports = {};\n\"use strict\";\nvar $4a39565fee8fe980$exports = {};\n\"use strict\";\nvar $998d968a5e32cd49$exports = {};\n\"use strict\";\n\nvar $492c6dc902f2bf18$exports = {};\n\"use strict\";\n$492c6dc902f2bf18$exports = typeof navigator != \"undefined\" && String(navigator.userAgent) || \"\";\n\n\nvar $998d968a5e32cd49$var$process = $55b335199d6e6d5d$exports.process;\nvar $998d968a5e32cd49$var$Deno = $55b335199d6e6d5d$exports.Deno;\nvar $998d968a5e32cd49$var$versions = $998d968a5e32cd49$var$process && $998d968a5e32cd49$var$process.versions || $998d968a5e32cd49$var$Deno && $998d968a5e32cd49$var$Deno.version;\nvar $998d968a5e32cd49$var$v8 = $998d968a5e32cd49$var$versions && $998d968a5e32cd49$var$versions.v8;\nvar $998d968a5e32cd49$var$match, $998d968a5e32cd49$var$version;\nif ($998d968a5e32cd49$var$v8) {\n    $998d968a5e32cd49$var$match = $998d968a5e32cd49$var$v8.split(\".\");\n    // in old Chrome, versions of V8 isn't V8 = Chrome / 10\n    // but their correct versions are not interesting for us\n    $998d968a5e32cd49$var$version = $998d968a5e32cd49$var$match[0] > 0 && $998d968a5e32cd49$var$match[0] < 4 ? 1 : +($998d968a5e32cd49$var$match[0] + $998d968a5e32cd49$var$match[1]);\n}\n// BrowserFS NodeJS `process` polyfill incorrectly set `.v8` to `0.0`\n// so check `userAgent` even if `.v8` exists, but 0\nif (!$998d968a5e32cd49$var$version && $492c6dc902f2bf18$exports) {\n    $998d968a5e32cd49$var$match = $492c6dc902f2bf18$exports.match(/Edge\\/(\\d+)/);\n    if (!$998d968a5e32cd49$var$match || $998d968a5e32cd49$var$match[1] >= 74) {\n        $998d968a5e32cd49$var$match = $492c6dc902f2bf18$exports.match(/Chrome\\/(\\d+)/);\n        if ($998d968a5e32cd49$var$match) $998d968a5e32cd49$var$version = +$998d968a5e32cd49$var$match[1];\n    }\n}\n$998d968a5e32cd49$exports = $998d968a5e32cd49$var$version;\n\n\n\n\nvar $4a39565fee8fe980$var$$String = $55b335199d6e6d5d$exports.String;\n// eslint-disable-next-line es/no-object-getownpropertysymbols -- required for testing\n$4a39565fee8fe980$exports = !!Object.getOwnPropertySymbols && !$6140c9fa18232846$exports(function() {\n    var symbol = Symbol(\"symbol detection\");\n    // Chrome 38 Symbol has incorrect toString conversion\n    // `get-own-property-symbols` polyfill symbols converted to object are not Symbol instances\n    // nb: Do not call `String` directly to avoid this being optimized out to `symbol+''` which will,\n    // of course, fail.\n    return !$4a39565fee8fe980$var$$String(symbol) || !(Object(symbol) instanceof Symbol) || // Chrome 38-40 symbols are not inherited from DOM collections prototypes to instances\n    !Symbol.sham && $998d968a5e32cd49$exports && $998d968a5e32cd49$exports < 41;\n});\n\n\n$47f18b427c2fbabf$exports = $4a39565fee8fe980$exports && !Symbol.sham && typeof Symbol.iterator == \"symbol\";\n\n\nvar $0b429cc7792c7d26$var$$Object = Object;\n$0b429cc7792c7d26$exports = $47f18b427c2fbabf$exports ? function(it) {\n    return typeof it == \"symbol\";\n} : function(it) {\n    var $Symbol = $a5217dbd1b0d33ce$exports(\"Symbol\");\n    return $70e34a5a2021f756$exports($Symbol) && $41cc576e850a251e$exports($Symbol.prototype, $0b429cc7792c7d26$var$$Object(it));\n};\n\n\nvar $eb80dcd0b8a5698c$exports = {};\n\"use strict\";\nvar $ae485921c5498156$exports = {};\n\"use strict\";\n\nvar $8f0ebae34f61e14c$exports = {};\n\"use strict\";\nvar $8f0ebae34f61e14c$var$$String = String;\n$8f0ebae34f61e14c$exports = function(argument) {\n    try {\n        return $8f0ebae34f61e14c$var$$String(argument);\n    } catch (error) {\n        return \"Object\";\n    }\n};\n\n\nvar $ae485921c5498156$var$$TypeError = TypeError;\n// `Assert: IsCallable(argument) is true`\n$ae485921c5498156$exports = function(argument) {\n    if ($70e34a5a2021f756$exports(argument)) return argument;\n    throw new $ae485921c5498156$var$$TypeError($8f0ebae34f61e14c$exports(argument) + \" is not a function\");\n};\n\n\n\n// `GetMethod` abstract operation\n// https://tc39.es/ecma262/#sec-getmethod\n$eb80dcd0b8a5698c$exports = function(V, P) {\n    var func = V[P];\n    return $7ce250ddf7b42d4d$exports(func) ? undefined : $ae485921c5498156$exports(func);\n};\n\n\nvar $b0f812e443807cb5$exports = {};\n\"use strict\";\n\n\n\nvar $b0f812e443807cb5$var$$TypeError = TypeError;\n// `OrdinaryToPrimitive` abstract operation\n// https://tc39.es/ecma262/#sec-ordinarytoprimitive\n$b0f812e443807cb5$exports = function(input, pref) {\n    var fn, val;\n    if (pref === \"string\" && $70e34a5a2021f756$exports(fn = input.toString) && !$6a130d390db46c8e$exports(val = $881ad37dbe259e8f$exports(fn, input))) return val;\n    if ($70e34a5a2021f756$exports(fn = input.valueOf) && !$6a130d390db46c8e$exports(val = $881ad37dbe259e8f$exports(fn, input))) return val;\n    if (pref !== \"string\" && $70e34a5a2021f756$exports(fn = input.toString) && !$6a130d390db46c8e$exports(val = $881ad37dbe259e8f$exports(fn, input))) return val;\n    throw new $b0f812e443807cb5$var$$TypeError(\"Can't convert object to primitive value\");\n};\n\n\nvar $842f8f0a18746212$exports = {};\n\"use strict\";\n\nvar $1946b9b54b48e7fd$exports = {};\n\"use strict\";\nvar $d00d03e557d638db$exports = {};\n\"use strict\";\nvar $e0409817d4e03fc4$exports = {};\n\"use strict\";\n$e0409817d4e03fc4$exports = false;\n\n\n\nvar $4ce407c7007beb63$exports = {};\n\"use strict\";\n\n// eslint-disable-next-line es/no-object-defineproperty -- safe\nvar $4ce407c7007beb63$var$defineProperty = Object.defineProperty;\n$4ce407c7007beb63$exports = function(key, value) {\n    try {\n        $4ce407c7007beb63$var$defineProperty($55b335199d6e6d5d$exports, key, {\n            value: value,\n            configurable: true,\n            writable: true\n        });\n    } catch (error) {\n        $55b335199d6e6d5d$exports[key] = value;\n    }\n    return value;\n};\n\n\nvar $d00d03e557d638db$var$SHARED = \"__core-js_shared__\";\nvar $d00d03e557d638db$var$store = $d00d03e557d638db$exports = $55b335199d6e6d5d$exports[$d00d03e557d638db$var$SHARED] || $4ce407c7007beb63$exports($d00d03e557d638db$var$SHARED, {});\n($d00d03e557d638db$var$store.versions || ($d00d03e557d638db$var$store.versions = [])).push({\n    version: \"3.36.1\",\n    mode: $e0409817d4e03fc4$exports ? \"pure\" : \"global\",\n    copyright: \"\\xa9 2014-2024 Denis Pushkarev (zloirock.ru)\",\n    license: \"https://github.com/zloirock/core-js/blob/v3.36.1/LICENSE\",\n    source: \"https://github.com/zloirock/core-js\"\n});\n\n\n$1946b9b54b48e7fd$exports = function(key, value) {\n    return $d00d03e557d638db$exports[key] || ($d00d03e557d638db$exports[key] = value || {});\n};\n\n\nvar $1f868a26fd901990$exports = {};\n\"use strict\";\n\nvar $a2f3ebb5da11db12$exports = {};\n\"use strict\";\n\nvar $a2f3ebb5da11db12$var$$Object = Object;\n// `ToObject` abstract operation\n// https://tc39.es/ecma262/#sec-toobject\n$a2f3ebb5da11db12$exports = function(argument) {\n    return $a2f3ebb5da11db12$var$$Object($c378177673193450$exports(argument));\n};\n\n\nvar $1f868a26fd901990$var$hasOwnProperty = $43b18aa2f1faac44$exports({}.hasOwnProperty);\n// `HasOwnProperty` abstract operation\n// https://tc39.es/ecma262/#sec-hasownproperty\n// eslint-disable-next-line es/no-object-hasown -- safe\n$1f868a26fd901990$exports = Object.hasOwn || function hasOwn(it, key) {\n    return $1f868a26fd901990$var$hasOwnProperty($a2f3ebb5da11db12$exports(it), key);\n};\n\n\nvar $5e0a1e292f79defc$exports = {};\n\"use strict\";\n\nvar $5e0a1e292f79defc$var$id = 0;\nvar $5e0a1e292f79defc$var$postfix = Math.random();\nvar $5e0a1e292f79defc$var$toString = $43b18aa2f1faac44$exports(1.0.toString);\n$5e0a1e292f79defc$exports = function(key) {\n    return \"Symbol(\" + (key === undefined ? \"\" : key) + \")_\" + $5e0a1e292f79defc$var$toString(++$5e0a1e292f79defc$var$id + $5e0a1e292f79defc$var$postfix, 36);\n};\n\n\n\n\nvar $842f8f0a18746212$var$Symbol = $55b335199d6e6d5d$exports.Symbol;\nvar $842f8f0a18746212$var$WellKnownSymbolsStore = $1946b9b54b48e7fd$exports(\"wks\");\nvar $842f8f0a18746212$var$createWellKnownSymbol = $47f18b427c2fbabf$exports ? $842f8f0a18746212$var$Symbol[\"for\"] || $842f8f0a18746212$var$Symbol : $842f8f0a18746212$var$Symbol && $842f8f0a18746212$var$Symbol.withoutSetter || $5e0a1e292f79defc$exports;\n$842f8f0a18746212$exports = function(name) {\n    if (!$1f868a26fd901990$exports($842f8f0a18746212$var$WellKnownSymbolsStore, name)) $842f8f0a18746212$var$WellKnownSymbolsStore[name] = $4a39565fee8fe980$exports && $1f868a26fd901990$exports($842f8f0a18746212$var$Symbol, name) ? $842f8f0a18746212$var$Symbol[name] : $842f8f0a18746212$var$createWellKnownSymbol(\"Symbol.\" + name);\n    return $842f8f0a18746212$var$WellKnownSymbolsStore[name];\n};\n\n\nvar $8ffb6b36a733d3c0$var$$TypeError = TypeError;\nvar $8ffb6b36a733d3c0$var$TO_PRIMITIVE = $842f8f0a18746212$exports(\"toPrimitive\");\n// `ToPrimitive` abstract operation\n// https://tc39.es/ecma262/#sec-toprimitive\n$8ffb6b36a733d3c0$exports = function(input, pref) {\n    if (!$6a130d390db46c8e$exports(input) || $0b429cc7792c7d26$exports(input)) return input;\n    var exoticToPrim = $eb80dcd0b8a5698c$exports(input, $8ffb6b36a733d3c0$var$TO_PRIMITIVE);\n    var result;\n    if (exoticToPrim) {\n        if (pref === undefined) pref = \"default\";\n        result = $881ad37dbe259e8f$exports(exoticToPrim, input, pref);\n        if (!$6a130d390db46c8e$exports(result) || $0b429cc7792c7d26$exports(result)) return result;\n        throw new $8ffb6b36a733d3c0$var$$TypeError(\"Can't convert object to primitive value\");\n    }\n    if (pref === undefined) pref = \"number\";\n    return $b0f812e443807cb5$exports(input, pref);\n};\n\n\n\n// `ToPropertyKey` abstract operation\n// https://tc39.es/ecma262/#sec-topropertykey\n$7f19acfe53927f5c$exports = function(argument) {\n    var key = $8ffb6b36a733d3c0$exports(argument, \"string\");\n    return $0b429cc7792c7d26$exports(key) ? key : key + \"\";\n};\n\n\n\nvar $d45526d8245cb22c$exports = {};\n\"use strict\";\n\n\nvar $15c0c414b89100b1$exports = {};\n\"use strict\";\n\n\nvar $15c0c414b89100b1$var$document = $55b335199d6e6d5d$exports.document;\n// typeof document.createElement is 'object' in old IE\nvar $15c0c414b89100b1$var$EXISTS = $6a130d390db46c8e$exports($15c0c414b89100b1$var$document) && $6a130d390db46c8e$exports($15c0c414b89100b1$var$document.createElement);\n$15c0c414b89100b1$exports = function(it) {\n    return $15c0c414b89100b1$var$EXISTS ? $15c0c414b89100b1$var$document.createElement(it) : {};\n};\n\n\n// Thanks to IE8 for its funny defineProperty\n$d45526d8245cb22c$exports = !$ef322a7f89c3ed41$exports && !$6140c9fa18232846$exports(function() {\n    // eslint-disable-next-line es/no-object-defineproperty -- required for testing\n    return Object.defineProperty($15c0c414b89100b1$exports(\"div\"), \"a\", {\n        get: function() {\n            return 7;\n        }\n    }).a !== 7;\n});\n\n\n// eslint-disable-next-line es/no-object-getownpropertydescriptor -- safe\nvar $6d99163b6684d050$var$$getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;\n$6d99163b6684d050$export$2d1720544b23b823 = $ef322a7f89c3ed41$exports ? $6d99163b6684d050$var$$getOwnPropertyDescriptor : function getOwnPropertyDescriptor(O, P) {\n    O = $4d273c9d7e1bdf46$exports(O);\n    P = $7f19acfe53927f5c$exports(P);\n    if ($d45526d8245cb22c$exports) try {\n        return $6d99163b6684d050$var$$getOwnPropertyDescriptor(O, P);\n    } catch (error) {}\n    if ($1f868a26fd901990$exports(O, P)) return $b66966b48674609b$exports(!$881ad37dbe259e8f$exports($1e0782be6903ea7b$export$2d1720544b23b823, O, P), O[P]);\n};\n\n\nvar $ca3e1754e676956d$require$getOwnPropertyDescriptor = $6d99163b6684d050$export$2d1720544b23b823;\nvar $8693737507995841$exports = {};\n\"use strict\";\n\n// `Object.defineProperty` method\n// https://tc39.es/ecma262/#sec-object.defineproperty\nvar $2d0ac3aa5e39584b$export$2d1720544b23b823;\n\"use strict\";\n\n\nvar $161a89d67c436ccf$exports = {};\n\"use strict\";\n\n\n// V8 ~ Chrome 36-\n// https://bugs.chromium.org/p/v8/issues/detail?id=3334\n$161a89d67c436ccf$exports = $ef322a7f89c3ed41$exports && $6140c9fa18232846$exports(function() {\n    // eslint-disable-next-line es/no-object-defineproperty -- required for testing\n    return Object.defineProperty(function() {}, \"prototype\", {\n        value: 42,\n        writable: false\n    }).prototype !== 42;\n});\n\n\nvar $c845d421b7b0e630$exports = {};\n\"use strict\";\n\nvar $c845d421b7b0e630$var$$String = String;\nvar $c845d421b7b0e630$var$$TypeError = TypeError;\n// `Assert: Type(argument) is Object`\n$c845d421b7b0e630$exports = function(argument) {\n    if ($6a130d390db46c8e$exports(argument)) return argument;\n    throw new $c845d421b7b0e630$var$$TypeError($c845d421b7b0e630$var$$String(argument) + \" is not an object\");\n};\n\n\n\nvar $2d0ac3aa5e39584b$var$$TypeError = TypeError;\n// eslint-disable-next-line es/no-object-defineproperty -- safe\nvar $2d0ac3aa5e39584b$var$$defineProperty = Object.defineProperty;\n// eslint-disable-next-line es/no-object-getownpropertydescriptor -- safe\nvar $2d0ac3aa5e39584b$var$$getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;\nvar $2d0ac3aa5e39584b$var$ENUMERABLE = \"enumerable\";\nvar $2d0ac3aa5e39584b$var$CONFIGURABLE = \"configurable\";\nvar $2d0ac3aa5e39584b$var$WRITABLE = \"writable\";\n$2d0ac3aa5e39584b$export$2d1720544b23b823 = $ef322a7f89c3ed41$exports ? $161a89d67c436ccf$exports ? function defineProperty(O, P, Attributes) {\n    $c845d421b7b0e630$exports(O);\n    P = $7f19acfe53927f5c$exports(P);\n    $c845d421b7b0e630$exports(Attributes);\n    if (typeof O === \"function\" && P === \"prototype\" && \"value\" in Attributes && $2d0ac3aa5e39584b$var$WRITABLE in Attributes && !Attributes[$2d0ac3aa5e39584b$var$WRITABLE]) {\n        var current = $2d0ac3aa5e39584b$var$$getOwnPropertyDescriptor(O, P);\n        if (current && current[$2d0ac3aa5e39584b$var$WRITABLE]) {\n            O[P] = Attributes.value;\n            Attributes = {\n                configurable: $2d0ac3aa5e39584b$var$CONFIGURABLE in Attributes ? Attributes[$2d0ac3aa5e39584b$var$CONFIGURABLE] : current[$2d0ac3aa5e39584b$var$CONFIGURABLE],\n                enumerable: $2d0ac3aa5e39584b$var$ENUMERABLE in Attributes ? Attributes[$2d0ac3aa5e39584b$var$ENUMERABLE] : current[$2d0ac3aa5e39584b$var$ENUMERABLE],\n                writable: false\n            };\n        }\n    }\n    return $2d0ac3aa5e39584b$var$$defineProperty(O, P, Attributes);\n} : $2d0ac3aa5e39584b$var$$defineProperty : function defineProperty(O, P, Attributes) {\n    $c845d421b7b0e630$exports(O);\n    P = $7f19acfe53927f5c$exports(P);\n    $c845d421b7b0e630$exports(Attributes);\n    if ($d45526d8245cb22c$exports) try {\n        return $2d0ac3aa5e39584b$var$$defineProperty(O, P, Attributes);\n    } catch (error) {}\n    if (\"get\" in Attributes || \"set\" in Attributes) throw new $2d0ac3aa5e39584b$var$$TypeError(\"Accessors not supported\");\n    if (\"value\" in Attributes) O[P] = Attributes.value;\n    return O;\n};\n\n\n\n$8693737507995841$exports = $ef322a7f89c3ed41$exports ? function(object, key, value) {\n    return $2d0ac3aa5e39584b$export$2d1720544b23b823(object, key, $b66966b48674609b$exports(1, value));\n} : function(object, key, value) {\n    object[key] = value;\n    return object;\n};\n\n\nvar $40e957865125f98f$exports = {};\n\"use strict\";\n\n\nvar $09c56ff2ae09b2d7$exports = {};\n\"use strict\";\n\n\n\n\n\nvar $81c64883d194e3b4$exports = {};\n\"use strict\";\n\n\nvar $81c64883d194e3b4$var$FunctionPrototype = Function.prototype;\n// eslint-disable-next-line es/no-object-getownpropertydescriptor -- safe\nvar $81c64883d194e3b4$var$getDescriptor = $ef322a7f89c3ed41$exports && Object.getOwnPropertyDescriptor;\nvar $81c64883d194e3b4$var$EXISTS = $1f868a26fd901990$exports($81c64883d194e3b4$var$FunctionPrototype, \"name\");\n// additional protection from minified / mangled / dropped function names\nvar $81c64883d194e3b4$var$PROPER = $81c64883d194e3b4$var$EXISTS && (function something() {}).name === \"something\";\nvar $81c64883d194e3b4$var$CONFIGURABLE = $81c64883d194e3b4$var$EXISTS && (!$ef322a7f89c3ed41$exports || $ef322a7f89c3ed41$exports && $81c64883d194e3b4$var$getDescriptor($81c64883d194e3b4$var$FunctionPrototype, \"name\").configurable);\n$81c64883d194e3b4$exports = {\n    EXISTS: $81c64883d194e3b4$var$EXISTS,\n    PROPER: $81c64883d194e3b4$var$PROPER,\n    CONFIGURABLE: $81c64883d194e3b4$var$CONFIGURABLE\n};\n\n\nvar $09c56ff2ae09b2d7$require$CONFIGURABLE_FUNCTION_NAME = $81c64883d194e3b4$exports.CONFIGURABLE;\nvar $9990f6f719f26a96$exports = {};\n\"use strict\";\n\n\n\nvar $9990f6f719f26a96$var$functionToString = $43b18aa2f1faac44$exports(Function.toString);\n// this helper broken in `core-js@3.4.1-3.4.4`, so we can't use `shared` helper\nif (!$70e34a5a2021f756$exports($d00d03e557d638db$exports.inspectSource)) $d00d03e557d638db$exports.inspectSource = function(it) {\n    return $9990f6f719f26a96$var$functionToString(it);\n};\n$9990f6f719f26a96$exports = $d00d03e557d638db$exports.inspectSource;\n\n\nvar $3a8bcef306e86159$exports = {};\n\"use strict\";\nvar $47d53bb84a8f3c5b$exports = {};\n\"use strict\";\n\n\nvar $47d53bb84a8f3c5b$var$WeakMap = $55b335199d6e6d5d$exports.WeakMap;\n$47d53bb84a8f3c5b$exports = $70e34a5a2021f756$exports($47d53bb84a8f3c5b$var$WeakMap) && /native code/.test(String($47d53bb84a8f3c5b$var$WeakMap));\n\n\n\n\n\n\n\nvar $834abcf0f8f3f871$exports = {};\n\"use strict\";\n\n\nvar $834abcf0f8f3f871$var$keys = $1946b9b54b48e7fd$exports(\"keys\");\n$834abcf0f8f3f871$exports = function(key) {\n    return $834abcf0f8f3f871$var$keys[key] || ($834abcf0f8f3f871$var$keys[key] = $5e0a1e292f79defc$exports(key));\n};\n\n\nvar $9f571a3f3d135e31$exports = {};\n\"use strict\";\n$9f571a3f3d135e31$exports = {};\n\n\nvar $3a8bcef306e86159$var$OBJECT_ALREADY_INITIALIZED = \"Object already initialized\";\nvar $3a8bcef306e86159$var$TypeError = $55b335199d6e6d5d$exports.TypeError;\nvar $3a8bcef306e86159$var$WeakMap = $55b335199d6e6d5d$exports.WeakMap;\nvar $3a8bcef306e86159$var$set, $3a8bcef306e86159$var$get, $3a8bcef306e86159$var$has;\nvar $3a8bcef306e86159$var$enforce = function(it) {\n    return $3a8bcef306e86159$var$has(it) ? $3a8bcef306e86159$var$get(it) : $3a8bcef306e86159$var$set(it, {});\n};\nvar $3a8bcef306e86159$var$getterFor = function(TYPE) {\n    return function(it) {\n        var state;\n        if (!$6a130d390db46c8e$exports(it) || (state = $3a8bcef306e86159$var$get(it)).type !== TYPE) throw new $3a8bcef306e86159$var$TypeError(\"Incompatible receiver, \" + TYPE + \" required\");\n        return state;\n    };\n};\nif ($47d53bb84a8f3c5b$exports || $d00d03e557d638db$exports.state) {\n    var $3a8bcef306e86159$var$store = $d00d03e557d638db$exports.state || ($d00d03e557d638db$exports.state = new $3a8bcef306e86159$var$WeakMap());\n    /* eslint-disable no-self-assign -- prototype methods protection */ $3a8bcef306e86159$var$store.get = $3a8bcef306e86159$var$store.get;\n    $3a8bcef306e86159$var$store.has = $3a8bcef306e86159$var$store.has;\n    $3a8bcef306e86159$var$store.set = $3a8bcef306e86159$var$store.set;\n    /* eslint-enable no-self-assign -- prototype methods protection */ $3a8bcef306e86159$var$set = function(it, metadata) {\n        if ($3a8bcef306e86159$var$store.has(it)) throw new $3a8bcef306e86159$var$TypeError($3a8bcef306e86159$var$OBJECT_ALREADY_INITIALIZED);\n        metadata.facade = it;\n        $3a8bcef306e86159$var$store.set(it, metadata);\n        return metadata;\n    };\n    $3a8bcef306e86159$var$get = function(it) {\n        return $3a8bcef306e86159$var$store.get(it) || {};\n    };\n    $3a8bcef306e86159$var$has = function(it) {\n        return $3a8bcef306e86159$var$store.has(it);\n    };\n} else {\n    var $3a8bcef306e86159$var$STATE = $834abcf0f8f3f871$exports(\"state\");\n    $9f571a3f3d135e31$exports[$3a8bcef306e86159$var$STATE] = true;\n    $3a8bcef306e86159$var$set = function(it, metadata) {\n        if ($1f868a26fd901990$exports(it, $3a8bcef306e86159$var$STATE)) throw new $3a8bcef306e86159$var$TypeError($3a8bcef306e86159$var$OBJECT_ALREADY_INITIALIZED);\n        metadata.facade = it;\n        $8693737507995841$exports(it, $3a8bcef306e86159$var$STATE, metadata);\n        return metadata;\n    };\n    $3a8bcef306e86159$var$get = function(it) {\n        return $1f868a26fd901990$exports(it, $3a8bcef306e86159$var$STATE) ? it[$3a8bcef306e86159$var$STATE] : {};\n    };\n    $3a8bcef306e86159$var$has = function(it) {\n        return $1f868a26fd901990$exports(it, $3a8bcef306e86159$var$STATE);\n    };\n}\n$3a8bcef306e86159$exports = {\n    set: $3a8bcef306e86159$var$set,\n    get: $3a8bcef306e86159$var$get,\n    has: $3a8bcef306e86159$var$has,\n    enforce: $3a8bcef306e86159$var$enforce,\n    getterFor: $3a8bcef306e86159$var$getterFor\n};\n\n\nvar $09c56ff2ae09b2d7$var$enforceInternalState = $3a8bcef306e86159$exports.enforce;\nvar $09c56ff2ae09b2d7$var$getInternalState = $3a8bcef306e86159$exports.get;\nvar $09c56ff2ae09b2d7$var$$String = String;\n// eslint-disable-next-line es/no-object-defineproperty -- safe\nvar $09c56ff2ae09b2d7$var$defineProperty = Object.defineProperty;\nvar $09c56ff2ae09b2d7$var$stringSlice = $43b18aa2f1faac44$exports(\"\".slice);\nvar $09c56ff2ae09b2d7$var$replace = $43b18aa2f1faac44$exports(\"\".replace);\nvar $09c56ff2ae09b2d7$var$join = $43b18aa2f1faac44$exports([].join);\nvar $09c56ff2ae09b2d7$var$CONFIGURABLE_LENGTH = $ef322a7f89c3ed41$exports && !$6140c9fa18232846$exports(function() {\n    return $09c56ff2ae09b2d7$var$defineProperty(function() {}, \"length\", {\n        value: 8\n    }).length !== 8;\n});\nvar $09c56ff2ae09b2d7$var$TEMPLATE = String(String).split(\"String\");\nvar $09c56ff2ae09b2d7$var$makeBuiltIn = $09c56ff2ae09b2d7$exports = function(value, name, options) {\n    if ($09c56ff2ae09b2d7$var$stringSlice($09c56ff2ae09b2d7$var$$String(name), 0, 7) === \"Symbol(\") name = \"[\" + $09c56ff2ae09b2d7$var$replace($09c56ff2ae09b2d7$var$$String(name), /^Symbol\\(([^)]*)\\).*$/, \"$1\") + \"]\";\n    if (options && options.getter) name = \"get \" + name;\n    if (options && options.setter) name = \"set \" + name;\n    if (!$1f868a26fd901990$exports(value, \"name\") || $09c56ff2ae09b2d7$require$CONFIGURABLE_FUNCTION_NAME && value.name !== name) {\n        if ($ef322a7f89c3ed41$exports) $09c56ff2ae09b2d7$var$defineProperty(value, \"name\", {\n            value: name,\n            configurable: true\n        });\n        else value.name = name;\n    }\n    if ($09c56ff2ae09b2d7$var$CONFIGURABLE_LENGTH && options && $1f868a26fd901990$exports(options, \"arity\") && value.length !== options.arity) $09c56ff2ae09b2d7$var$defineProperty(value, \"length\", {\n        value: options.arity\n    });\n    try {\n        if (options && $1f868a26fd901990$exports(options, \"constructor\") && options.constructor) {\n            if ($ef322a7f89c3ed41$exports) $09c56ff2ae09b2d7$var$defineProperty(value, \"prototype\", {\n                writable: false\n            });\n        } else if (value.prototype) value.prototype = undefined;\n    } catch (error) {}\n    var state = $09c56ff2ae09b2d7$var$enforceInternalState(value);\n    if (!$1f868a26fd901990$exports(state, \"source\")) state.source = $09c56ff2ae09b2d7$var$join($09c56ff2ae09b2d7$var$TEMPLATE, typeof name == \"string\" ? name : \"\");\n    return value;\n};\n// add fake Function#toString for correct work wrapped methods / constructors with methods like LoDash isNative\n// eslint-disable-next-line no-extend-native -- required\nFunction.prototype.toString = $09c56ff2ae09b2d7$var$makeBuiltIn(function toString() {\n    return $70e34a5a2021f756$exports(this) && $09c56ff2ae09b2d7$var$getInternalState(this).source || $9990f6f719f26a96$exports(this);\n}, \"toString\");\n\n\n\n$40e957865125f98f$exports = function(O, key, value, options) {\n    if (!options) options = {};\n    var simple = options.enumerable;\n    var name = options.name !== undefined ? options.name : key;\n    if ($70e34a5a2021f756$exports(value)) $09c56ff2ae09b2d7$exports(value, name, options);\n    if (options.global) {\n        if (simple) O[key] = value;\n        else $4ce407c7007beb63$exports(key, value);\n    } else {\n        try {\n            if (!options.unsafe) delete O[key];\n            else if (O[key]) simple = true;\n        } catch (error) {}\n        if (simple) O[key] = value;\n        else $2d0ac3aa5e39584b$export$2d1720544b23b823(O, key, {\n            value: value,\n            enumerable: false,\n            configurable: !options.nonConfigurable,\n            writable: !options.nonWritable\n        });\n    }\n    return O;\n};\n\n\n\nvar $ef14b437ba65973a$exports = {};\n\"use strict\";\n\nvar $339f2419d379e6c2$exports = {};\n\"use strict\";\n\n\n// `Object.getOwnPropertyNames` method\n// https://tc39.es/ecma262/#sec-object.getownpropertynames\n// eslint-disable-next-line es/no-object-getownpropertynames -- safe\nvar $f6c32256739dd9b5$export$2d1720544b23b823;\n\"use strict\";\nvar $c4fba4611365c4f5$exports = {};\n\"use strict\";\n\n\n\nvar $f00609c516640f24$exports = {};\n\"use strict\";\n\nvar $1ef9432c43157f41$exports = {};\n\"use strict\";\nvar $b5bb21648546ce5b$exports = {};\n\"use strict\";\nvar $5395b5a4913a5e32$exports = {};\n\"use strict\";\nvar $5395b5a4913a5e32$var$ceil = Math.ceil;\nvar $5395b5a4913a5e32$var$floor = Math.floor;\n// `Math.trunc` method\n// https://tc39.es/ecma262/#sec-math.trunc\n// eslint-disable-next-line es/no-math-trunc -- safe\n$5395b5a4913a5e32$exports = Math.trunc || function trunc(x) {\n    var n = +x;\n    return (n > 0 ? $5395b5a4913a5e32$var$floor : $5395b5a4913a5e32$var$ceil)(n);\n};\n\n\n// `ToIntegerOrInfinity` abstract operation\n// https://tc39.es/ecma262/#sec-tointegerorinfinity\n$b5bb21648546ce5b$exports = function(argument) {\n    var number = +argument;\n    // eslint-disable-next-line no-self-compare -- NaN check\n    return number !== number || number === 0 ? 0 : $5395b5a4913a5e32$exports(number);\n};\n\n\nvar $1ef9432c43157f41$var$max = Math.max;\nvar $1ef9432c43157f41$var$min = Math.min;\n// Helper for a popular repeating case of the spec:\n// Let integer be ? ToInteger(index).\n// If integer < 0, let result be max((length + integer), 0); else let result be min(integer, length).\n$1ef9432c43157f41$exports = function(index, length) {\n    var integer = $b5bb21648546ce5b$exports(index);\n    return integer < 0 ? $1ef9432c43157f41$var$max(integer + length, 0) : $1ef9432c43157f41$var$min(integer, length);\n};\n\n\nvar $04c91bd3815cd64a$exports = {};\n\"use strict\";\nvar $4aba983aae3daed3$exports = {};\n\"use strict\";\n\nvar $4aba983aae3daed3$var$min = Math.min;\n// `ToLength` abstract operation\n// https://tc39.es/ecma262/#sec-tolength\n$4aba983aae3daed3$exports = function(argument) {\n    var len = $b5bb21648546ce5b$exports(argument);\n    return len > 0 ? $4aba983aae3daed3$var$min(len, 0x1FFFFFFFFFFFFF) : 0; // 2 ** 53 - 1 == 9007199254740991\n};\n\n\n// `LengthOfArrayLike` abstract operation\n// https://tc39.es/ecma262/#sec-lengthofarraylike\n$04c91bd3815cd64a$exports = function(obj) {\n    return $4aba983aae3daed3$exports(obj.length);\n};\n\n\n// `Array.prototype.{ indexOf, includes }` methods implementation\nvar $f00609c516640f24$var$createMethod = function(IS_INCLUDES) {\n    return function($this, el, fromIndex) {\n        var O = $4d273c9d7e1bdf46$exports($this);\n        var length = $04c91bd3815cd64a$exports(O);\n        if (length === 0) return !IS_INCLUDES && -1;\n        var index = $1ef9432c43157f41$exports(fromIndex, length);\n        var value;\n        // Array#includes uses SameValueZero equality algorithm\n        // eslint-disable-next-line no-self-compare -- NaN check\n        if (IS_INCLUDES && el !== el) while(length > index){\n            value = O[index++];\n            // eslint-disable-next-line no-self-compare -- NaN check\n            if (value !== value) return true;\n        // Array#indexOf ignores holes, Array#includes - not\n        }\n        else for(; length > index; index++){\n            if ((IS_INCLUDES || index in O) && O[index] === el) return IS_INCLUDES || index || 0;\n        }\n        return !IS_INCLUDES && -1;\n    };\n};\n$f00609c516640f24$exports = {\n    // `Array.prototype.includes` method\n    // https://tc39.es/ecma262/#sec-array.prototype.includes\n    includes: $f00609c516640f24$var$createMethod(true),\n    // `Array.prototype.indexOf` method\n    // https://tc39.es/ecma262/#sec-array.prototype.indexof\n    indexOf: $f00609c516640f24$var$createMethod(false)\n};\n\n\nvar $c4fba4611365c4f5$require$indexOf = $f00609c516640f24$exports.indexOf;\n\nvar $c4fba4611365c4f5$var$push = $43b18aa2f1faac44$exports([].push);\n$c4fba4611365c4f5$exports = function(object, names) {\n    var O = $4d273c9d7e1bdf46$exports(object);\n    var i = 0;\n    var result = [];\n    var key;\n    for(key in O)!$1f868a26fd901990$exports($9f571a3f3d135e31$exports, key) && $1f868a26fd901990$exports(O, key) && $c4fba4611365c4f5$var$push(result, key);\n    // Don't enum bug & hidden keys\n    while(names.length > i)if ($1f868a26fd901990$exports(O, key = names[i++])) ~$c4fba4611365c4f5$require$indexOf(result, key) || $c4fba4611365c4f5$var$push(result, key);\n    return result;\n};\n\n\nvar $e73f13f1d8a17cad$exports = {};\n\"use strict\";\n// IE8- don't enum bug keys\n$e73f13f1d8a17cad$exports = [\n    \"constructor\",\n    \"hasOwnProperty\",\n    \"isPrototypeOf\",\n    \"propertyIsEnumerable\",\n    \"toLocaleString\",\n    \"toString\",\n    \"valueOf\"\n];\n\n\nvar $f6c32256739dd9b5$var$hiddenKeys = $e73f13f1d8a17cad$exports.concat(\"length\", \"prototype\");\n$f6c32256739dd9b5$export$2d1720544b23b823 = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {\n    return $c4fba4611365c4f5$exports(O, $f6c32256739dd9b5$var$hiddenKeys);\n};\n\n\n// eslint-disable-next-line es/no-object-getownpropertysymbols -- safe\nvar $0ed66cde5c449819$export$2d1720544b23b823;\n\"use strict\";\n$0ed66cde5c449819$export$2d1720544b23b823 = Object.getOwnPropertySymbols;\n\n\n\nvar $339f2419d379e6c2$var$concat = $43b18aa2f1faac44$exports([].concat);\n// all object keys, includes non-enumerable and symbols\n$339f2419d379e6c2$exports = $a5217dbd1b0d33ce$exports(\"Reflect\", \"ownKeys\") || function ownKeys(it) {\n    var keys = $f6c32256739dd9b5$export$2d1720544b23b823($c845d421b7b0e630$exports(it));\n    var getOwnPropertySymbols = $0ed66cde5c449819$export$2d1720544b23b823;\n    return getOwnPropertySymbols ? $339f2419d379e6c2$var$concat(keys, getOwnPropertySymbols(it)) : keys;\n};\n\n\n\n\n$ef14b437ba65973a$exports = function(target, source, exceptions) {\n    var keys = $339f2419d379e6c2$exports(source);\n    var defineProperty = $2d0ac3aa5e39584b$export$2d1720544b23b823;\n    var getOwnPropertyDescriptor = $6d99163b6684d050$export$2d1720544b23b823;\n    for(var i = 0; i < keys.length; i++){\n        var key = keys[i];\n        if (!$1f868a26fd901990$exports(target, key) && !(exceptions && $1f868a26fd901990$exports(exceptions, key))) defineProperty(target, key, getOwnPropertyDescriptor(source, key));\n    }\n};\n\n\nvar $ca268db110e9e457$exports = {};\n\"use strict\";\n\n\nvar $ca268db110e9e457$var$replacement = /#|\\.prototype\\./;\nvar $ca268db110e9e457$var$isForced = function(feature, detection) {\n    var value = $ca268db110e9e457$var$data[$ca268db110e9e457$var$normalize(feature)];\n    return value === $ca268db110e9e457$var$POLYFILL ? true : value === $ca268db110e9e457$var$NATIVE ? false : $70e34a5a2021f756$exports(detection) ? $6140c9fa18232846$exports(detection) : !!detection;\n};\nvar $ca268db110e9e457$var$normalize = $ca268db110e9e457$var$isForced.normalize = function(string) {\n    return String(string).replace($ca268db110e9e457$var$replacement, \".\").toLowerCase();\n};\nvar $ca268db110e9e457$var$data = $ca268db110e9e457$var$isForced.data = {};\nvar $ca268db110e9e457$var$NATIVE = $ca268db110e9e457$var$isForced.NATIVE = \"N\";\nvar $ca268db110e9e457$var$POLYFILL = $ca268db110e9e457$var$isForced.POLYFILL = \"P\";\n$ca268db110e9e457$exports = $ca268db110e9e457$var$isForced;\n\n\n/*\n  options.target         - name of the target object\n  options.global         - target is the global object\n  options.stat           - export as static methods of target\n  options.proto          - export as prototype methods of target\n  options.real           - real prototype method for the `pure` version\n  options.forced         - export even if the native feature is available\n  options.bind           - bind methods to the target, required for the `pure` version\n  options.wrap           - wrap constructors to preventing global pollution, required for the `pure` version\n  options.unsafe         - use the simple assignment of property instead of delete + defineProperty\n  options.sham           - add a flag to not completely full polyfills\n  options.enumerable     - export as enumerable property\n  options.dontCallGetSet - prevent calling a getter on target\n  options.name           - the .name of the function if it does not match the key\n*/ $ca3e1754e676956d$exports = function(options, source) {\n    var TARGET = options.target;\n    var GLOBAL = options.global;\n    var STATIC = options.stat;\n    var FORCED, target, key, targetProperty, sourceProperty, descriptor;\n    if (GLOBAL) target = $55b335199d6e6d5d$exports;\n    else if (STATIC) target = $55b335199d6e6d5d$exports[TARGET] || $4ce407c7007beb63$exports(TARGET, {});\n    else target = $55b335199d6e6d5d$exports[TARGET] && $55b335199d6e6d5d$exports[TARGET].prototype;\n    if (target) for(key in source){\n        sourceProperty = source[key];\n        if (options.dontCallGetSet) {\n            descriptor = $ca3e1754e676956d$require$getOwnPropertyDescriptor(target, key);\n            targetProperty = descriptor && descriptor.value;\n        } else targetProperty = target[key];\n        FORCED = $ca268db110e9e457$exports(GLOBAL ? key : TARGET + (STATIC ? \".\" : \"#\") + key, options.forced);\n        // contained in target\n        if (!FORCED && targetProperty !== undefined) {\n            if (typeof sourceProperty == typeof targetProperty) continue;\n            $ef14b437ba65973a$exports(sourceProperty, targetProperty);\n        }\n        // add a flag to not completely full polyfills\n        if (options.sham || targetProperty && targetProperty.sham) $8693737507995841$exports(sourceProperty, \"sham\", true);\n        $40e957865125f98f$exports(target, key, sourceProperty, options);\n    }\n};\n\n\n\nvar $a393da0e05d61ed1$exports = {};\n\"use strict\";\n\nvar $3cdb2ef65d8e3cb5$exports = {};\n\"use strict\";\n\nvar $3cdb2ef65d8e3cb5$var$FunctionPrototype = Function.prototype;\nvar $3cdb2ef65d8e3cb5$var$apply = $3cdb2ef65d8e3cb5$var$FunctionPrototype.apply;\nvar $3cdb2ef65d8e3cb5$var$call = $3cdb2ef65d8e3cb5$var$FunctionPrototype.call;\n// eslint-disable-next-line es/no-reflect -- safe\n$3cdb2ef65d8e3cb5$exports = typeof Reflect == \"object\" && Reflect.apply || ($bcbe62e89adc7d37$exports ? $3cdb2ef65d8e3cb5$var$call.bind($3cdb2ef65d8e3cb5$var$apply) : function() {\n    return $3cdb2ef65d8e3cb5$var$call.apply($3cdb2ef65d8e3cb5$var$apply, arguments);\n});\n\n\nvar $43284f0171045916$exports = {};\n\"use strict\";\nvar $4828cb1b4c7586c8$exports = {};\n\"use strict\";\n\n\n$4828cb1b4c7586c8$exports = function(fn) {\n    // Nashorn bug:\n    //   https://github.com/zloirock/core-js/issues/1128\n    //   https://github.com/zloirock/core-js/issues/1130\n    if ($b0ba63bfbfb16088$exports(fn) === \"Function\") return $43b18aa2f1faac44$exports(fn);\n};\n\n\n\n\nvar $43284f0171045916$var$bind = $4828cb1b4c7586c8$exports($4828cb1b4c7586c8$exports.bind);\n// optional / simple context binding\n$43284f0171045916$exports = function(fn, that) {\n    $ae485921c5498156$exports(fn);\n    return that === undefined ? fn : $bcbe62e89adc7d37$exports ? $43284f0171045916$var$bind(fn, that) : function() {\n        return fn.apply(that, arguments);\n    };\n};\n\n\n\n\n\nvar $b8ce1ad1b6b1e7c1$exports = {};\n\"use strict\";\n\n$b8ce1ad1b6b1e7c1$exports = $a5217dbd1b0d33ce$exports(\"document\", \"documentElement\");\n\n\nvar $0709cba658bb4ed6$exports = {};\n\"use strict\";\n\n$0709cba658bb4ed6$exports = $43b18aa2f1faac44$exports([].slice);\n\n\n\nvar $7d824954c5058f7d$exports = {};\n\"use strict\";\nvar $7d824954c5058f7d$var$$TypeError = TypeError;\n$7d824954c5058f7d$exports = function(passed, required) {\n    if (passed < required) throw new $7d824954c5058f7d$var$$TypeError(\"Not enough arguments\");\n    return passed;\n};\n\n\nvar $05f68a2417343639$exports = {};\n\"use strict\";\n\n// eslint-disable-next-line redos/no-vulnerable -- safe\n$05f68a2417343639$exports = /(?:ipad|iphone|ipod).*applewebkit/i.test($492c6dc902f2bf18$exports);\n\n\nvar $3f8bc2b5488269f3$exports = {};\n\"use strict\";\n\n\n$3f8bc2b5488269f3$exports = $b0ba63bfbfb16088$exports($55b335199d6e6d5d$exports.process) === \"process\";\n\n\nvar $a393da0e05d61ed1$var$set = $55b335199d6e6d5d$exports.setImmediate;\nvar $a393da0e05d61ed1$var$clear = $55b335199d6e6d5d$exports.clearImmediate;\nvar $a393da0e05d61ed1$var$process = $55b335199d6e6d5d$exports.process;\nvar $a393da0e05d61ed1$var$Dispatch = $55b335199d6e6d5d$exports.Dispatch;\nvar $a393da0e05d61ed1$var$Function = $55b335199d6e6d5d$exports.Function;\nvar $a393da0e05d61ed1$var$MessageChannel = $55b335199d6e6d5d$exports.MessageChannel;\nvar $a393da0e05d61ed1$var$String = $55b335199d6e6d5d$exports.String;\nvar $a393da0e05d61ed1$var$counter = 0;\nvar $a393da0e05d61ed1$var$queue = {};\nvar $a393da0e05d61ed1$var$ONREADYSTATECHANGE = \"onreadystatechange\";\nvar $a393da0e05d61ed1$var$$location, $a393da0e05d61ed1$var$defer, $a393da0e05d61ed1$var$channel, $a393da0e05d61ed1$var$port;\n$6140c9fa18232846$exports(function() {\n    // Deno throws a ReferenceError on `location` access without `--location` flag\n    $a393da0e05d61ed1$var$$location = $55b335199d6e6d5d$exports.location;\n});\nvar $a393da0e05d61ed1$var$run = function(id) {\n    if ($1f868a26fd901990$exports($a393da0e05d61ed1$var$queue, id)) {\n        var fn = $a393da0e05d61ed1$var$queue[id];\n        delete $a393da0e05d61ed1$var$queue[id];\n        fn();\n    }\n};\nvar $a393da0e05d61ed1$var$runner = function(id) {\n    return function() {\n        $a393da0e05d61ed1$var$run(id);\n    };\n};\nvar $a393da0e05d61ed1$var$eventListener = function(event) {\n    $a393da0e05d61ed1$var$run(event.data);\n};\nvar $a393da0e05d61ed1$var$globalPostMessageDefer = function(id) {\n    // old engines have not location.origin\n    $55b335199d6e6d5d$exports.postMessage($a393da0e05d61ed1$var$String(id), $a393da0e05d61ed1$var$$location.protocol + \"//\" + $a393da0e05d61ed1$var$$location.host);\n};\n// Node.js 0.9+ & IE10+ has setImmediate, otherwise:\nif (!$a393da0e05d61ed1$var$set || !$a393da0e05d61ed1$var$clear) {\n    $a393da0e05d61ed1$var$set = function setImmediate(handler) {\n        $7d824954c5058f7d$exports(arguments.length, 1);\n        var fn = $70e34a5a2021f756$exports(handler) ? handler : $a393da0e05d61ed1$var$Function(handler);\n        var args = $0709cba658bb4ed6$exports(arguments, 1);\n        $a393da0e05d61ed1$var$queue[++$a393da0e05d61ed1$var$counter] = function() {\n            $3cdb2ef65d8e3cb5$exports(fn, undefined, args);\n        };\n        $a393da0e05d61ed1$var$defer($a393da0e05d61ed1$var$counter);\n        return $a393da0e05d61ed1$var$counter;\n    };\n    $a393da0e05d61ed1$var$clear = function clearImmediate(id) {\n        delete $a393da0e05d61ed1$var$queue[id];\n    };\n    // Node.js 0.8-\n    if ($3f8bc2b5488269f3$exports) $a393da0e05d61ed1$var$defer = function(id) {\n        $a393da0e05d61ed1$var$process.nextTick($a393da0e05d61ed1$var$runner(id));\n    };\n    else if ($a393da0e05d61ed1$var$Dispatch && $a393da0e05d61ed1$var$Dispatch.now) $a393da0e05d61ed1$var$defer = function(id) {\n        $a393da0e05d61ed1$var$Dispatch.now($a393da0e05d61ed1$var$runner(id));\n    };\n    else if ($a393da0e05d61ed1$var$MessageChannel && !$05f68a2417343639$exports) {\n        $a393da0e05d61ed1$var$channel = new $a393da0e05d61ed1$var$MessageChannel();\n        $a393da0e05d61ed1$var$port = $a393da0e05d61ed1$var$channel.port2;\n        $a393da0e05d61ed1$var$channel.port1.onmessage = $a393da0e05d61ed1$var$eventListener;\n        $a393da0e05d61ed1$var$defer = $43284f0171045916$exports($a393da0e05d61ed1$var$port.postMessage, $a393da0e05d61ed1$var$port);\n    // Browsers with postMessage, skip WebWorkers\n    // IE8 has postMessage, but it's sync & typeof its postMessage is 'object'\n    } else if ($55b335199d6e6d5d$exports.addEventListener && $70e34a5a2021f756$exports($55b335199d6e6d5d$exports.postMessage) && !$55b335199d6e6d5d$exports.importScripts && $a393da0e05d61ed1$var$$location && $a393da0e05d61ed1$var$$location.protocol !== \"file:\" && !$6140c9fa18232846$exports($a393da0e05d61ed1$var$globalPostMessageDefer)) {\n        $a393da0e05d61ed1$var$defer = $a393da0e05d61ed1$var$globalPostMessageDefer;\n        $55b335199d6e6d5d$exports.addEventListener(\"message\", $a393da0e05d61ed1$var$eventListener, false);\n    // IE8-\n    } else if ($a393da0e05d61ed1$var$ONREADYSTATECHANGE in $15c0c414b89100b1$exports(\"script\")) $a393da0e05d61ed1$var$defer = function(id) {\n        $b8ce1ad1b6b1e7c1$exports.appendChild($15c0c414b89100b1$exports(\"script\"))[$a393da0e05d61ed1$var$ONREADYSTATECHANGE] = function() {\n            $b8ce1ad1b6b1e7c1$exports.removeChild(this);\n            $a393da0e05d61ed1$var$run(id);\n        };\n    };\n    else $a393da0e05d61ed1$var$defer = function(id) {\n        setTimeout($a393da0e05d61ed1$var$runner(id), 0);\n    };\n}\n$a393da0e05d61ed1$exports = {\n    set: $a393da0e05d61ed1$var$set,\n    clear: $a393da0e05d61ed1$var$clear\n};\n\n\nvar $99b55bbd56d52729$require$clearImmediate = $a393da0e05d61ed1$exports.clear;\n// `clearImmediate` method\n// http://w3c.github.io/setImmediate/#si-clearImmediate\n$ca3e1754e676956d$exports({\n    global: true,\n    bind: true,\n    enumerable: true,\n    forced: $55b335199d6e6d5d$exports.clearImmediate !== $99b55bbd56d52729$require$clearImmediate\n}, {\n    clearImmediate: $99b55bbd56d52729$require$clearImmediate\n});\n\n\n\"use strict\";\n\n\n\nvar $e55ac54d5aaa2e1c$require$setTask = $a393da0e05d61ed1$exports.set;\nvar $f112a170991e44cc$exports = {};\n\"use strict\";\n\n\n\nvar $99637759dc933969$exports = {};\n\"use strict\";\n/* global Bun -- Bun case */ $99637759dc933969$exports = typeof Bun == \"function\" && Bun && typeof Bun.version == \"string\";\n\n\n\n\n\nvar $f112a170991e44cc$var$Function = $55b335199d6e6d5d$exports.Function;\n// dirty IE9- and Bun 0.3.0- checks\nvar $f112a170991e44cc$var$WRAP = /MSIE .\\./.test($492c6dc902f2bf18$exports) || $99637759dc933969$exports && function() {\n    var version = $55b335199d6e6d5d$exports.Bun.version.split(\".\");\n    return version.length < 3 || version[0] === \"0\" && (version[1] < 3 || version[1] === \"3\" && version[2] === \"0\");\n}();\n// IE9- / Bun 0.3.0- setTimeout / setInterval / setImmediate additional parameters fix\n// https://html.spec.whatwg.org/multipage/timers-and-user-prompts.html#timers\n// https://github.com/oven-sh/bun/issues/1633\n$f112a170991e44cc$exports = function(scheduler, hasTimeArg) {\n    var firstParamIndex = hasTimeArg ? 2 : 1;\n    return $f112a170991e44cc$var$WRAP ? function(handler, timeout /* , ...arguments */ ) {\n        var boundArgs = $7d824954c5058f7d$exports(arguments.length, 1) > firstParamIndex;\n        var fn = $70e34a5a2021f756$exports(handler) ? handler : $f112a170991e44cc$var$Function(handler);\n        var params = boundArgs ? $0709cba658bb4ed6$exports(arguments, firstParamIndex) : [];\n        var callback = boundArgs ? function() {\n            $3cdb2ef65d8e3cb5$exports(fn, this, params);\n        } : fn;\n        return hasTimeArg ? scheduler(callback, timeout) : scheduler(callback);\n    } : scheduler;\n};\n\n\n// https://github.com/oven-sh/bun/issues/1633\nvar $e55ac54d5aaa2e1c$var$setImmediate = $55b335199d6e6d5d$exports.setImmediate ? $f112a170991e44cc$exports($e55ac54d5aaa2e1c$require$setTask, false) : $e55ac54d5aaa2e1c$require$setTask;\n// `setImmediate` method\n// http://w3c.github.io/setImmediate/#si-setImmediate\n$ca3e1754e676956d$exports({\n    global: true,\n    bind: true,\n    enumerable: true,\n    forced: $55b335199d6e6d5d$exports.setImmediate !== $e55ac54d5aaa2e1c$var$setImmediate\n}, {\n    setImmediate: $e55ac54d5aaa2e1c$var$setImmediate\n});\n\n\n\n\n//One big module for all the models\n/* A config.js file is used in software projects to centralize configuration settings, making it easier to manage different aspects of your application. \n\nContents of config.js:\nEnvironment-Specific Settings: This includes different parameters for development, testing, and production environments, such as database URLs, API endpoints, and server ports.\nAPI Keys and Credentials: Securely store API keys and other credentials your application needs for interacting with external services. For production, it's safer to use environment variables or secure services to manage these.\nApplication Settings: General settings that influence application behavior, like feature toggles, session parameters, and pagination defaults.\nConnection and Performance Settings: Configurations for performance optimization, such as request timeouts, database connection pools, and rate limits.\nSecurity Settings: Settings related to security features, including CORS configurations, SSL/TLS setups, and security headers.\n\nUsing a config.js file effectively helps maintain a cleaner, more secure, and easily maintainable codebase by centralizing and managing settings separately from application logic. */ const $dba1f40f036b2a50$export$923ea8233b386e99 = `https://forkify-api.herokuapp.com/api/v2/recipes`;\nconst $dba1f40f036b2a50$export$196440f71ed9f601 = 10;\nconst $dba1f40f036b2a50$export$5feaddb1377b7f5e = 10;\nconst $dba1f40f036b2a50$export$a9861bd62f48e142 = \"786378a9-17fb-4888-b735-553b6c89e880\";\nconst $dba1f40f036b2a50$export$3ce8858248d89a69 = 2500;\n\n\n/* Contains helper functions that we will reuse throughout the project */ \n//If our fetch takes too long to load the data, we want to time out the request by rejecting the Promise. We are going to implement this by using the race() function to see which settles first: the fetch request or the timeout function\nconst $ae0ec1623a891cbe$var$timeout = function(s) {\n    return new Promise(function(_, reject) {\n        setTimeout(function() {\n            reject(new Error(`Request took too long! Timeout after ${s} second`));\n        }, s * 1000);\n    });\n};\nconst $ae0ec1623a891cbe$export$2b3ff41fecbef7c8 = async function(url, uploadData) {\n    try {\n        const fetchPro = uploadData ? await fetch(url, {\n            method: \"POST\",\n            headers: {\n                //Information about the request\n                \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify(uploadData)\n        }) : fetch(url);\n        const res = await Promise.race([\n            fetchPro,\n            $ae0ec1623a891cbe$var$timeout((0, $dba1f40f036b2a50$export$196440f71ed9f601))\n        ]); //race concurrently initiates the execution of all the promises in the input array. fetch automatically creates a GET request for us to get the data from the passed in URL.\n        const data = await res.json();\n        if (!res.ok) throw new Error(`${data.message} ${res.status}`); //Using the error message from our API and throwing our error so that it gets handled in our catch both. Note that the error object only accepts one string argument\n        return data;\n    } catch (err) {}\n}; // //Function that will fetch data from a web API for us and convert the data to json()\n // export const getJSON = async function (url) {\n //   try {\n //     const res = await Promise.race([fetch(url), timeout(TIMEOUT_SEC)]); //race concurrently initiates the execution of all the promises in the input array. fetch automatically creates a GET request for us to get the data from the passed in URL.\n //     const data = await res.json();\n //     if (!res.ok) {\n //       throw new Error(`${data.message} ${res.status}`); //Using the error message from our API and throwing our error so that it gets handled in our catch both. Note that the error object only accepts one string argument\n //     }\n //     return data;\n //   } catch (err) {\n //     //Since the purpose of this function is to return a promise, we are also likely going to be using this function inside of another async function. So, we want to rethrow the error so that the async function that called this function could handle the error\n //     throw err;\n //   }\n // };\n // //Function that will send data to a web API for us\n // export const sendJSON = async function (url, uploadData) {\n //   try {\n //     const fetchPro = await fetch(url, {\n //       method: 'POST',\n //       headers: {\n //         //Information about the request\n //         'Content-Type': 'application/json', //specifying that the data that we're going to send in is going to be in JSON format so the API knows to correctly accept that data and to create a new recipe in the database\n //       },\n //       body: JSON.stringify(uploadData), //The data that we want to send. Remember that we specified that the body will be in JSON, so we will use stringify to convert our data that we want to send into JSON\n //     }); //We can also use fetch to create a POST request in order to send data. In order to do that, aside from just sending in a URL, we also need to send in an options object\n //     //We will still do this to time how long this request takes\n //     const res = await Promise.race([fetchPro, timeout(TIMEOUT_SEC)]); //race concurrently initiates the execution of all the promises in the input array.\n //     //Forkify API will actually return back the data that we just sent, so we're still going to await for this\n //     const data = await res.json();\n //     if (!res.ok) {\n //       throw new Error(`${data.message} ${res.status}`); //Using the error message from our API and throwing our error so that it gets handled in our catch both. Note that the error object only accepts one string argument\n //     }\n //     return data;\n //   } catch (err) {\n //     //Since the purpose of this function is to return a promise, we are also likely going to be using this function inside of another async function. So, we want to rethrow the error so that the async function that called this function could handle the error\n //     throw err;\n //   }\n // };\n\n\nconst $140f8d4f1c304308$export$ca000e230c0caa3e = {\n    recipe: {},\n    search: {\n        query: \"\",\n        results: [],\n        page: 1,\n        resultsPerPage: (0, $dba1f40f036b2a50$export$5feaddb1377b7f5e)\n    },\n    bookmarks: []\n};\n//Receive the recipe from the API and convert it into our own object that we'll use throughout our application, where we'll have the property names match ours.\nconst $140f8d4f1c304308$var$createRecipeObject = function(data) {\n    const { recipe: recipe } = data.data;\n    return {\n        id: recipe.id,\n        title: recipe.title,\n        publisher: recipe.publisher,\n        sourceUrl: recipe.source_url,\n        image: recipe.image_url,\n        servings: recipe.servings,\n        cookingTime: recipe.cooking_time,\n        ingredients: recipe.ingredients,\n        ...recipe.key && {\n            key: recipe.key\n        }\n    };\n};\nconst $140f8d4f1c304308$export$b96725c7a035d60b = async function(id) {\n    try {\n        const data = await (0, $ae0ec1623a891cbe$export$2b3ff41fecbef7c8)(`${(0, $dba1f40f036b2a50$export$923ea8233b386e99)}/${id}?key=${(0, $dba1f40f036b2a50$export$a9861bd62f48e142)}`);\n        //Let's create a new object based on our returned data object with more readable variable names. Basically, let's reformat our object.\n        // const recipe = data.data.recipe;\n        // const { recipe } = data.data; //destructuring because our variable name will be the same as the property name\n        //Currently recipe is linked to data.data.recipe, and now we are refactoring our property names. We are reassigning properties from an existing object (recipe) to a new object, which creates a new object that includes only the properties you specify.\n        //The pattern of newPropName: oldObject.oldPropName is particularly useful when you want to rename properties while transferring them to a new object.\n        //It may seem redundant when we're choosing the same name as the original property, but we still need to specify which properties we want our new object to have.\n        //This sets a clear structure for the new recipe object and can be easily extended for transformations, filtering, or renaming without affecting the original data structure.\n        //It also enhances the predictability and maintainability of the code, making it clearer what the expected properties of the recipe object are in the scope where it is used.\n        //You're constructing a completely new object. This new object is distinct from the original recipe object referenced earlier.\n        //Any modifications to this new object will not affect the original recipe object or data.data.recipe\n        //While creating this new object, you're still accessing the properties of the original recipe object.\n        //This is possible because in the expression that creates the new object, the right-hand side of each property assignment (e.g., recipe.id, recipe.title) evaluates first.\n        //During this evaluation, recipe still refers to the original object, allowing you to retrieve the existing values.\n        //Once the new object is created and initialized with values from the original recipe object, you assign this new object back to the recipe variable.\n        //At this point, recipe now points to the new object, and the link to the original object is replaced only in this local scope. The original object, data.data.recipe, remains unchanged elsewhere in your program.\n        //This approach is particularly useful when you want to ensure immutability or when you need to work with a subset of the properties from an object, possibly transforming or filtering them in the process.\n        //By reassigning recipe to a new object, you essentially \"decouple\" it from the original data structure, allowing safer manipulation without side effects on the original data, thereby promoting safer and more predictable code behavior, especially in larger, more complex applications.\n        // state.recipe = {\n        //   id: recipe.id,\n        //   title: recipe.title,\n        //   publisher: recipe.publisher,\n        //   sourceUrl: recipe.source_url,\n        //   image: recipe.image_url,\n        //   servings: recipe.servings,\n        //   cookingTime: recipe.cooking_time,\n        //   ingredients: recipe.ingredients,\n        // };\n        $140f8d4f1c304308$export$ca000e230c0caa3e.recipe = $140f8d4f1c304308$var$createRecipeObject(data); //We set the recipe that we just fetched from the API to our current recipe that we'll load onto our page\n        //if we have any element in our bookmarks array that has the same id as the current id that we're loading, then we want to mark the current recipe that we're loading as bookmarked for our view\n        if ($140f8d4f1c304308$export$ca000e230c0caa3e.bookmarks.some((bookmark)=>bookmark.id === id)) $140f8d4f1c304308$export$ca000e230c0caa3e.recipe.bookmarked = true;\n    } catch (err) {\n        throw err; //We need our controller to handle the error, so we throw this error back up\n    }\n};\nconst $140f8d4f1c304308$export$202b8e5cb363a0c4 = async function(query) {\n    try {\n        //Store the query alongside the results in our state\n        $140f8d4f1c304308$export$ca000e230c0caa3e.search.query = query;\n        const data = await (0, $ae0ec1623a891cbe$export$2b3ff41fecbef7c8)(`${(0, $dba1f40f036b2a50$export$923ea8233b386e99)}?search=${query}&key=${(0, $dba1f40f036b2a50$export$a9861bd62f48e142)}`); //we already have a parameter ('?'), so we use '&' for our key. Search and key.\n        //change property names for each object inside of our array of objects fetched from the API and we store this new array in our state\n        $140f8d4f1c304308$export$ca000e230c0caa3e.search.results = data.data.recipes.map((recipe)=>{\n            //Note that the objects maintain the same order, it just renames the properties to what you specify in here and stores those values.\n            //This new object only has the properties that we give it, it will not contain all properties of the object we're mapping to unless we assign all of them.\n            return {\n                id: recipe.id,\n                title: recipe.title,\n                publisher: recipe.publisher,\n                image: recipe.image_url,\n                ...recipe.key && {\n                    key: recipe.key\n                }\n            };\n        });\n        $140f8d4f1c304308$export$ca000e230c0caa3e.search.page = 1; //When loading a new search result, we want to reset the page to 1\n    } catch (err) {\n        throw err;\n    }\n};\nconst $140f8d4f1c304308$export$8d7f79465139ab72 = function(page = $140f8d4f1c304308$export$ca000e230c0caa3e.search.page) {\n    //Let's say for page 1, we want to receive results 0 to 9. And for page 2, results 10 to 19. And so on. Keep in mind that we want 10 results per page. And let's say for page 1 we named 0 as start and 9 as end.\n    //To calculate this, we take the page, subtract 1, and then multiply this value by the number of results we want on the page. And for the end, we simply do page * number of results\n    //So, page 1. Start = (1 - 1) * 10 = 0. End = 1 * 10 = 10. Page 2. Start = (2-1) * 10 = 10. End = 2 * 10 = 20. Page 3. Start = (3-1) * 10 = 20. End = 3 * 10 = 30.\n    //End would be where we are starting off from, we wouldn't need to add one because remember that the second parameter in slice is exclusive.\n    const start = (page - 1) * $140f8d4f1c304308$export$ca000e230c0caa3e.search.resultsPerPage;\n    const end = page * $140f8d4f1c304308$export$ca000e230c0caa3e.search.resultsPerPage;\n    //Let's save our page number\n    $140f8d4f1c304308$export$ca000e230c0caa3e.search.page = page;\n    return $140f8d4f1c304308$export$ca000e230c0caa3e.search.results.slice(start, end);\n};\nconst $140f8d4f1c304308$export$5e23f4642ecad5ea = function(newServings) {\n    //We could use map to create a new array and override our current state.recipe.ingredients to the clone, but let's just mutate the underlying array.\n    //Our API gives us a quantity within each ingredient object within recipe.ingredients array, so this is what we want to modify\n    $140f8d4f1c304308$export$ca000e230c0caa3e.recipe.ingredients.forEach((ing)=>{\n        //The formula to calculate the new quantity for our new serving is newQuantity = (oldQuantity * newServings)/oldServings. For example, if we need 2 tablespoon of salt for 1 serving, and we increase the serving to 2 we calculate this by 1 * (2/1) = 2\n        //Multiplication of oldQuantity and newServings: Here, you are scaling the quantity of the ingredient directly in proportion to the increase in servings. If the number of servings doubles, the quantity of each ingredient also doubles.\n        //Division by oldServings: This step adjusts the scaled quantity to ensure it is in proportion to the original serving size. If your original recipe quantity was calculated for a certain number of servings, dividing by this number aligns the scaled quantity correctly. In this example, since the original servings (oldServings) is 1, dividing by 1 does not change the number.\n        //By dividing by the old serving size, you're adjusting the multiplication factor to reflect the base from which you are scaling up or down. This keeps the ingredient proportions exactly aligned with the increase or decrease in servings.\n        ing.quantity = ing.quantity * newServings / $140f8d4f1c304308$export$ca000e230c0caa3e.recipe.servings;\n    });\n    //Update the servings in the state. We do this at the end as we needed our oldServings to calculate the quantity of each ingredient for our newServings\n    $140f8d4f1c304308$export$ca000e230c0caa3e.recipe.servings = newServings;\n};\n//Persist bookmarks data across different page loads using local storage. We will want to update our localStorage everytime we add/remove a bookmark.\nconst $140f8d4f1c304308$var$persistBookmarks = function() {\n    localStorage.setItem(\"bookmarks\", JSON.stringify($140f8d4f1c304308$export$ca000e230c0caa3e.bookmarks));\n//However, note that just because the data is stored in our localStorage that doesn't mean that we'll still have that persist in our bookmarks array.\n//So, basically, when the page is loaded, we want to transfer the data stored in the localStorage, if there is any, to our bookmarks array and render it.\n//We will write this logic in our init function.\n};\nconst $140f8d4f1c304308$export$72009cc673d27d80 = function(recipe) {\n    //Add bookmark\n    $140f8d4f1c304308$export$ca000e230c0caa3e.bookmarks.push(recipe);\n    //Mark current recipe as bookmarked. This will create the bookmarked property on state.recipe for us if it doesn't already exist.\n    //When evaluating this bookmarked property in the view (or anywhere else), if we haven't set this property to true yet then it will evaluate to undefined, which is a falsy value.\n    $140f8d4f1c304308$export$ca000e230c0caa3e.recipe.bookmarked = true;\n    $140f8d4f1c304308$var$persistBookmarks();\n};\nconst $140f8d4f1c304308$export$136048bcb9946c75 = function(id) {\n    const index = $140f8d4f1c304308$export$ca000e230c0caa3e.bookmarks.findIndex((recipe)=>id === recipe.id); //find the element in the bookmarks array that has the same id as the passed in id\n    //JS passes by value, meaning if you pass in an object or a primitive value, actually trying to change what the identifier is pointing to will not persist. However, with objects, the properties of the object is passed by reference.\n    //So modifying the bookmarked property in this object inside of the bookmarked array will actually modify that property in the object.\n    //unlike primitive values, which are passed by value in JS meaning copies of the value are passed.\n    $140f8d4f1c304308$export$ca000e230c0caa3e.bookmarks[index].bookmarked = false; //set the bookmarked property to false for this recipe.\n    $140f8d4f1c304308$export$ca000e230c0caa3e.bookmarks.splice(index, 1); //remove this recipe from our bookmarked array. we only want to delete 1 element starting from this index\n    $140f8d4f1c304308$var$persistBookmarks();\n};\nconst $140f8d4f1c304308$export$973ecd6243726f9d = function() {\n    const storage = localStorage.getItem(\"bookmarks\"); //We don't directly store this in our state as this data might not even be defined at all (undefined) if we haven't added or removed any bookmarks.\n    //We want to make sure that this is defined. We'll also make sure that if it's empty, then we'll just keep our initial empty array.\n    if (storage?.length > 0) $140f8d4f1c304308$export$ca000e230c0caa3e.bookmarks = JSON.parse(storage); //Parse converts the string back to an object, which we will store in our state\n};\nconst $140f8d4f1c304308$export$d660c2254e74960d = async function(newRecipe) {\n    //First, we'll need to take the raw data that we've pulled from the form and transform it into the same format as the data that we grab out of the API.\n    //We notice that the ingredients property in our received data from the API is an array that stores an array of ingredient objects. However, from our form, we simply receive a string in the specified format to store this information.\n    //So, we're going to have to first convert this by taking our newRecipe object, extract the ingredients data, and store them in a new array.\n    //So, let's convert the object that contain the data that was passed into the form into an array\n    //Asynchronous functions in JavaScript return promises, and these promises can either resolve successfully or reject due to an error.\n    //When an async function throws an error, it returns a Promise that gets rejected with that error.\n    //A try-catch block allows you to catch errors that occur during the asynchronous operations performed within the async function\n    //We could have our higher-level function (controlAddRecipe) handle the error with our rejected Promise as the error thrown will propagate up naturally.\n    //However, we are going to utilize localized error handling rather than relying on higher-level handling as a design choice.\n    //We want to throw different personalized Error objects based on the error that rejects the Promise, which localized error handling is useful for.\n    try {\n        //First, we filter through the entries that are ingredients and have a value (entries are a key/value pair), and then we use map() to create an object storing the ingredients so that we could ultimately return our object into our newly created array\n        const ingredients = Object.entries(newRecipe).filter((entry)=>{\n            // console.log(entry);\n            return entry[0].startsWith(\"ingredient-\") && entry[1];\n        } //the key should start with 'ingredient-' and the value should not be an empty string. Ex: [ingredient-1, '1,gram,salt']\n        ).map((ingredient)=>{\n            // const ingArray = ingredient[1].replaceAll(' ', '').split(','); //Now, we take the data out of the values of our ingredient- keys and destructure them.\n            //However, we want to consider if an ingredient has a whitespace in it, such as 'tomato sauce', which replaceAll() is not allowing\n            const ingArray = ingredient[1].split(\",\").map((str)=>str.trim()); //Instead, we will split the string into multiple parts which will return an array, and then we can loop over this array and just trim each of the elements\n            //For example, if we have '1,gram,tomato sauce', then it will convert to [1,gram,tomato sauce], and then it will trim each of these elements to remove whitespace from the beginning and end of the string.\n            //So, now 'tomato sauce' would retain its whitespace between tomato and sauce.\n            //We also don't want unit and description to ever be undefined in the case of an empty string. We should always receive 3 commas, as specified for the format.\n            if (ingArray.length !== 3) throw new Error(\"Wrong ingredient format! Please use the correct format.\"); //We have converted our strings into an array, separated by the inputted commas by the user. Therefore, there should be exactly 3 elements in our array.\n            //We create variables named quantity, unit, and description and assign quantity to ingArray[0], unit to ingArray[1], and description to ingArray[2]\n            const [quantity, unit, description] = ingArray;\n            //One thing to note in our API is that when quantity is empty, we want it to be stored as null to match the API. Also, quantity should be stored as a Number.\n            //We return an object with the quantity, unit, and description properties holding the values that we just assigned to them previously that we're returning into our ingredients array using map(). Remember {unit} is the same as {unit: unit}.\n            return {\n                quantity: Number(quantity),\n                unit: unit,\n                description: description\n            }; //we return the quantity, unit, and description of each ingredient stored in an object and store this in our array\n        }); //First, we convert our array into a string with ',' as the separator between elements while trimming out any whitespace from the string. In the case of ['  1  , gram , salt  '], we want to trim the whitespace between the separators and from the beginning and end.\n        //We do this by using the replaceAll() function to ensure all the white spaces are removed because trim would only remove the whitespace from the very beginning and very end of the string.\n        //Now it's time to create the object that we will use to pass into our API. We're matching the properties of our new recipe to the properties of objects created by our API.\n        const recipe = {\n            title: newRecipe.title,\n            publisher: newRecipe.publisher,\n            source_url: newRecipe.sourceUrl,\n            image_url: newRecipe.image,\n            cooking_time: Number(newRecipe.cookingTime),\n            servings: Number(newRecipe.servings),\n            ingredients: ingredients\n        };\n        //Now we can send over our recipe to our API\n        const data = await (0, $ae0ec1623a891cbe$export$2b3ff41fecbef7c8)(`${(0, $dba1f40f036b2a50$export$923ea8233b386e99)}?search=${recipe.title}&key=${(0, $dba1f40f036b2a50$export$a9861bd62f48e142)}`, recipe); //refer to documentation to know what url path to use for our POST request as well as to generate our own unique key\n        //Remember that our API sends our recipe back to us so we're going to await for that. Note that the uploaded recipe will automatically have an ID generated for it from the API and will have it stored as the recipe.id property.\n        //Now that we've uploaded our new recipe, it would make sense to now render this new recipe to our user interface after closing the window.\n        //So, we will now convert this returned recipe to the format that we've been using for our application. Which will be the same as what we did in loadRecipe, so we'll create a reusable function (createRecipeObject) for this.\n        $140f8d4f1c304308$export$ca000e230c0caa3e.recipe = $140f8d4f1c304308$var$createRecipeObject(data); //We set the current recipe that we're looking at to the recipe that we just uploaded\n        //We also want to be sure to bookmark our uploaded recipe and also tie our uploaded recipe to our API_KEY\n        //First, we'll mark our uploaded recipe as a bookmark and store our bookmarks in localStorage\n        $140f8d4f1c304308$export$72009cc673d27d80($140f8d4f1c304308$export$ca000e230c0caa3e.recipe);\n        $140f8d4f1c304308$var$persistBookmarks();\n    //Finally, we'll add our API_KEY to our object. We could do that manually; however, we'll do that in our createRecipeObject() function.\n    } catch (err) {\n        throw err;\n    //Rethrow our error because we want our higher-level function that's invoking this function to know that this Promise has been rejected with the appropriate error object as the value.\n    //Otherwise, our Promise would be considered 'fulfilled' since we'd be catching the error and handling it internally, so we need to rethrow the error\n    }\n}; /* Note that when you use import * from 'module' in JavaScript to import everything from a module, you are not only importing the exported parts but also running any top-level code that is executed in that module.\nThis includes any function calls, variable assignments, or other operations that happen at the top level when the module is first evaluated.\n\nModule Evaluation: When a module is imported for the first time, JavaScript evaluates the module from top to bottom. This evaluation includes running any top-level code.\nExports Gathering: After evaluating, JavaScript collects any exports defined in the module, which are then available to be imported by other modules.\nCode Reuse: If the same module is imported elsewhere (even using import * or any other form), the module is not evaluated again. Instead, the already evaluated state is reused. This means that the top-level code is executed only once, the first time the module is loaded.\n\nThis behavior highlights the importance of being cautious with what you place at the top level in your modules, especially operations with side effects, since they will be executed on module load. */ \n\n\n// One class for each of the different views. We do this because we are going to have a parent class named View which will contain a few methods that all the views will inherit. However, we also want each view to have its own private methods and properties.\n//With these in mind, classes seems best due to our need of inheritance as well as encapsulation\nvar $bc530c31e28424ba$exports = {};\n$bc530c31e28424ba$exports = new URL(\"icons.c14567a0.svg\", import.meta.url).toString();\n\n\nclass $810158a560040d0f$export$2e2bcd8739ae039 {\n    //parent class for child classes to inherit methods. We are exporting the class itself as we are not going to create any instances with this view. This is only for child views to inherit these methods.\n    //NOTE: With Parcel and Babel, inheritance between private fields and methods is not supported. So, we are going to change all of our previously private fields to protected. Please do note this when reading the comments for the methods in this class.\n    //With this in mind, we're actually going to change all of our private fields/methods to protected in all of our view files.\n    _data;\n    //Every view will have a unique parentElement, markup, and view so we define those in our separate views. The data can be shared as we are reassigning the data inside of the render() method.\n    /**\n   * Rendered the received object to the DOM. (Documented using JSDoc)\n   * @param {Object | Object[]} data The data to be rendered (e.g. a recipe)                            //Expect an object or an array of objects for our data parameter\n   * @param {boolean} [render=true] If false, create markup string instead of rendering to the DOM      //Render argument is optional, so we surround it in brackets and identify its default value as true\n   * @returns {undefined | ''} A markup string is returned if render=false                              //We either return undefined or our markup string if render is set to false\n   * @this {Object} View Instance       //The 'this' keyword points to the instance of our View object (more accurately, our child instance) that's invoking this method. Notice we specified the type of View in curly braces\n   * @author Eric Chen\n   *\n   */ //Notice that if we hover over the function that we wrote JSDoc for, VSCode will show us our documentation that we wrote. This will remain consistent anytime the function is used in our project.\n    //We are not creating any constructor for RecipeView, but we can still create a function to render the recipe that is passed in, that can be reused in the same RecipeView object that we export.\n    //We accept the recipe data that is passed in and will store the data in the object. Storing it as an object within the class makes it easier to manage and use this data throughout the class methods, and we don't want to rely on the DOM for our data.\n    render(data, render = true) {\n        //If there's no data or we receive an empty array\n        if (!data || Array.isArray(data) && data.length === 0) return this.renderError(); //return out of our function while also calling renderError() on whatever child instance is calling the render method. We already specified the _errMessage inside of our child classes, so that will be handled for us when invoking renderError.\n        this._data = data; //Recall that our data is the passed in data and it is stored inside of our class now.\n        //Now that we've stored the most recent recipe data, we want to display this data on the page.\n        const markup = this._generateMarkup(); //this._generateMarkup is unique for each different child class of view, so we need our own _generateMarkup() method inside of our child class in order to call the inherited render() method from our parent class.\n        //It has to have the same name so the parent class is able to refer to the _generateMarkup method inside of our child class instance\n        if (!render) return markup;\n        this._clear();\n        this._parentElement.insertAdjacentHTML(\"afterbegin\", markup); //insert our markup HTML as the first child in the container. This means that the newly added content becomes the first element within that container so that the newly added content will be on top of the previous content, similar to a stack.\n    }\n    //Only update text attributes in the DOM without re-rendering the entire view\n    update(data) {\n        //Once we update the data, we want the view's data to become the new data and to also generate some new markUp to reflect this change on the DOM\n        //We don't need this check for our update method. We aren't dealing with potential empty arrays or unknown data for our update function as we aren't using it to render fetched data, for example.\n        //We know exactly what we're passing into our update function as we are only using it to update text and attributes in a previous _parentElement to an updated _parentElement, which was the reason why we made this function in the first place.\n        //So, in our case, it's okay if there's an empty array because we want to account for scenarios such as if there were no search results. Because what if we have a link that we want to go to and just paste that into our URL?\n        //There would be no search results, but we don't want to render an error in this case as that would be a completely acceptable scenario.\n        // We could just return out of the function in that case as there would be nothing to update.\n        if (!data || Array.isArray(data) && data.length === 0) return;\n        // if (!data || (Array.isArray(data) && data.length === 0)) {\n        //   return this.renderError();\n        // }\n        this._data = data;\n        //This newMarkup will be the entire markup as if we wanted to render a new view.\n        //However, we are only going to update the text and attributes in the DOM, but we still need to have the entire view in order to do that by essentially comparing the old and new markup against one another\n        const newMarkup = this._generateMarkup();\n        //So, we are going to create newMarkup but not render it. Instead, we're going to create this new markup and compare this new markup to our previous markup and then only update the text and attributes that have changed from the old version to the new version.\n        //First, we'll convert the returned String from the _generateMarkup function to a DOM object to compare with the actual DOM object on the page\n        const newDOM = document.createRange().createContextualFragment(newMarkup);\n        /* document.createRange(): Creates a new Range object. A Range represents a fragment of a document that can contain nodes and parts of text nodes.\n    createContextualFragment(htmlString): This method is called on a Range object. It takes a string of HTML (in this case, newMarkup) and converts it into a DOM fragment.\n    This fragment is a full-fledged part of the DOM but exists in memory and isn't part of the actual document's structure until it's inserted somewhere in the document.\n    \n    Initialization: You create a Range by calling document.createRange(). At this point, the range is conceptually positioned but doesn’t highlight or select anything specific unless you define its start and end points.\n    Fragment Creation: When you call createContextualFragment() with an HTML string, the method parses this string as if it were part of the document at the location specified by the Range. This parsing respects the document's structure and formatting rules.\n    DOM Fragment: The parsed HTML string becomes a DocumentFragment, which is a lightweight, document-like object that can hold DOM nodes in the same way a full document can, but it does so without being directly part of the main document tree until explicitly inserted.\n    Storing in newDOM: The resulting DOM fragment is stored in the variable newDOM. This DOM fragment can now be used for various purposes, such as comparing with the existing DOM on the page or being inserted into the document at a desired location.\n\n    We're essentially preparing a chunk of HTML text to be dynamically manipulated or compared with the current content of the webpage without affecting the visible page until you decide to insert or replace elements.\n    This method is particularly useful for updating parts of a webpage with new content without reloading the entire page, allowing for more efficient and smoother user experiences in dynamic web applications. */ //Now we can select all elements within our new DOM that we created by generating the new markup containing the updated text and attributes. Basically, we are selecting all elements of the DOM with the updated information (the DOM that would have been rendered if we had just called the render() method)\n        //Recall that querySelectorAll returns a NodeList, so let's convert this to an array using Array.from\n        const newElements = Array.from(newDOM.querySelectorAll(\"*\"));\n        //So now we can compare this updated DOM with our current DOM. First, we need to get all the elements of our current DOM (meaning all of the elements within our current _parentElement), and we will update the text and attributes within these elements\n        //within our current _parentElement to our new _parentElement\n        //Note that this name is a bit misleading as it's actually a NodeList, where each \"Node\" is actually each of our child elements within the _parentElement. This is because all elements are nodes. However, not all nodes are elements so this can get a bit confusing.\n        const currElements = Array.from(this._parentElement.querySelectorAll(\"*\"));\n        //Now, let's compare between the elements in our new DOM and our current DOM\n        newElements.forEach((newEl, i)=>{\n            const currEl = currElements[i];\n            //There is a method on all nodes that allows us to compare between two nodes called isEqualNode, so we will use that. Note that this is not comparing memory references, this is comparing the actual content of the nodes\n            //However this name is a bit misleading as it does compare between the nodes in our _parentElement, but it also compares the child elements within our current and new _parentElement\n            if (!currEl.isEqualNode(newEl) && currEl.firstChild?.nodeValue.trim() !== \"\") {\n                //Since we are updating our servings, our text elements will differ in servings as the servings in our state has changed. However, this will be limited to +/- 1 as we also need to update the dataset property (the 'data-*' attribute) within our markup.\n                //What's happening is that the value that we pass into our handler (the updateTo value in our RecipeView) +/- 1 due to the button click, but we are not actually re-rendering and saving this updated value anywhere.\n                //So, we will do this in our second if block.\n                //However, first, we are going to render this new servings value on the DOM.\n                //However, note that this also notices in the parent elements that the entire container elements are different due to the underlying nodes of the servings being different, which we will handle later.\n                //So, over here we will say that if the current element is different than our new element, we will change the text node of the current element to the text node of the new element\n                currEl.textContent = newEl.textContent; //Note that currEl is the DOM element that is currently on the page, so we do want to mutate the text node within this element\n                //Note that just doing the above will not work as we would be replacing the text node for every current element that does not equal our new element, including the text node within the parent container.\n                //This would cause the entire text node in the parent container to equal the text node of our new element.\n                //To avoid this, we need to find a way to determine if the element within our parentElement only contains a text node, without any other children elements, as we know that that's what we're looking to re-render in this case.\n                //And that's what would differentiate this element from others within our parentElement in this situation.\n                //We can do this by adjusting a node property called nodeValue.\n                //The value of nodeValue will be null if the node is an element, amongst many others (you can refer to the doc), but the main point is that if it's a text node, then we can extract that text content value of the text node.\n                //So, with this in mind, we should check to ensure that the elements are different, but on top of that, we also only want elements that only contain a child element containing a text node.\n                //So, we can take the first child of the element since we know that the only child in the element should contain the text node, so if we check the nodeValue property of this text node, it should return something meaning it should not be an empty string or return null.\n                //We can check this on either the currEl or the newEl, it doesn't matter as the indexes are matching. The point is that we find the element containing only the servings text node, and we modify this.\n                //We use optional chaining to ensure that it's not null meaning that if the first child doesn't exist, then we just short circuit and returns undefined instead of throwing an error\n                //We also trim to filter the elements which don't have a first child element containing a text node because the nodeValue of such elements will be a string consisting of white space, such as ('\\n')\n                //However, the parent elements with a first child element containing a text node will pass this condition as there will be some content left after trimming white space.\n                /* The phenomenon where the first child element appears to be just whitespace is a common occurrence in HTML documents, primarily due to how HTML is formatted by developers for readability.\n        When developers create HTML, they often format it with indentations and line breaks to make the code easier to read and manage.\n        These formatting choices, while invisible on the rendered page, become part of the DOM as text nodes. */ //So, we just updated the servings displayed on the DOM based on the new servings\n                //Now we want to update the dataset properties:\n                if (!currEl.isEqualNode(newEl)) //We can access the attributes property, which all elements have. newEl.attributes, for example, will return an object of all of the attributes that have changed.\n                //So, we will convert this object to an array and basically copy all of the attributes from our new element to our current element, updating our DOM\n                Array.from(newEl.attributes).forEach((attr)=>{\n                    currEl.setAttribute(attr.name, attr.value); //if the elements aren't equal, we take the attributes of the updated parentElement of our DOM and copy them over to the current parentElement of our DOM\n                //setAttribute: We are taking the name of our attribute that's updated (in this case, it would be update-to) and we are updating the value tied to this name to the updated value that we get from our new element (parentElement)\n                });\n                this._clear();\n                this._parentElement.insertAdjacentHTML(\"afterbegin\", newMarkup);\n            }\n        });\n    }\n    //Let's create a function to render the spinner when loading the elements in our parent element, which is the container that holds our child elements. We make this reusable by doing this in any parent element that we pass in\n    //Note that renderSpinner has nothing to do with the business logic, but is only presentation logic so this goes in the view\n    //This will be a public method so that the controller could call this method as it starts fetching the data\n    renderSpinner() {\n        this._clear(); //Before loading the spinner, let's clear the container (parent element) so that the only thing inside of the container will be the spinner until the data is finished loading\n        const markup = `<div class=\"spinner\">\n    <svg>\n      <use href=\"${(0, (/*@__PURE__*/$parcel$interopDefault($bc530c31e28424ba$exports)))}#icon-loader\"></use>\n    </svg>\n  </div>`;\n        this._parentElement.insertAdjacentHTML(\"afterbegin\", markup);\n    }\n    //We create this as a method so that other view classes inherit this method. However, we make this protected as private properties and methods do not get inherited and outside classes (only view classes) do not need access to this method.\n    //The protected modifier allows a class member to be accessed within the class itself, by instances of the class, and by any subclass derived from it, but not from the outside world (i.e., not by any code that is not part of the class or its subclasses).\n    //However, note that protected is simply a convention in JS. It does not actually limit accessibility. However, we use this convention so that we know that only View classes should use this property (only view classes would have parentElement anyways).\n    //We could also make this private if we don't plan to have other classes inherit this method if we aren't accessing this method outside of this class definition. Note that private methods/properties cannot be accessed directly from outside the class, including from instances of the class.\n    _clear() {\n        this._parentElement.innerHTML = \"\"; //Before inserting our new recipe into our container, let's clear anything that was previously there. In this case, we are clearing our spinner before adding our new child elements into the container so that the spinner is not constantly on the page.\n    }\n    renderError(err = this._errMessage) {\n        this._clear();\n        const markup = `<div class=\"error\">\n    <div>\n      <svg>\n        <use href=\"${(0, (/*@__PURE__*/$parcel$interopDefault($bc530c31e28424ba$exports)))}#icon-alert-triangle\"></use>\n      </svg>\n    </div>\n    <p>${err}</p>\n  </div>`;\n        this._parentElement.insertAdjacentHTML(\"afterbegin\", markup);\n    }\n    renderMessage(err = this._message) {\n        this._clear();\n        const markup = `<div class=\"message\">\n    <div>\n      <svg>\n        <use href=\"${(0, (/*@__PURE__*/$parcel$interopDefault($bc530c31e28424ba$exports)))}#icon-smile\"></use>\n      </svg>\n    </div>\n    <p>${err}</p>\n  </div>`;\n        this._parentElement.insertAdjacentHTML(\"afterbegin\", markup);\n    }\n}\n\n\n\nvar $af517d3060c307fe$exports = {};\n// FRACTY CONVERTS DECIMAL NUMBERS TO FRACTIONS BY ASSUMING THAT TRAILING PATTERNS FROM 10^-2 CONTINUE TO REPEAT\n// The assumption is based on the most standard numbering conventions\n// e.g. 3.51 will convert to 3 51/100 while 3.511 will convert to 3 23/45\n// Throw any number up to 16 digits long at fracty and let fracy do the work.\n// If number is beyond 16 digits fracty will truncate at 15 digits to compensate for roundoff errors created in IEEE 754 Floating Point conversion.\n$af517d3060c307fe$exports = function(number) {\n    let type;\n    if (number < 0) {\n        number = Math.abs(number);\n        type = \"-\";\n    } else type = \"\";\n    if (number === undefined) return `Your input was undefined.`;\n    if (isNaN(number)) return `\"${number}\" is not a number.`;\n    if (number == 9999999999999999) return `${type}9999999999999999`;\n    if (number > 9999999999999999) return `Too many digits in your integer to maintain IEEE 754 Floating Point conversion accuracy.`;\n    if (Number.isInteger(number)) return `${type}${number}`;\n    if (number < .000001) return \"0\";\n    const numberString = number.toString();\n    const entry = numberString.split(\".\");\n    let integer = entry[0];\n    let decimal;\n    if (decimal == \"0\" && integer !== \"0\") return integer;\n    else if (decimal == \"0\" && integer == \"0\") return \"0\";\n    else if (numberString.length >= 17) decimal = entry[1].slice(0, entry[1].length - 1);\n    else decimal = entry[1];\n    if (decimal == \"99\" && integer !== \"0\") return `${integer} 99/100`;\n    else if (decimal == \"99\" && integer == \"0\") return `99/100`;\n    else if (1 - parseFloat(`.${decimal}`) < .0011) decimal = \"999\";\n    if (decimal == undefined) return integer;\n    const decimalRev = decimal.split(\"\").reverse().join(\"\"); //Reverse the string to look for patterns.\n    const patternSearch = /^(\\d+)\\1{1,2}/; //This greedy regex matches the biggest pattern that starts at the beginning of the string (at the end, in the case of the reversed string). A lazy regex doesn't work because it only identifies subpatterns in cases where subpatterns exist (e.g. '88' in '388388388388'), thus pattern capture must be greedy.\n    let pattern = decimalRev.match(patternSearch); //If there's a pattern, it's full sequence is in [0] of this array and the single unit is in [1] but it may still need to be reduced further.\n    if (pattern && decimal.length > 2) {\n        let patternSequence = pattern[0].split(\"\").reverse().join(\"\");\n        let endPattern = pattern[1].split(\"\").reverse().join(\"\");\n        if (endPattern.length > 1) {\n            let endPatternArray = endPattern.split(\"\");\n            let testSingleUnit = 1;\n            for(let i = 0; i < endPatternArray.length; i++)testSingleUnit /= endPatternArray[0] / endPatternArray[i];\n            if (testSingleUnit === 1) endPattern = endPatternArray[0];\n        }\n        if (endPattern.length > 1 && endPattern.length % 2 === 0) endPattern = parseInt(endPattern.slice(0, endPattern.length / 2), 10) - parseInt(endPattern.slice(endPattern.length / 2, endPattern.length), 10) === 0 ? endPattern.slice(0, endPattern.length / 2) : endPattern;\n        return $af517d3060c307fe$var$yesRepeat(decimal, endPattern, patternSequence, integer, type); //Begin calculating the numerator and denominator for decimals that have a pattern.\n    } else return $af517d3060c307fe$var$noRepeat(decimal, integer, type); //Begin calculating the numerator and denominator for decimals that don't have a pattern.\n};\n//IF THERE'S A TRAILING PATTERN FRACTY DIVIDES THE INPUT BY ONE SUBTRACTED FROM THE NEAREST BASE 10 NUMBER WITH NUMBER OF ZEROS EQUAL TO THE LENGTH OF THE REPEATED PATTERN (I.E. A SERIES OF 9'S) MULTIPLIED BY THE BASE 10 NUMBER GREATER THAN AND CLOSEST TO THE INPUT.\nfunction $af517d3060c307fe$var$yesRepeat(decimal, endPattern, patternSequence, integer, type) {\n    const rep = true; //The numerator repeats.\n    const nonPatternLength = decimal.length - patternSequence.length >= 1 ? decimal.length - patternSequence.length : 1; //Does the length of the non pattern segment of the input = 0? If it does, that's incorrect since we know it must equal at least 1, otherwise it's the length of the decimal input minus the length of the full pattern.\n    const decimalMultiplier2 = Math.pow(10, nonPatternLength); //Second multiplier to use.\n    const float = parseFloat(`0.${decimal}`); //Convert the decimal input to a floating point number.\n    const decimalMultiplier1 = Math.pow(10, endPattern.length); //Find the right multiplier to use for both numerator and denominator, which will later have 1 subtracted from it in the case of the denominator.\n    const numerator = Math.round((float * decimalMultiplier1 - float) * Math.pow(10, nonPatternLength)); //Find the numerator to be used in calculating the fraction that contains a repeating trailing sequence.\n    const denominator = (decimalMultiplier1 - 1) * decimalMultiplier2; //Caluculate the denominator using the equation for repeating trailing sequences.\n    return $af517d3060c307fe$var$reduce(numerator, denominator, integer, type, rep); //Further reduce the numerator and denominator.\n}\n//IF THERE'S NO TRAILING PATTERN FRACTY DIVIDES THE INPUT BY THE NEAREST BASE 10 INTEGER GREATER THAN THE NUMERATOR.\nfunction $af517d3060c307fe$var$noRepeat(decimal, integer, type) {\n    const rep = false; //The numerator doesn't repeat.\n    const numerator = parseInt(decimal, 10); //Numerator begins as decimal input converted into an integer.\n    const denominator = Math.pow(10, decimal.length); //Denominator begins as 10 to the power of the length of the numerator.\n    return $af517d3060c307fe$var$reduce(numerator, denominator, integer, type, rep); //Reduce the numerator and denominator.\n}\n//FRACTY REDUCES THE FRACTION.\nfunction $af517d3060c307fe$var$reduce(numerator, denominator, integer, type, rep) {\n    const primeNumberArray = [\n        2,\n        3,\n        5\n    ]; //If the numerator isn't from a repeating decimal case, the initialized array of prime numbers will suffice to find the common denominators.\n    if (rep === true) {\n        for(let i = 3; i * i <= numerator; i += 2)if (numerator % i === 0) primeNumberArray.push(i);\n    }\n    let j = 0; //Initialize counter over the prime number array for the while loop.\n    let comDenom = 1; //Initialize the common denominator.\n    let num = numerator; //Initialize the numerator.\n    let den = denominator; //Initialize the denominator.\n    while(j <= primeNumberArray.length)if (num % primeNumberArray[j] === 0 && den % primeNumberArray[j] === 0) {\n        comDenom = comDenom * primeNumberArray[j];\n        num = num / primeNumberArray[j];\n        den = den / primeNumberArray[j];\n    } else j++;\n    return $af517d3060c307fe$var$returnStrings(den, num, integer, type);\n}\n//FRACTY RETURNS THE REDUCED FRACTION AS A STRING.\nfunction $af517d3060c307fe$var$returnStrings(den, num, integer, type) {\n    if (den === 1 && num === 1) {\n        integer = `${type}${(parseInt(integer) + 1).toString()}`; //Add 1 to the integer and return a string without a fraction.\n        return `${integer}`;\n    } else if (num === 0) return `${type}${integer}`;\n    else if (integer == \"0\") return `${type}${num}/${den}`;\n    else return `${type}${integer} ${num}/${den}`; //If there's an integer and a fraction return both.\n}\n\n\n/* API gave us: var Fraction = require('fractiona').Fraction;\nObject with Properties: The expression require('fractional').Fraction implies that fractional exports an object which includes Fraction as one of its properties. This is a common pattern in JavaScript modules where a module exports multiple functionalities (such as classes, functions, or constants) grouped within a single object.\nNamed Export Access: By accessing .Fraction immediately after requiring the module, you're using dot notation to access a property of the returned object. This style suggests that fractiona does not use a default export that directly exposes Fraction but rather an object that groups multiple exports, with Fraction being one of them. */ class $86533811ca0ba9c7$var$RecipeView extends (0, $810158a560040d0f$export$2e2bcd8739ae039) {\n    _parentElement = document.querySelector(\".recipe\");\n    //Only the view classes would need access to the parent element, providing unnecessary access could lead to issues in our code.\n    //If any modifications need to be made to the #parentElement, they can be controlled through methods defined within RecipeView.\n    //This ensures that all changes go through a \"gatekeeper\" function, which can manage things like cleaning up event listeners, preventing memory leaks, or ensuring the DOM is in a valid state before and after updates.\n    //The concept of not making the #parentElement \"protected\" in JavaScript arises from a key aspect of the language: JavaScript does not natively support the protected access modifier as seen in other object-oriented languages like Java or C++.\n    _errMessage = \"We could not find that recipe. Please try another one!\";\n    _message = \"\";\n    //Not a private method as this method needs to be part of the public API so that we can call it in the controller. Remember that we want to set these event listeners right when we start out application, which we will do through the init function in our controller.\n    //This is the publisher, and the handler is the subscriber. Meaning that the publisher knows when to react, and the subscriber knows how to react.\n    //This function is called addHandlerRendler because we are passing in the handler function (function that handles the event) and we are adding these event listeners for this handler in this function, which is initialized in init() in the controller\n    //And the functionality of the handler that we are passing in is to load the data and, ultimately, render our data (recipe). We call the function that we pass in our handler because it's our event handler that will be executed whenever the specified event happens in the specified element on the DOM.\n    addHandlerRender(handler) {\n        //If our hash (in the URL, the #...) changes, which means that the user clicked on a new recipe, we want to listen for this event so that we can update our recipe page with the new recipe.\n        // window.addEventListener('hashchange', controlRecipes);\n        //We set this on the window as we are globally listening for a hashchanger or load event\n        //We also need to listen for a load event in case the user loads the link to a recipe in their URL. The hash isn't changing if the user directly types in the link, so we need to also listen for the load event\n        // window.addEventListener('load', controlRecipes);\n        //However, what we did above is using duplicate code. So, instead we could do this to add the event listener to each of the individual events:\n        [\n            \"hashchange\",\n            \"load\"\n        ].forEach((event)=>window.addEventListener(event, handler) //We pass in our subscriber so now we know how to react, and so we connect the logic of both the publisher and subscriber by knowing when the events happen and what to do when these events happen\n        );\n    }\n    addHandlerUpdateServings(handler) {\n        this._parentElement.addEventListener(\"click\", function(e) {\n            const btn = e.target.closest(\".btn--update-servings\"); //both the minus and addition buttons share this class in common. though notice that they have child elements in them, such as the svg child element used to display the image of the + and -\n            //We use this class over btn--tiny because btn--tiny is a class that we use more for styling with btn--update-servings is a class that we created for functionality, which is more appropraite for this case even though we could technically use both.\n            //We want to separate the logic if possible.\n            if (!btn) return; //If we aren't clicking any area where our + and - buttons are found as a parent element, then we aren't clicking anywhere inside of the button and we don't want to proceed\n            //We will again need to use our dataset to dynamically receive our new updated servings value from our DOM by adding that we want to store this value in our dataset in our markup below\n            const updateTo = Number(btn.dataset.updateTo); //Remember that our dataset automatically returns a string, so we have to convert this to a Number so that we could calculate the new quantities in our model when we pass in our updated servings to it\n            //Notice in our HTML, we named our custom 'data-*' attribute 'update-to'. However, when accessing this attribute using the dataset property in JavaScript, we use camelCase in the place of the '-'\n            //In that case, we can even use destructuring to make our code even cleaner:\n            // const { updateTo } = Number(btn.dataset); //This is equivalent to the above as our variable name is the same as the variable name used to access the dataset property.\n            //However, this actually doesn't work in this case because btn.dataset will first be converted to a number and then we would be using that converted number to try to access the .updateTo property of that number, which would result in undefined.\n            //We'd basically be trying to destructure properties from a Number object. We'd be trying to convert the entire dataset object to a number and then access the updateTo property within this number.\n            //Note that we don't want zero or negative servings, as that'd be either pointless or invalid, so we want to add a check here so that we're not going to modify or re-render the page for a negative serving\n            //(basically, we won't call the handler in this case, which would be the controlServings function in our controller in this case)\n            if (updateTo > 0) handler(updateTo);\n        });\n    }\n    addHandlerToggleBookmark(handler) {\n        //Event delegation is necessary here as the bookmark button is not loaded until we load a recipe, but we still need an element to attach our eventListener to which will be our parentElement.\n        //We put this inside of the RecipeView as it's dealing with an element within the same parentElement.\n        this._parentElement.addEventListener(\"click\", function(e) {\n            const btn = e.target.closest(\".btn--bookmark\"); //the user might click on the svg element within the button\n            if (!btn) return; //if there's no .btn--bookmark element as the parent, we didn't click within the button\n            handler();\n        });\n    }\n    //This is private as this markup is going to be unique for our class. By using a function rather than a property, we ensure that our HTML markup reflects the most recently passed in recipe data every time that we render a recipe.\n    //Note that we use 'this._data' to refer to the model.state object as we don't have connection between the view and model. Only from the model to controller and view to controller. We receive the data from the controller when we render the data in our parent View class\n    //and we are able to manipulate the UI using this received data. The '_this' refers to whatever we pass in to the RecipeView as the data; however, it's important to keep this consistent as we will be using the sane generateMarkup function for several different uses in this case.\n    //For example, this markup will be used for bookmarking, updating servings, and just rendering the entire recipe in general so we want to keep the passed in data consistent to keep the references in the template literals consistent.\n    //You don't want prettier to be modifying HTML whitespace in JS code\n    //In HTML and JavaScript templates, especially when using template literals in JavaScript to dynamically generate or modify HTML content, whitespace can sometimes have unintended consequences.\n    //This is particularly true when dealing with attribute values or any syntax-sensitive parts of HTML.\n    //For example, whitespace (including line breaks and spaces) that's introduced into the href attribute's value due to the formatting of the template literal across multiple lines will not be ignored by the HTML parser; instead, it becomes part of the attribute value.\n    //This can lead to the browser interpreting the URL incorrectly, because URLs should not contain unencoded spaces or line breaks.\n    //This issue of whitespace affecting HTML attribute values is primarily a concern when dynamically generating HTML using JavaScript, especially with template literals or when constructing HTML strings.\n    //The same problems generally do not occur in static .html files because template literals include all content inside of them while HTML files generally ignore whitespace around elements or within tags while parsing and attributes in HTML are parsed to ignore whitespace around their values\n    //However, even in static HTML files, unnecessary spaces inside the attribute value within the \"\" may lead to incorrect URLs or broken links.\n    // prettier-ignore\n    _generateMarkup() {\n        //There will be one list element for each ingredient. We will have to loop over the ingredients array and create a list element for each ingredient in the array, and then return a string of our array so that we could print it in our HTML in a formattable way\n        //Recall that join has a default separator of a comma\n        return `<figure class=\"recipe__fig\">\n        <img src=\"${this._data.image}\" alt=\"${this._data.title}\" class=\"recipe__img\" />\n        <h1 class=\"recipe__title\">\n          <span>${this._data.title}</span>\n        </h1>\n      </figure>\n\n      <div class=\"recipe__details\">\n        <div class=\"recipe__info\">\n          <svg class=\"recipe__info-icon\">\n            <use href=\"${0, (/*@__PURE__*/$parcel$interopDefault($bc530c31e28424ba$exports))}#icon-clock\"></use>\n          </svg>\n          <span class=\"recipe__info-data recipe__info-data--minutes\">${this._data.cookingTime}</span>\n          <span class=\"recipe__info-text\">minutes</span>\n        </div>\n        <div class=\"recipe__info\">\n          <svg class=\"recipe__info-icon\">\n            <use href=\"${0, (/*@__PURE__*/$parcel$interopDefault($bc530c31e28424ba$exports))}#icon-users\"></use>\n          </svg>\n          <span class=\"recipe__info-data recipe__info-data--people\">${this._data.servings}</span>\n          <span class=\"recipe__info-text\">servings</span>\n\n          <div class=\"recipe__info-buttons\">\n            <button data-update-to=\"${this._data.servings - 1}\" class=\"btn--tiny btn--update-servings\">\n              <svg>\n                <use href=\"${0, (/*@__PURE__*/$parcel$interopDefault($bc530c31e28424ba$exports))}#icon-minus-circle\"></use>\n              </svg>\n            </button>\n            <button data-update-to=\"${this._data.servings + 1}\" class=\"btn--tiny btn--update-servings\">\n              <svg>\n                <use href=\"${0, (/*@__PURE__*/$parcel$interopDefault($bc530c31e28424ba$exports))}#icon-plus-circle\"></use>\n              </svg>\n            </button>\n          </div>\n        </div>\n\n      <div class=\"recipe__user-generated ${this._data.key ? \"\" : \"hidden\"}\">\n        <svg>\n          <use href=\"${0, (/*@__PURE__*/$parcel$interopDefault($bc530c31e28424ba$exports))}#icon-user\"></use>\n        </svg>\n      </div>\n\n        </div>\n        <button class=\"btn--round btn--bookmark\">\n          <svg class=\"\">\n            <use href=\"${0, (/*@__PURE__*/$parcel$interopDefault($bc530c31e28424ba$exports))}#icon-bookmark${this._data.bookmarked ? \"-fill\" : \"\"}\"></use>\n          </svg>\n        </button>\n      </div>\n\n      <div class=\"recipe__ingredients\">\n        <h2 class=\"heading--2\">Recipe ingredients</h2>\n        <ul class=\"recipe__ingredient-list\">\n        ${this._data.ingredients.map(this._generateMarkupIngredients).join(\"\")}\n      </div>\n\n      <div class=\"recipe__directions\">\n        <h2 class=\"heading--2\">How to cook it</h2>\n        <p class=\"recipe__directions-text\">\n          This recipe was carefully designed and tested by\n          <span class=\"recipe__publisher\">${this._data.publisher}</span>. Please check out\n          directions at their website.\n        </p>\n        <a\n          class=\"btn--small recipe__btn\"\n          href=\"${this._data.sourceUrl}\"\n          target=\"_blank\"\n        >\n          <span>Directions</span>\n          <svg class=\"search__icon\">\n            <use href=\"${0, (/*@__PURE__*/$parcel$interopDefault($bc530c31e28424ba$exports))}#icon-arrow-right\"></use>\n          </svg>\n        </a>\n      </div>`;\n    }\n    _generateMarkupIngredients(el) {\n        return `<li class=\"recipe__ingredient\">\n            <svg class=\"recipe__icon\">\n              <use href=\"${0, (/*@__PURE__*/$parcel$interopDefault($bc530c31e28424ba$exports))}#icon-check\"></use>\n            </svg>\n            <div class=\"recipe__quantity\">${el.quantity ? (0, (/*@__PURE__*/$parcel$interopDefault($af517d3060c307fe$exports)))(el.quantity).toString() : \"\"}</div>\n            <div class=\"recipe__description\">\n              <span class=\"recipe__unit\">${el.unit}</span>\n              ${el.description}\n            </div>\n          </li>`;\n    }\n}\nvar /* Instantiation: new RecipeView() creates a new instance of the RecipeView class.\n  Exporting: By exporting the instance directly, the module ensures that any import of this module gets exactly the same instance. This is the core of the Singleton pattern applied through modules.\n  \n  Single Instance: Anywhere this module is imported, the same instance of RecipeView is reused. This is useful when you need a consistent state across different parts of your application, such as a UI component that manages how a recipe is displayed.\n  \n  No Constructor Needed: As mentioned in the comment, since the instance is created directly in the module file and exported, there is no need to expose a constructor or create multiple instances elsewhere.\n  This can simplify usage and prevent misuse, like inadvertently creating multiple instances where a single shared instance is intended.\n  \n  No Data Passing on Construction: If the RecipeView class does not require any dynamic initialization data, or if it can initialize itself without external inputs, this approach works well.\n  It encapsulates all initialization within the RecipeView itself, potentially fetching its own data or setting up its state independently.\n  \n  The Singleton pattern ensures that a class has only one instance and provides a global point of access to it. */ $86533811ca0ba9c7$export$2e2bcd8739ae039 = new $86533811ca0ba9c7$var$RecipeView();\n\n\n// Class to get the query and to also handle the click event on the button\nclass $71dd548963c9e5e8$var$SearchView {\n    _parentElement = document.querySelector(\".search\");\n    _inputField = this._parentElement.querySelector(\".search__field\");\n    //We don't make this private as our controller needs access to this function\n    getQuery() {\n        //First get the query\n        const query = this._inputField.value; //we need to have the 'this' keyword, because the only time we can run this function is by accessing it through an instance of the class object, which the 'this' would be referring to\n        //Clear the input field\n        this._clearInputField();\n        //Return the query\n        return query;\n    }\n    //We can make this private because we won't be trying to access it outside of just this class. We're calling addHandlerSearch from our controller, and private properties/methods can only be accessed within the same class where they are defined.\n    //They cannot be accessed directly from outside the class, including from instances of the class.\n    _clearInputField() {\n        this._inputField.value = \"\";\n    }\n    addHandlerSearch(handler) {\n        //We set the event listeners on the parent element rather than just the button as we also want to listen in case the user presses the 'enter' on their keyboard.\n        //So, we want to listen for a submit event in the context of the entire search element (the text box and the button)\n        this._parentElement.addEventListener(\"submit\", function(e) {\n            //we cannot pass in the handler immediately as when we submit a form (which you can see the search element is in the HTML), there is a default action of reloading the page. So, we need to prevent this default action.\n            //This is the function that the callback function will call when the submit event is 'heard' on the search element.\n            //If we didn't prevent the default behavior, the page would reload and our controlSearchResults function (the handler) would be trying to get the data.\n            //Whether it succeeds in time before the page reloads or not is irrelevant as the reload will clear out either this action or the returned data\n            e.preventDefault();\n            handler();\n        //We don't want to call clearInputField() in here as the 'this' keyword would now be referring the DOM element to which the event listener is attached (#parentElement), which would not have access to the method\n        //We also just don't need to clearInputField() here, as we already do so inside of our getQuery() function, which is called inside of our handler.\n        });\n    }\n}\nvar $71dd548963c9e5e8$export$2e2bcd8739ae039 = new $71dd548963c9e5e8$var$SearchView();\n\n\n\n\n\n//Since we inherited methods from the parent class, we want to make sure that we name the variables being used within the inherited methods the same.\n//We are using this to build our preview element, so we don't need the message variables\nclass $d4ae917f67aa029f$var$PreviewView extends (0, $810158a560040d0f$export$2e2bcd8739ae039) {\n    _parentElement = \"\";\n    //Note that we aren't using map(), so this will only generate the markup for one preview element. We'll be calling the map() method inside of the views that are going to use this method.\n    _generateMarkup() {\n        const id = window.location.hash.slice(-1); //We take everything but the first element as it starts with '#'\n        return `<li class=\"preview\">\n        <a class=\"preview__link ${this._data.id === id ? \"preview__link--active\" : \"\"}\" href=\"#${this._data.id}\">\n          <figure class=\"preview__fig\">\n            <img src=\"${this._data.image}\" alt=${this._data.title} />\n          </figure>\n          <div class=\"preview__data\">\n            <h4 class=\"preview__title\">${this._data.title}</h4>\n            <p class=\"preview__publisher\">${this._data.publisher}</p>\n\n          <div class=\"preview__user-generated ${this._data.key ? \"\" : \"hidden\"}\">\n          <svg>\n            <use href=\"${0, (/*@__PURE__*/$parcel$interopDefault($bc530c31e28424ba$exports))}#icon-user\"></use>\n          </svg>\n        </div>\n        </div>\n        </a>\n      </li>`;\n    }\n}\nvar $d4ae917f67aa029f$export$2e2bcd8739ae039 //We do want to instantiate this child class as we want to directly call its methods rather than having anything inherit these methods from it\n = new $d4ae917f67aa029f$var$PreviewView();\n\n\n//Since we inherited methods from the parent class, we want to make sure that we name the variables being used within the inherited methods the same\nclass $724bbc6447737f8b$var$ResultsView extends (0, $810158a560040d0f$export$2e2bcd8739ae039) {\n    //The parent element depends on where you want to add new results.\n    //That <ul class=\"results\"> element is the closest parent that contains all results. Later in the course, we'll implement results as <li> elements, which needs to be contained in either <ul> or <ol> elements, which fits the .results parent class\n    _parentElement = document.querySelector(\".results\");\n    _errMessage = \"No recipes found for your query! Please try again\";\n    _message = \"\";\n    // _generateMarkup() {\n    //   //We want to add the 'preview__link--active' CSS class to the recipe that we select to visually show that this recipe is currently selected\n    //   //So, we do this by checking to see if result.id is the same as the current ID in our URL, which would be our hash (window.location.hash), and if they are the same then we want to add the CSS class to the markup for that recipe.\n    //   //Next, we need to update the resultsView by re-rendering only this changed attribute in our controller. We could re-render the page; however, that would be inefficient and we can use our update function in our View parent class to achieve this\n    //   const id = window.location.hash.slice(-1); //We take everything but the first element as it starts with '#'\n    //   //this._data is an array of objects containing our results as it's our model.state.search.results. So, we want to loop through our array and return a string for each of the elements\n    //   //When you use the # symbol in an href attribute of an <a> tag in HTML, the browser understands it as a directive to navigate to an anchor point within the current document with the given id\n    //   return this._data.map(result => {\n    //     return `<li class=\"preview\">\n    //       <a class=\"preview__link ${\n    //         result.id === id ? 'preview__link--active' : ''\n    //       }\" href=\"#${result.id}\">\n    //         <figure class=\"preview__fig\">\n    //           <img src=\"${result.image}\" alt=${result.title} />\n    //         </figure>\n    //         <div class=\"preview__data\">\n    //           <h4 class=\"preview__title\">${result.title}</h4>\n    //           <p class=\"preview__publisher\">${result.publisher}</p>\n    //         </div>\n    //       </a>\n    //     </li>`;\n    //   });\n    // }\n    _generateMarkup() {\n        return this._data.map((result)=>(0, $d4ae917f67aa029f$export$2e2bcd8739ae039).render(result, false)).join(\"\"); //the render() method in our View parent class will generate the markup using the function in our PreviewView class, and from this parent class we will add each result to our container (parentElement)\n    }\n}\nvar $724bbc6447737f8b$export$2e2bcd8739ae039 = new $724bbc6447737f8b$var$ResultsView();\n\n\n\n\nclass $d3dd33aaa1958054$var$PaginationView extends (0, $810158a560040d0f$export$2e2bcd8739ae039) {\n    _parentElement = document.querySelector(\".pagination\");\n    //The markup that we create is based on the page that we're on\n    //Note that because of our render method in our View class, we have access to what we passed in to the render function from our controller using the instance of this object as this._data ('this' referring to the instance of this class that called this method, which would be PaginationView)\n    //Recall: PaginationView.render(model.state.search). And since we are following a Singleton pattern, all instances of this class would be referring to the same instance object. This is true for all other View classes, excluding the parent since we didn't instantiate it.\n    //All view classes have one object instantiated for them appropriately.\n    _generateMarkup() {\n        const resultsLength = this._data.results.length;\n        const resultsPerPage = this._data.resultsPerPage;\n        //In order to know where we stand in terms of the pages, we must know how many pages there are in the first place.\n        const numPages = Math.ceil(resultsLength / resultsPerPage); //We may get a decimal, so we want to round this to the highest integer. Not all pages need to be filled with the entire 10 elements.\n        const currPage = this._data.page;\n        const prevButton = `<button data-goto=\"${currPage - 1}\"button class=\"btn--inline pagination__btn--prev\">\n            <svg class=\"search__icon\">\n                <use href=\"${(0, (/*@__PURE__*/$parcel$interopDefault($bc530c31e28424ba$exports)))}#icon-arrow-left\"></use>\n            </svg>\n         <span>Page ${currPage - 1}</span>               \n        </button>`;\n        const nextButton = `\n    <button data-goto=\"${currPage + 1}\"class=\"btn--inline pagination__btn--next\">\n      <span>Page ${currPage + 1}</span>\n      <svg class=\"search__icon\">\n        <use href=\"${(0, (/*@__PURE__*/$parcel$interopDefault($bc530c31e28424ba$exports)))}#icon-arrow-right\"></use>\n      </svg>\n    </button>`;\n        //1. If we're on the first page, we don't want to have a back button. Since we'll also be on the first page in the case that there are less than 10 results, we need to consider this as well.\n        if (currPage === 1 && numPages > 1) return nextButton;\n        //2. If there are less or equal results than results per page then we don't want to have a next button as we only need one page\n        //3. Also, if we're on the last page, then we don't want to have a next button either\n        if (resultsLength <= resultsPerPage || currPage === numPages) return prevButton;\n        //4. If we're on a middle page, we want both buttons\n        return `${prevButton}${nextButton}`; //Note that in HTML, spacing and tabs (whitespace characters) do not affect the way the content is rendered in a browser.\n    //Whitespace inside HTML tags (between attributes, for example) is not sensitive. You can use spaces or tabs to improve readability without affecting how the tag is processed\n    //The main exceptions to this rule in HTML are elements like <pre> and CSS properties that control the rendering of whitespace, which would be specifically designed to alter how whitespace is handled.\n    }\n    //We're going to use event delegation because there will be two buttons, but we don't want to listen to each of them individually when we could use event delegation instead\n    addHandlerClick(handler) {\n        //Add event listener to parent element\n        this._parentElement.addEventListener(\"click\", function(e) {\n            //We do not immediately call the handler because we need to figure out which button was actually clicked\n            //So, first we create a btn element to store the closest button element to the clicked target if we click within the button element\n            //This is important as we could accidentally click on the span, svg, or use elements within the button element but we want it to register as clicking on the actual button itself.\n            //The button element has child elements, and even if we click on the child elements we want it to register as the button element (the parent element that we're selecting)\n            //Recall that the closest method is similar to querySelector but instead of searching down the tree for children, it searches up the tree for parents\n            const btn = e.target.closest(\".btn--inline\"); //Notice that the next and prev buttons share this common class.\n            //We select the button so that we know if we need to move forward or back a page. We need to establish a connection between the DOM and our code. We can achieve this using custom data attributes.\n            //So we will create custom data attributes for each of the buttons which will contain the page that we want to go to\n            //Using that, we can read that data and go to that exact page\n            if (!btn) return;\n            //So, inside of our HTML, before establishing our class we add: data-goto=\"${currPage+1}\". Now, we can actually know what page to go to from the button by reading this property.\n            //The use of data-* attributes in HTML is a handy way to store extra data on standard HTML elements, and it's perfectly suited for the kind of dynamic, client-side functionality that we need.\n            //We are setting a data-goto attribute to indicate which page a button should navigate to when clicked. This is a great approach for implementing pagination or any kind of stepwise navigation on a web page.\n            const goToPage = Number(btn.dataset.goto); //Note that this datasets return a string, so we will have to convert this to a number.\n            //However, note that since we set this eventListener on the parent element that the dataset will try to be accessed even if we click outside of the 'button' element, and we won't be able to find any '.btn--inline' parent elements.\n            //So, we will have to account for that using the if statement above (guard clause)\n            //Now that we have the number of the page, we can pass that number back to the controller by passing it into the handler when we call the handler\n            //From the controller, we can pass that number into our getSearchResultsPage() function, which will load the searchResults for the passed in page\n            handler(goToPage);\n        });\n    }\n}\nvar $d3dd33aaa1958054$export$2e2bcd8739ae039 = new $d3dd33aaa1958054$var$PaginationView();\n\n\n\n\n//Since we inherited methods from the parent class, we want to make sure that we name the variables being used within the inherited methods the same\nclass $04d9757374bd75ac$var$BookmarksView extends (0, $810158a560040d0f$export$2e2bcd8739ae039) {\n    //Our bookmark previews are <li> elements, which needs to be contained in either <ul> or <ol> elements, which fits the .bookmarks__list parent class\n    _parentElement = document.querySelector(\".bookmarks__list\");\n    _errMessage = \"No bookmarks yet! Find a nice recipe and bookmark it :)\";\n    //If the user had previously added bookmarks, overriding our default HTML message, and then removed all bookmarks, this would show as we'd be passing in an empty array to our render() method (which we call when adding/removing bookmarks)\n    //When the user either click adds/removes a bookmark, this would call the render() function and we would be trying try to access the passed in bookmarks array, which would be empty (in this case) prompting the error message.\n    //Note that we only call update() when adding/removing the --active class attribute to the bookmarks (and search results, and updating the servings. but nothing that should trigger an error message)\n    _message = \"\";\n    //However, we don't actually want PreviewView to render the markup as we want our BookmarksView or ResultsView class to ultimately do that inside of their appropraite containers.\n    //We only want PreviewView to generate the individual markup for each element that we pass into it. So, we are going to resolve this by having a check in our render function.\n    //We'll add a parameter called render which, by default, will be set to true. However, if PreviewView calls this render method, then render will be set to false.\n    //When render is set to false, we will simply return the markup for the passed in element.\n    //But why not call generateMarkup directly rather than PreviewView.render(element, false)?\n    //We still need to set this._data in our render method to the data that's passed in (our bookmark that we want to add as a child to our parentElement in this case)\n    //This is so that in PreviewView, we are able to actually generate the markup by accessing the properties inside of the bookmark (or any object) that we pass into the render method.\n    //Now, BookmarksView and ResultsView are essentially the same in terms of functionality in generating their markups and so we encapsulated that logic within a child class.\n    //We kept what differentiated them, however, by maintaining different messages and a different parentElement (container).\n    _generateMarkup() {\n        return this._data.map((bookmark)=>(0, $d4ae917f67aa029f$export$2e2bcd8739ae039).render(bookmark, false)).join(\"\"); //the render() method in our View parent class will generate the markup using the function in our PreviewView class, and from this parent class we will add each bookmark to our container (parentElement)\n    }\n    addHandlerRender(handler) {\n        window.addEventListener(\"load\", handler);\n    }\n}\nvar $04d9757374bd75ac$export$2e2bcd8739ae039 = new $04d9757374bd75ac$var$BookmarksView();\n\n\n\n//We actually already have the view that we want to display in our HTML. And so showing this window will be as simple as toggling the hidden class from the window and overlay\nclass $3a3bed218b3ac980$var$AddRecipeView extends (0, $810158a560040d0f$export$2e2bcd8739ae039) {\n    _parentElement = document.querySelector(\".upload\");\n    //However, we'll still need to be able to select our window and overlay, so we'll manually select those.\n    _window = document.querySelector(\".add-recipe-window\");\n    _overlay = document.querySelector(\".overlay\");\n    //Now we'll need to select the button that will be clicked to open the window as well as the button that will be clicked to close the window.\n    _btnOpen = document.querySelector(\".nav__btn--add-recipe\");\n    _btnClose = document.querySelector(\".btn--close-modal\");\n    _message = \"Recipe was successfully uploaded!\";\n    //Since this is a child class of View, we need to inherit its properties using the super() keyword\n    constructor(){\n        super();\n        this._addHandlerShowWindow(); //So, we'll run these functions as soon as this class is instantiated to attach our event listeners\n        this._addHandlerHideWindow();\n    //We don't need addHandlerUpload in our constructor as this will be invoked in our constructor. Having it in our constructor could cause a problem as when it's called from the constructor, we're not passing in any function as an argument so handler will be undefined causing an error\n    }\n    //This will be a public method as we'll want to be able to call this from the controller because we'll want to hide the window and overlay once we're finished uploading a recipe.\n    toggleWindow() {\n        this._overlay.classList.toggle(\"hidden\");\n        this._window.classList.toggle(\"hidden\");\n    }\n    //Now we need to listen for events of opening and closing our form. This function has nothing to do with the controller, there is no information that we need from the controller in regards to what should happen when the event happens.\n    //All we're doing is hiding or displaying the form through modifying the 'hidden' class. So, we can run this function as soon as our AddRecipeView class is instantiated using a constructor and we can also make this method protected as it's only going to be used\n    //within this class. Note, however, that the controller will still need to import this class as then our controller will not invoke the instantiation of this class (will not create this object)\n    _addHandlerShowWindow() {\n        this._btnOpen.addEventListener(\"click\", this.toggleWindow.bind(this)); //when we click the button, we want to toggle the hidden class from both the overlay and from the window.\n    //We create a separate function for this so that we can use the appropriate 'this' keyword inside of the function that we call in the eventListener by manually binding it to the appropriate 'this' keyword, which would be our current instance of AddRecipeView that's invoking this method\n    //Because, otherwise, the 'this' keyword would be pointing to the element that the eventListener is attached to, which would be the btn selected in this instance of AddRecipeView (this._btnOpen) in this case\n    }\n    _addHandlerHideWindow() {\n        //We want to be able to close the form by either clicking the 'x' button or by clicking the overlay\n        //The _toggleWindow() method modifies properties (_window, _overlay) of the AddRecipeView instance.\n        //If you do not bind this to _toggleWindow(), when the event triggers the method, it won't recognize _window and _overlay as properties of the button or the overlay, because this will refer to the HTML elements (like .btn--close-modal or .overlay) rather than the AddRecipeView instance\n        this._btnClose.addEventListener(\"click\", this.toggleWindow.bind(this)); //We don't want the 'this' keyword to refer to the _btnClose or _overlay element, but we want it to refer to our current instance of AddRecipeView that's invoking this method\n        this._overlay.addEventListener(\"click\", this.toggleWindow.bind(this));\n    }\n    //When clicking the upload button, we want to get all of the data out of the form and 'submit' it. We create a new function to handle form submission.\n    addHandlerUpload(handler) {\n        //We want to add an event listener to the upload form itself\n        this._parentElement.addEventListener(\"submit\", function(e) {\n            e.preventDefault(); //A button that is created like this <button></button> will submit a form by default when the button is inside of a form. This is what refreshes the page, and this is the default behavior that we want to prevent\n            //Now, how do we access all of the values in our form? We can use something called formData, which is a modern browser API\n            const dataArr = [\n                ...new FormData(this)\n            ]; //Inside of the constructor, we have to pass in an element that's the form. In this case, that would be our parent element, which would be our 'this' keyword since we're inside of our eventListener function.\n            //Remember, the 'this' keyword in this context refers to the element that triggered the event.\n            //The FormData object is an interface that allows you to easily construct a set of key/value pairs representing form fields and their values,\n            //The spread operator (...) is used here to expand the entries in the FormData object into an array. Each entry in the FormData object is a key/value pair, so this spreads the entries of the FormData object into an array of [key, value] pairs.\n            //The spread syntax (...) can be used to convert some kinds of objects into arrays, but it depends on the object having iterable properties.\n            //The spread syntax is versatile for working with iterable collections in JavaScript, but when dealing with non-iterable objects like plain object literals, you'll need to use methods like Object.keys(), Object.values(), or Object.entries() to first convert these objects into an array format.\n            //when you use the spread syntax with a FormData object in JavaScript, the result is a 2D array where each element of the array is itself a 1D array containing two elements: the key and the corresponding value from the form.\n            //Each key-value pair represents one form control (like an input or select field).\n            //Using the spread syntax on a FormData object, [...formData], takes each entry from the FormData object and places it into a new array.\n            //Each entry itself is an array containing two elements: the name of the form control as the first element (key), and its value as the second element.\n            //Before being converted into an array, FormData is an object that encapsulates the data from a form as a series of key-value pairs, but these pairs are not directly accessible like those in a regular JavaScript object or array.\n            //FormData is designed to handle and transmit form data in web applications, particularly for AJAX requests, and it has a specific internal structure that supports both simple text fields and file uploads.\n            //FormData does implement the iterable protocol, specifically providing entries as [key, value] pairs, which makes it compatible with iteration methods designed for iterables even though you cannot iterate over it directly using typical object iteration methods like for...in loops\n            //FormData objects are iterable in the sense that they can be used with constructs and methods that expect iterable values.\n            //This iterability is specifically implemented through FormData's entries, which are accessible using the entries() method. By default, when you use FormData with the spread syntax (...), JavaScript uses this entries() iterator.\n            //What's going on: The spread syntax implicitly calls the entries() iterator of the FormData object. Each iteration produced by entries() returns a [key, value] pair, much like iterating over a Map object. These [key, value] pairs are then placed into a new array.\n            //This returned data is what we want to use to upload our new personal recipe to the API. And the action of uploading the data will be another API call, which happens in the model. So, we need a way of moving this data over to the model.\n            //We will do this by creating a controller function called controlAddRecipe which will be the handler for this event (Publisher Subscriber pattern) and by passing the data into our handler function.\n            //Once we're able to get the data into our controller, we'll also be able to easily get it into our model as the controller is the medium\n            //Note that usually our recipe data is an object rather than an array of entries like this and there's actually a method that we can use to convert entries into a regular JavaScript object, which is what we want.\n            const data = Object.fromEntries(dataArr);\n            //However, this object is going to be a bit different. It's okay if it's missing some properties as long as we don't add properties that our API isn't expecting.\n            //What's most important is that we need to match the format of the values for each appropriate proeprty so we're going to have to take care of that in that our model\n            handler(data);\n        });\n    }\n    _generateMarkup() {}\n}\nvar $3a3bed218b3ac980$export$2e2bcd8739ae039 = new $3a3bed218b3ac980$var$AddRecipeView();\n\n\nvar $7238a34a955809b2$exports = {};\n/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */ var $7238a34a955809b2$var$runtime = function(exports) {\n    \"use strict\";\n    var Op = Object.prototype;\n    var hasOwn = Op.hasOwnProperty;\n    var defineProperty = Object.defineProperty || function(obj, key, desc) {\n        obj[key] = desc.value;\n    };\n    var undefined; // More compressible than void 0.\n    var $Symbol = typeof Symbol === \"function\" ? Symbol : {};\n    var iteratorSymbol = $Symbol.iterator || \"@@iterator\";\n    var asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\";\n    var toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n    function define(obj, key, value) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n        return obj[key];\n    }\n    try {\n        // IE 8 has a broken Object.defineProperty that only works on DOM objects.\n        define({}, \"\");\n    } catch (err) {\n        define = function(obj, key, value) {\n            return obj[key] = value;\n        };\n    }\n    function wrap(innerFn, outerFn, self, tryLocsList) {\n        // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n        var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n        var generator = Object.create(protoGenerator.prototype);\n        var context = new Context(tryLocsList || []);\n        // The ._invoke method unifies the implementations of the .next,\n        // .throw, and .return methods.\n        defineProperty(generator, \"_invoke\", {\n            value: makeInvokeMethod(innerFn, self, context)\n        });\n        return generator;\n    }\n    exports.wrap = wrap;\n    // Try/catch helper to minimize deoptimizations. Returns a completion\n    // record like context.tryEntries[i].completion. This interface could\n    // have been (and was previously) designed to take a closure to be\n    // invoked without arguments, but in all the cases we care about we\n    // already have an existing method we want to call, so there's no need\n    // to create a new function object. We can even get away with assuming\n    // the method takes exactly one argument, since that happens to be true\n    // in every case, so we don't have to touch the arguments object. The\n    // only additional allocation required is the completion record, which\n    // has a stable shape and so hopefully should be cheap to allocate.\n    function tryCatch(fn, obj, arg) {\n        try {\n            return {\n                type: \"normal\",\n                arg: fn.call(obj, arg)\n            };\n        } catch (err) {\n            return {\n                type: \"throw\",\n                arg: err\n            };\n        }\n    }\n    var GenStateSuspendedStart = \"suspendedStart\";\n    var GenStateSuspendedYield = \"suspendedYield\";\n    var GenStateExecuting = \"executing\";\n    var GenStateCompleted = \"completed\";\n    // Returning this object from the innerFn has the same effect as\n    // breaking out of the dispatch switch statement.\n    var ContinueSentinel = {};\n    // Dummy constructor functions that we use as the .constructor and\n    // .constructor.prototype properties for functions that return Generator\n    // objects. For full spec compliance, you may wish to configure your\n    // minifier not to mangle the names of these two functions.\n    function Generator() {}\n    function GeneratorFunction() {}\n    function GeneratorFunctionPrototype() {}\n    // This is a polyfill for %IteratorPrototype% for environments that\n    // don't natively support it.\n    var IteratorPrototype = {};\n    define(IteratorPrototype, iteratorSymbol, function() {\n        return this;\n    });\n    var getProto = Object.getPrototypeOf;\n    var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n    if (NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) // This environment has a native %IteratorPrototype%; use it instead\n    // of the polyfill.\n    IteratorPrototype = NativeIteratorPrototype;\n    var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);\n    GeneratorFunction.prototype = GeneratorFunctionPrototype;\n    defineProperty(Gp, \"constructor\", {\n        value: GeneratorFunctionPrototype,\n        configurable: true\n    });\n    defineProperty(GeneratorFunctionPrototype, \"constructor\", {\n        value: GeneratorFunction,\n        configurable: true\n    });\n    GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, \"GeneratorFunction\");\n    // Helper for defining the .next, .throw, and .return methods of the\n    // Iterator interface in terms of a single ._invoke method.\n    function defineIteratorMethods(prototype) {\n        [\n            \"next\",\n            \"throw\",\n            \"return\"\n        ].forEach(function(method) {\n            define(prototype, method, function(arg) {\n                return this._invoke(method, arg);\n            });\n        });\n    }\n    exports.isGeneratorFunction = function(genFun) {\n        var ctor = typeof genFun === \"function\" && genFun.constructor;\n        return ctor ? ctor === GeneratorFunction || // For the native GeneratorFunction constructor, the best we can\n        // do is to check its .name property.\n        (ctor.displayName || ctor.name) === \"GeneratorFunction\" : false;\n    };\n    exports.mark = function(genFun) {\n        if (Object.setPrototypeOf) Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n        else {\n            genFun.__proto__ = GeneratorFunctionPrototype;\n            define(genFun, toStringTagSymbol, \"GeneratorFunction\");\n        }\n        genFun.prototype = Object.create(Gp);\n        return genFun;\n    };\n    // Within the body of any async function, `await x` is transformed to\n    // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n    // `hasOwn.call(value, \"__await\")` to determine if the yielded value is\n    // meant to be awaited.\n    exports.awrap = function(arg) {\n        return {\n            __await: arg\n        };\n    };\n    function AsyncIterator(generator, PromiseImpl) {\n        function invoke(method, arg, resolve, reject) {\n            var record = tryCatch(generator[method], generator, arg);\n            if (record.type === \"throw\") reject(record.arg);\n            else {\n                var result = record.arg;\n                var value = result.value;\n                if (value && typeof value === \"object\" && hasOwn.call(value, \"__await\")) return PromiseImpl.resolve(value.__await).then(function(value) {\n                    invoke(\"next\", value, resolve, reject);\n                }, function(err) {\n                    invoke(\"throw\", err, resolve, reject);\n                });\n                return PromiseImpl.resolve(value).then(function(unwrapped) {\n                    // When a yielded Promise is resolved, its final value becomes\n                    // the .value of the Promise<{value,done}> result for the\n                    // current iteration.\n                    result.value = unwrapped;\n                    resolve(result);\n                }, function(error) {\n                    // If a rejected Promise was yielded, throw the rejection back\n                    // into the async generator function so it can be handled there.\n                    return invoke(\"throw\", error, resolve, reject);\n                });\n            }\n        }\n        var previousPromise;\n        function enqueue(method, arg) {\n            function callInvokeWithMethodAndArg() {\n                return new PromiseImpl(function(resolve, reject) {\n                    invoke(method, arg, resolve, reject);\n                });\n            }\n            return previousPromise = // If enqueue has been called before, then we want to wait until\n            // all previous Promises have been resolved before calling invoke,\n            // so that results are always delivered in the correct order. If\n            // enqueue has not been called before, then it is important to\n            // call invoke immediately, without waiting on a callback to fire,\n            // so that the async generator function has the opportunity to do\n            // any necessary setup in a predictable way. This predictability\n            // is why the Promise constructor synchronously invokes its\n            // executor callback, and why async functions synchronously\n            // execute code before the first await. Since we implement simple\n            // async functions in terms of async generators, it is especially\n            // important to get this right, even though it requires care.\n            previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, // Avoid propagating failures to Promises returned by later\n            // invocations of the iterator.\n            callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();\n        }\n        // Define the unified helper method that is used to implement .next,\n        // .throw, and .return (see defineIteratorMethods).\n        defineProperty(this, \"_invoke\", {\n            value: enqueue\n        });\n    }\n    defineIteratorMethods(AsyncIterator.prototype);\n    define(AsyncIterator.prototype, asyncIteratorSymbol, function() {\n        return this;\n    });\n    exports.AsyncIterator = AsyncIterator;\n    // Note that simple async functions are implemented on top of\n    // AsyncIterator objects; they just return a Promise for the value of\n    // the final result produced by the iterator.\n    exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {\n        if (PromiseImpl === void 0) PromiseImpl = Promise;\n        var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl);\n        return exports.isGeneratorFunction(outerFn) ? iter // If outerFn is a generator, return the full iterator.\n         : iter.next().then(function(result) {\n            return result.done ? result.value : iter.next();\n        });\n    };\n    function makeInvokeMethod(innerFn, self, context) {\n        var state = GenStateSuspendedStart;\n        return function invoke(method, arg) {\n            if (state === GenStateExecuting) throw new Error(\"Generator is already running\");\n            if (state === GenStateCompleted) {\n                if (method === \"throw\") throw arg;\n                // Be forgiving, per GeneratorResume behavior specified since ES2015:\n                // ES2015 spec, step 3: https://262.ecma-international.org/6.0/#sec-generatorresume\n                // Latest spec, step 2: https://tc39.es/ecma262/#sec-generatorresume\n                return doneResult();\n            }\n            context.method = method;\n            context.arg = arg;\n            while(true){\n                var delegate = context.delegate;\n                if (delegate) {\n                    var delegateResult = maybeInvokeDelegate(delegate, context);\n                    if (delegateResult) {\n                        if (delegateResult === ContinueSentinel) continue;\n                        return delegateResult;\n                    }\n                }\n                if (context.method === \"next\") // Setting context._sent for legacy support of Babel's\n                // function.sent implementation.\n                context.sent = context._sent = context.arg;\n                else if (context.method === \"throw\") {\n                    if (state === GenStateSuspendedStart) {\n                        state = GenStateCompleted;\n                        throw context.arg;\n                    }\n                    context.dispatchException(context.arg);\n                } else if (context.method === \"return\") context.abrupt(\"return\", context.arg);\n                state = GenStateExecuting;\n                var record = tryCatch(innerFn, self, context);\n                if (record.type === \"normal\") {\n                    // If an exception is thrown from innerFn, we leave state ===\n                    // GenStateExecuting and loop back for another invocation.\n                    state = context.done ? GenStateCompleted : GenStateSuspendedYield;\n                    if (record.arg === ContinueSentinel) continue;\n                    return {\n                        value: record.arg,\n                        done: context.done\n                    };\n                } else if (record.type === \"throw\") {\n                    state = GenStateCompleted;\n                    // Dispatch the exception by looping back around to the\n                    // context.dispatchException(context.arg) call above.\n                    context.method = \"throw\";\n                    context.arg = record.arg;\n                }\n            }\n        };\n    }\n    // Call delegate.iterator[context.method](context.arg) and handle the\n    // result, either by returning a { value, done } result from the\n    // delegate iterator, or by modifying context.method and context.arg,\n    // setting context.delegate to null, and returning the ContinueSentinel.\n    function maybeInvokeDelegate(delegate, context) {\n        var methodName = context.method;\n        var method = delegate.iterator[methodName];\n        if (method === undefined) {\n            // A .throw or .return when the delegate iterator has no .throw\n            // method, or a missing .next method, always terminate the\n            // yield* loop.\n            context.delegate = null;\n            // Note: [\"return\"] must be used for ES3 parsing compatibility.\n            if (methodName === \"throw\" && delegate.iterator[\"return\"]) {\n                // If the delegate iterator has a return method, give it a\n                // chance to clean up.\n                context.method = \"return\";\n                context.arg = undefined;\n                maybeInvokeDelegate(delegate, context);\n                if (context.method === \"throw\") // If maybeInvokeDelegate(context) changed context.method from\n                // \"return\" to \"throw\", let that override the TypeError below.\n                return ContinueSentinel;\n            }\n            if (methodName !== \"return\") {\n                context.method = \"throw\";\n                context.arg = new TypeError(\"The iterator does not provide a '\" + methodName + \"' method\");\n            }\n            return ContinueSentinel;\n        }\n        var record = tryCatch(method, delegate.iterator, context.arg);\n        if (record.type === \"throw\") {\n            context.method = \"throw\";\n            context.arg = record.arg;\n            context.delegate = null;\n            return ContinueSentinel;\n        }\n        var info = record.arg;\n        if (!info) {\n            context.method = \"throw\";\n            context.arg = new TypeError(\"iterator result is not an object\");\n            context.delegate = null;\n            return ContinueSentinel;\n        }\n        if (info.done) {\n            // Assign the result of the finished delegate to the temporary\n            // variable specified by delegate.resultName (see delegateYield).\n            context[delegate.resultName] = info.value;\n            // Resume execution at the desired location (see delegateYield).\n            context.next = delegate.nextLoc;\n            // If context.method was \"throw\" but the delegate handled the\n            // exception, let the outer generator proceed normally. If\n            // context.method was \"next\", forget context.arg since it has been\n            // \"consumed\" by the delegate iterator. If context.method was\n            // \"return\", allow the original .return call to continue in the\n            // outer generator.\n            if (context.method !== \"return\") {\n                context.method = \"next\";\n                context.arg = undefined;\n            }\n        } else // Re-yield the result returned by the delegate method.\n        return info;\n        // The delegate iterator is finished, so forget it and continue with\n        // the outer generator.\n        context.delegate = null;\n        return ContinueSentinel;\n    }\n    // Define Generator.prototype.{next,throw,return} in terms of the\n    // unified ._invoke helper method.\n    defineIteratorMethods(Gp);\n    define(Gp, toStringTagSymbol, \"Generator\");\n    // A Generator should always return itself as the iterator object when the\n    // @@iterator function is called on it. Some browsers' implementations of the\n    // iterator prototype chain incorrectly implement this, causing the Generator\n    // object to not be returned from this call. This ensures that doesn't happen.\n    // See https://github.com/facebook/regenerator/issues/274 for more details.\n    define(Gp, iteratorSymbol, function() {\n        return this;\n    });\n    define(Gp, \"toString\", function() {\n        return \"[object Generator]\";\n    });\n    function pushTryEntry(locs) {\n        var entry = {\n            tryLoc: locs[0]\n        };\n        if (1 in locs) entry.catchLoc = locs[1];\n        if (2 in locs) {\n            entry.finallyLoc = locs[2];\n            entry.afterLoc = locs[3];\n        }\n        this.tryEntries.push(entry);\n    }\n    function resetTryEntry(entry) {\n        var record = entry.completion || {};\n        record.type = \"normal\";\n        delete record.arg;\n        entry.completion = record;\n    }\n    function Context(tryLocsList) {\n        // The root entry object (effectively a try statement without a catch\n        // or a finally block) gives us a place to store values thrown from\n        // locations where there is no enclosing try statement.\n        this.tryEntries = [\n            {\n                tryLoc: \"root\"\n            }\n        ];\n        tryLocsList.forEach(pushTryEntry, this);\n        this.reset(true);\n    }\n    exports.keys = function(val) {\n        var object = Object(val);\n        var keys = [];\n        for(var key in object)keys.push(key);\n        keys.reverse();\n        // Rather than returning an object with a next method, we keep\n        // things simple and return the next function itself.\n        return function next() {\n            while(keys.length){\n                var key = keys.pop();\n                if (key in object) {\n                    next.value = key;\n                    next.done = false;\n                    return next;\n                }\n            }\n            // To avoid creating an additional object, we just hang the .value\n            // and .done properties off the next function object itself. This\n            // also ensures that the minifier will not anonymize the function.\n            next.done = true;\n            return next;\n        };\n    };\n    function values(iterable) {\n        if (iterable != null) {\n            var iteratorMethod = iterable[iteratorSymbol];\n            if (iteratorMethod) return iteratorMethod.call(iterable);\n            if (typeof iterable.next === \"function\") return iterable;\n            if (!isNaN(iterable.length)) {\n                var i = -1, next = function next() {\n                    while(++i < iterable.length)if (hasOwn.call(iterable, i)) {\n                        next.value = iterable[i];\n                        next.done = false;\n                        return next;\n                    }\n                    next.value = undefined;\n                    next.done = true;\n                    return next;\n                };\n                return next.next = next;\n            }\n        }\n        throw new TypeError(typeof iterable + \" is not iterable\");\n    }\n    exports.values = values;\n    function doneResult() {\n        return {\n            value: undefined,\n            done: true\n        };\n    }\n    Context.prototype = {\n        constructor: Context,\n        reset: function(skipTempReset) {\n            this.prev = 0;\n            this.next = 0;\n            // Resetting context._sent for legacy support of Babel's\n            // function.sent implementation.\n            this.sent = this._sent = undefined;\n            this.done = false;\n            this.delegate = null;\n            this.method = \"next\";\n            this.arg = undefined;\n            this.tryEntries.forEach(resetTryEntry);\n            if (!skipTempReset) {\n                for(var name in this)// Not sure about the optimal order of these conditions:\n                if (name.charAt(0) === \"t\" && hasOwn.call(this, name) && !isNaN(+name.slice(1))) this[name] = undefined;\n            }\n        },\n        stop: function() {\n            this.done = true;\n            var rootEntry = this.tryEntries[0];\n            var rootRecord = rootEntry.completion;\n            if (rootRecord.type === \"throw\") throw rootRecord.arg;\n            return this.rval;\n        },\n        dispatchException: function(exception) {\n            if (this.done) throw exception;\n            var context = this;\n            function handle(loc, caught) {\n                record.type = \"throw\";\n                record.arg = exception;\n                context.next = loc;\n                if (caught) {\n                    // If the dispatched exception was caught by a catch block,\n                    // then let that catch block handle the exception normally.\n                    context.method = \"next\";\n                    context.arg = undefined;\n                }\n                return !!caught;\n            }\n            for(var i = this.tryEntries.length - 1; i >= 0; --i){\n                var entry = this.tryEntries[i];\n                var record = entry.completion;\n                if (entry.tryLoc === \"root\") // Exception thrown outside of any try block that could handle\n                // it, so set the completion value of the entire function to\n                // throw the exception.\n                return handle(\"end\");\n                if (entry.tryLoc <= this.prev) {\n                    var hasCatch = hasOwn.call(entry, \"catchLoc\");\n                    var hasFinally = hasOwn.call(entry, \"finallyLoc\");\n                    if (hasCatch && hasFinally) {\n                        if (this.prev < entry.catchLoc) return handle(entry.catchLoc, true);\n                        else if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc);\n                    } else if (hasCatch) {\n                        if (this.prev < entry.catchLoc) return handle(entry.catchLoc, true);\n                    } else if (hasFinally) {\n                        if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc);\n                    } else throw new Error(\"try statement without catch or finally\");\n                }\n            }\n        },\n        abrupt: function(type, arg) {\n            for(var i = this.tryEntries.length - 1; i >= 0; --i){\n                var entry = this.tryEntries[i];\n                if (entry.tryLoc <= this.prev && hasOwn.call(entry, \"finallyLoc\") && this.prev < entry.finallyLoc) {\n                    var finallyEntry = entry;\n                    break;\n                }\n            }\n            if (finallyEntry && (type === \"break\" || type === \"continue\") && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc) // Ignore the finally entry if control is not jumping to a\n            // location outside the try/catch block.\n            finallyEntry = null;\n            var record = finallyEntry ? finallyEntry.completion : {};\n            record.type = type;\n            record.arg = arg;\n            if (finallyEntry) {\n                this.method = \"next\";\n                this.next = finallyEntry.finallyLoc;\n                return ContinueSentinel;\n            }\n            return this.complete(record);\n        },\n        complete: function(record, afterLoc) {\n            if (record.type === \"throw\") throw record.arg;\n            if (record.type === \"break\" || record.type === \"continue\") this.next = record.arg;\n            else if (record.type === \"return\") {\n                this.rval = this.arg = record.arg;\n                this.method = \"return\";\n                this.next = \"end\";\n            } else if (record.type === \"normal\" && afterLoc) this.next = afterLoc;\n            return ContinueSentinel;\n        },\n        finish: function(finallyLoc) {\n            for(var i = this.tryEntries.length - 1; i >= 0; --i){\n                var entry = this.tryEntries[i];\n                if (entry.finallyLoc === finallyLoc) {\n                    this.complete(entry.completion, entry.afterLoc);\n                    resetTryEntry(entry);\n                    return ContinueSentinel;\n                }\n            }\n        },\n        \"catch\": function(tryLoc) {\n            for(var i = this.tryEntries.length - 1; i >= 0; --i){\n                var entry = this.tryEntries[i];\n                if (entry.tryLoc === tryLoc) {\n                    var record = entry.completion;\n                    if (record.type === \"throw\") {\n                        var thrown = record.arg;\n                        resetTryEntry(entry);\n                    }\n                    return thrown;\n                }\n            }\n            // The context.catch method must only be called with a location\n            // argument that corresponds to a known catch block.\n            throw new Error(\"illegal catch attempt\");\n        },\n        delegateYield: function(iterable, resultName, nextLoc) {\n            this.delegate = {\n                iterator: values(iterable),\n                resultName: resultName,\n                nextLoc: nextLoc\n            };\n            if (this.method === \"next\") // Deliberately forget the last sent value so that we don't\n            // accidentally pass it on to the delegate.\n            this.arg = undefined;\n            return ContinueSentinel;\n        }\n    };\n    // Regardless of whether this script is executing as a CommonJS module\n    // or not, return the runtime object so that we can declare the variable\n    // regeneratorRuntime in the outer scope, which allows this module to be\n    // injected easily by `bin/regenerator --include-runtime script.js`.\n    return exports;\n}(// If this script is executing as a CommonJS module, use module.exports\n// as the regeneratorRuntime namespace. Otherwise create a new empty\n// object. Either way, the resulting object will be used to initialize\n// the regeneratorRuntime variable at the top of this file.\n(0, $7238a34a955809b2$exports));\ntry {\n    regeneratorRuntime = $7238a34a955809b2$var$runtime;\n} catch (accidentalStrictMode) {\n    // This module should not be running in strict mode, so the above\n    // assignment should always work unless something is misconfigured. Just\n    // in case runtime.js accidentally runs in strict mode, in modern engines\n    // we can explicitly access globalThis. In older engines we can escape\n    // strict mode using a global Function call. This could conceivably fail\n    // if a Content Security Policy forbids using Function, but in that case\n    // the proper solution is to fix the accidental strict mode problem. If\n    // you've misconfigured your bundler to force strict mode and applied a\n    // CSP to forbid Function, and you're not willing to fix either of those\n    // problems, please detail your unique predicament in a GitHub issue.\n    if (typeof globalThis === \"object\") globalThis.regeneratorRuntime = $7238a34a955809b2$var$runtime;\n    else Function(\"r\", \"regeneratorRuntime = r\")($7238a34a955809b2$var$runtime);\n}\n\n\n\n// https://forkify-api.herokuapp.com/v2\n///////////////////////////////////////\n//This is coming from parcel. This enables the hot module replacement, which reloads the modules that changed without refreshing the whole website. This is helpful in development as this sets up the module to accept changes dynamically without reloading the entire page\n// if (module.hot) {\n//   module.hot.accept();\n// }\n//Since we are now in a controller, instead of naming this function showRecipe we name it controlRecipe as it's more of an accurate name as to what it's doing now\nconst $4a8214ac06c5fc69$var$controlRecipes = async function() {\n    try {\n        //Loading Recipe\n        //We want to dynamically get the recipe ID from our hash. Note that getting the ID is more about application logic rather than business logic so we leave this in the controller.\n        const id = window.location.hash.slice(1); //window.location gets our current URL and .hash grabs the '#...' portion of the URL, which contains our recipe ID. But we don't want the '#' char, we want everything after it so we use the slice method\n        //if id is an empty string, we want to leave this function so that way we're not rendering the spinner and trying to render a recipe that doesn't exist\n        if (!id) return;\n        (0, $86533811ca0ba9c7$export$2e2bcd8739ae039).renderSpinner(); //Indicate that we're loading the recipe by rendering the spinner first\n        //0. Update results view to mark selected search result when loading the recipe as well as our bookmarks view to display which bookmark (if any) we're actively on if we choose to activate the 'hover' class on the bookmarks button on the nav-bar\n        (0, $724bbc6447737f8b$export$2e2bcd8739ae039).update($140f8d4f1c304308$export$8d7f79465139ab72()); //We want to pass in our current 'page' on our search results as we want to pass in the same data that we used to render our search results.\n        //However, note that the update function only updates the text and attributes that have changed.\n        //In the case of loading a new recipe, we would be adding a class attribute to the selected recipe to indicate that it is the current recipe we are on by adding the '--active' class attribute and removing the '--active' class attribute from the previous recipe.\n        //This is evaluated through our logic when generating each individual markup for our individual search results.\n        //Re-rendering the entire search results would work as well; however, it would be inefficient as we only need to update one attribute when clicking on a recipe from the search result.\n        //1. Updating Bookmarks View\n        (0, $04d9757374bd75ac$export$2e2bcd8739ae039).update($140f8d4f1c304308$export$ca000e230c0caa3e.bookmarks); //Update our bookmarks view when loading a recipe to show that we are currently on this recipe by updating the --active class attribute appropriately (which is the same as what we did above for our ResultsView)\n        //This is due to our logic when deciding whether to add the --active class when generating the markup, similarly to how we did with our search results\n        //We are going to create a child class for BookmarksView and ResultsView named previewView (since both of them share the preview class in common) to help create each separate list option (PreviewView)\n        //with the BookmarksView or ResultsView being the parent in order to encapsulate the generateMarkup functionality, which both classes have in common\n        //2. Loading Recipe\n        //Recall that loadRecipe is an async function, which means that it is going to return a Promise. So we have to await that Promise so that we are actually working with the data in the next code rather than an unfulfilled Promise with an undefined value.\n        await $140f8d4f1c304308$export$b96725c7a035d60b(id);\n        //3. Rendering Recipe\n        (0, $86533811ca0ba9c7$export$2e2bcd8739ae039).render($140f8d4f1c304308$export$ca000e230c0caa3e.recipe);\n    } catch (err) {\n        console.log(\"here\");\n        (0, $86533811ca0ba9c7$export$2e2bcd8739ae039).renderError();\n    }\n};\nconst $4a8214ac06c5fc69$var$controlSearchResults = async function() {\n    try {\n        //Load spinner when searching for a recipe\n        (0, $724bbc6447737f8b$export$2e2bcd8739ae039).renderSpinner(); //ResultsView doesn't have renderSpinner directly inside of it, though it extends the View class meaning that it inherits the methods from the View parent class\n        //1. Get search query\n        const query = (0, $71dd548963c9e5e8$export$2e2bcd8739ae039).getQuery();\n        if (!query) return;\n        //2. Load search results\n        //We don't need to store the result anywhere. Just like with the loadRecipe function above, we are not returning a value and we don't need to store the undefined value anywhere. All we're doing with this function is manipulating state\n        await $140f8d4f1c304308$export$202b8e5cb363a0c4(query);\n        //3. Render results\n        // ResultsView.render(model.state.search.results); //We no longer want all of the results. We only want to display the results based on the page.\n        (0, $724bbc6447737f8b$export$2e2bcd8739ae039).render($140f8d4f1c304308$export$8d7f79465139ab72());\n        //4. Render initial pagination buttons\n        //While displaying the search results, we also want to display the pagination buttons to browse through the search results\n        (0, $d3dd33aaa1958054$export$2e2bcd8739ae039).render($140f8d4f1c304308$export$ca000e230c0caa3e.search);\n    } catch (err) {\n        (0, $724bbc6447737f8b$export$2e2bcd8739ae039).renderError();\n    }\n};\n//Our PaginationView.addHandlerClick (callback function) calls this function and passes in the goToPage\nconst $4a8214ac06c5fc69$var$controlPagination = function(goToPage) {\n    //Our result is already loaded since we've called controlSearchResults to load our searches and controlRecipe to load our recipe. Now we are just accessing the 'pages' which are basically just the different parts of the results array in our state (different range of indexes)\n    //So, once we are on the page we need to render our new search results as well as our new buttons\n    (0, $724bbc6447737f8b$export$2e2bcd8739ae039).render($140f8d4f1c304308$export$8d7f79465139ab72(goToPage)); //This call on render again will overwrite the markup that was previously there as render calls this._clear. We are passing in the appropriate elements on our 'page' to be rendered.\n    (0, $d3dd33aaa1958054$export$2e2bcd8739ae039).render($140f8d4f1c304308$export$ca000e230c0caa3e.search); //This will also overwrite the previous markup that was previously there due to the this._clear call and will add in our new markup based on our currPage (logic written in PaginationView)\n//Keep in mind that before any new HTML is inserted in the page, the appropriate _parentElement in the instance that's calling the method is first cleared so then the render overwrites everything that was previously there by putting the new content in the same place\n// as it's the same instance calling this chain of methods\n};\n//Implement feature of updating recipe servings\n//Our RecipeView.addHandlerUpdateServing (callback function) calls this function and passes in the servings\nconst $4a8214ac06c5fc69$var$controlServings = function(newServings) {\n    //Update the recipe servings (in state). Basically, updating the underlying data with the passed in amount of servings.\n    $140f8d4f1c304308$export$5e23f4642ecad5ea(newServings);\n    //Update the RecipeView (the view that's impacted by updating the servings). There's no need to create a ServingsView because the buttons to modify servings as well as the updated recipe is all within the RecipeView.\n    //All we have to do is re-render the recipe view with the new servings and new quantites. However, this does cause a bit of a visual problem as every time that we update the servings,\n    //the things on our page that would take longer to load would have to reload each time which is inefficient and not visually pleasing.\n    //However, in order to resolve this, we could develop an algorithm that will update (re-render) the text and attributes in the DOM and leaving everything else the same, basically meaning we wouldn't have to re-render everything else.\n    //We will be doing this inside of an update method in our View as we want our other View's to have this method as well.\n    // RecipeView.render(model.state.recipe);\n    (0, $86533811ca0ba9c7$export$2e2bcd8739ae039).update($140f8d4f1c304308$export$ca000e230c0caa3e.recipe);\n};\n//Whenever a new bookmark is added, we want to render our BookmarksView with all of the bookmarks (from our bookmarks array). This is activated when we click the button to add/remove a bookmark.\n//Do not mistake this with the Bookmarks button on the nav__btn, which is toggled using the --hover style attribute between the HTML and CSS.\nconst $4a8214ac06c5fc69$var$controlToggleBookmark = function() {\n    //Add/Remove bookmark\n    //If this recipe is not already bookmarked and we click on the bookmark icon, then we want to add this recipe to our bookmarks array and set this recipe to bookmarked\n    if (!$140f8d4f1c304308$export$ca000e230c0caa3e.recipe.bookmarked) $140f8d4f1c304308$export$72009cc673d27d80($140f8d4f1c304308$export$ca000e230c0caa3e.recipe); //add the current recipe on our page to our bookmarks\n    else $140f8d4f1c304308$export$136048bcb9946c75($140f8d4f1c304308$export$ca000e230c0caa3e.recipe.id);\n    //Update RecipeView\n    (0, $86533811ca0ba9c7$export$2e2bcd8739ae039).update($140f8d4f1c304308$export$ca000e230c0caa3e.recipe); //update recipe view on our page so that the added attribute to fill in the bookmark icon is added. When we click the bookmark icon, it's href attribute changes which the update() method will notice and change the value of the href attribute to add the '-fill' CSS attribute\n    //Render Bookmarks. Though we can't actively see the BookmarksView as the CSS is not currently displaying the information, we are still rendering the data for if/when we do want to see it.\n    //Note that the hover event is handled in the sass/_preview.scss file where we have enabled the styling for hover for our markup, which does have class=\"preview\"\n    //Similarly to how when you render the search results data, you aren't displaying it all at once, you only display the search result that you click on due to how the CSS is set up.\n    //The search results also have class=\"preview\", which is why these two have such similar behavior.\n    (0, $04d9757374bd75ac$export$2e2bcd8739ae039).render($140f8d4f1c304308$export$ca000e230c0caa3e.bookmarks);\n};\nconst $4a8214ac06c5fc69$var$controlBookmarks = function() {\n    (0, $04d9757374bd75ac$export$2e2bcd8739ae039).render($140f8d4f1c304308$export$ca000e230c0caa3e.bookmarks);\n};\nconst $4a8214ac06c5fc69$var$controlAddRecipe = async function(newRecipe) {\n    try {\n        //Let's first display a loading spinner to show that we're currently waiting to complete the interactions between our program and the API to upload the data.\n        //Remember, these interactions being that we send our new recipe object to the API to actually upload it, we receive back our uploaded recipe with our key, we save our recipe in our state, display it on our page, and save it to our bookmarks\n        (0, $3a3bed218b3ac980$export$2e2bcd8739ae039).renderSpinner(); //display the spinner in our form (parentElement)\n        //Upload new recipe data. Since we're going to be calling an asynchronous function, we're going to have to await for the value of the returned Promise.\n        //Since uploadRecipe is an async function and if you call it without await, it returns a Promise immediately, which is not yet resolved.\n        //Without await, JavaScript will not wait for uploadRecipe to resolve or reject, and the try-catch block won't catch errors that occur asynchronously after the initial call unless you have another try-catch inside of uploadRecipe.\n        //This is because JavaScript uses an event-driven, non-blocking I/O model. This means it will continue executing other scripts while waiting for asynchronous operations (like network requests, timers, I/O operations) to complete.\n        //Without await, the Promise executes independently of the synchronous control flow. The async function does not pause. It continues to the next line of code immediately after starting the Promise.\n        //If the Promise rejects, the rejection occurs outside the current synchronous control flow of the async function. The error is thrown in the Promise's context, not in the context where the try-catch block exists.\n        //Since the error is not thrown within the try-catch block but in an asynchronous callback managed by the Promise, it becomes an uncaught Promise rejection unless specifically caught with a catch() handler inside of the async function (uploadRecipe in this case)\n        //The error inside the Promise is not caught by the try-catch block because the error occurs outside the synchronous control flow of the controlAddRecipe function.\n        //The Promise rejection happens asynchronously after the controlAddRecipe function has already executed its try-catch block.\n        //Therefore, to handle errors from asynchronous operations correctly, you must use await within a try-catch block, or you must attach a catch() handler directly to the Promise.\n        //If you actually want to use the value of the Promise, you'll need to await for that Promise to finish settling, however.\n        await $140f8d4f1c304308$export$d660c2254e74960d(newRecipe);\n        //Render recipe\n        (0, $86533811ca0ba9c7$export$2e2bcd8739ae039).render($140f8d4f1c304308$export$ca000e230c0caa3e.recipe); //Let's render our new uploaded recipe onto our page (remember that we store it in our state so that it'll be ready to be rendered as it's our current relevant recipe)\n        //Success Message. Let's first display a nice success message and then hide the form and overlay.\n        (0, $3a3bed218b3ac980$export$2e2bcd8739ae039).renderMessage(); //Recall that in our View, the renderMessage function defaults it's argument to this._message, which will be AddRecipeView's ._message property\n        //Our success message will be replacing the previous content from our _upload parentElement from AddRecipeView.\n        //Note that our _upload parentElement is the form that we're displaying, so we'd clear out our previous HTML content for our success message. Our form element would now hold our new markup (success message).\n        //Replacing the inner content of a <form> element with new markup that doesn't contain form-related elements (like input, select, textarea, button, etc.) would mean the <form> no longer contains interactive form fields\n        //Also note that our overlay and windows are both div, meaning they hold sections of our HTML page. Toggling between hiding and displaying these will either hide or display everything within that section.\n        //We manipulate this by using the 'hidden' class to toggle between actually displaying our window and overlay or hiding it.\n        //Our window would include our parent_element (container), so we would be able to toggle between displaying and hiding the contents within this container.\n        //The window would be in the section that displayed/stylized our form, our success message, etc and the overlay would be in the section that displayed/stylized our background.\n        //Remember that we also need to update our URL to point to our new uploaded recipe's ID so that if we reload the page, we will remain on the newly uploaded recipe's page\n        window.history.pushState(null, \"\", `#${$140f8d4f1c304308$export$ca000e230c0caa3e.recipe.id}`); //We use the history API in our browser and use the pushState method which allows us to change our URL without reloading the page\n        //History API allows manipulation of the browser session history, meaning the pages visited in the tab or frame that the current page is loaded in\n        /* \n    window.history.pushState(state, title, url)\n    state is an object associated with the new history entry created by pushState(). When the user navigates to this new state, a popstate event is fired, and the state object can be accessed within the event handler through event.state. This is a way to keep track of the state of the app without having to rely on the server or hidden form fields.\n    title is currently ignored by most browsers and can be set to an empty string (\"\"). It is intended to be the title of the new history entry.\n    url is the new URL you want to add to the browser history. The URL provided to window.history.pushState() completely replaces the current URL displayed in the browser's address bar, except for the protocol, hostname, and port number which must remain the same due to the same-origin policy.\n\n    For example, if your current URL is http://yourdomain.com/new-page.html and your url passed into the argument is \"/old-page.html\", the browser's address bar will update to http://yourdomain.com/old-page.html.\n    This happens without a page reload, and the browser history will have a new entry, enabling the user to press the back button to go back to http://yourdomain.com/new-page.html.\n    Note that the new URL must be of the same origin as the current URL; otherwise, pushState() will throw an exception. This parameter is optional; if omitted, it defaults to the current URL. */ //We also need to re-render our BookmarksView with our new uploaded recipe\n        (0, $04d9757374bd75ac$export$2e2bcd8739ae039).render($140f8d4f1c304308$export$ca000e230c0caa3e.bookmarks); //Remember we updated our state.model.bookmarks array in uploadRecipe(). We must use render() rather than update() as we're adding a new bookmark element to our container. Update doesn't work for adding or removing, only modifying.\n        //Finally, remember that we need to mark our uploaded recipe with our key to mark this submitted recipe as our own. Also, we need to make sure that only we can access our own recipes.\n        //We'll do this by attaching our key to our API queries, so that the recipes that we receive from our API will also include those associated with our key.\n        //We need to do this in our model by attaching our key inside of the AJAX calls when fetching our data from our API.\n        //This will enable us to load all of our recipes including the ones that contain our own key (remember that the API stores our key inside of our uploaded recipes)\n        //We want to visually show which recipes are our own and also have our icon show for our own recipes\n        //We're going to do that in our PreviewView, so that our search results and bookmarks display our icon for our own recipes (remember that ResultsView and BookmarksView generates its individual markups using PreviewView).\n        //We're also going to do that in our RecipeView so that we display our icon if our current recipe has the key property, which would indicate that we're displaying our own recipe\n        //You can see the logic implementing this when generating the markup for these views (basically, if we have the key property inside of our current recipe, then we don't hide our icon. Otherwise, we hide it)\n        //Lastly, we make sure that when creating the SearchResult objects in our model for our results array, we make sure to maintain the key property in our objects if it already has one (meaning it's a recipe that we uploaded)\n        //so that our view knows to display it as ours in the search results\n        //We don't have to do this for bookmarks as we just push the entire recipe object into our bookmarks array if we want to add it as a bookmark, or it will automatically be done if it's our own recipe.\n        //We needed to do that for our search results because we needed to display all of the recipes that matched our search query. With bookmarks, we're just pushing whatever recipe is either ours or ones that we want to bookmark.\n        //Close form window\n        setTimeout(function() {\n            (0, $3a3bed218b3ac980$export$2e2bcd8739ae039).toggleWindow();\n        }, (0, $dba1f40f036b2a50$export$3ce8858248d89a69) * 1000); //Multiply 1000 to convert our seconds to milliseconds (which setTimeOut expects)\n    } catch (err) {\n        console.error(err);\n        //We could actually just pass in our errMessage as we accounted for that ability in the renderError function in our View. By default, the errMessage would be from this._errorMessage, but we could also specify in our own message\n        //So, that's we're going to do in this case as we want to display different error messages based on the error that was thrown\n        (0, $3a3bed218b3ac980$export$2e2bcd8739ae039).renderError(err.message);\n    }\n};\n//Notice the naming convention of 'addHandler...'\nconst $4a8214ac06c5fc69$var$init = function() {\n    $140f8d4f1c304308$export$973ecd6243726f9d();\n    //We ensure that the BookmarksView is rendered as soon as the page loads.\n    //The issue to look out for was that our currDOM on the page was not yet rendered with the populated bookmarks array from localStorage in our BookmarksView\n    //And when we'd try to update the currDOM with the newDOM, which contained the new populated bookmarks array, this would cause an error.\n    //The newDOM would contain the new populated bookmarks array because we'd be calling _generateMarkup to create our new markup, which would generate a markup based on the current data from our state which would include the bookmarks array from localStorage.\n    //However, our currDOM would remain as whatever we'd currently have on the page upon immediately loading which, at the time, hadn't generated any updated markups for our BookmarksView with the bookmarks array from localStorage yet, let alone inserted them into the DOM,\n    //which would be necessary as our update() method compares what's currently on our DOM right now with the updated markup that's going to be inserted into the DOM so that it knows what to \"update\".\n    //Since our newDOM would have the previously populated bookmark list which the currDOM doesn't have, this would cause an error as we'd be trying to set the text property of an element that hasn't been created yet on our current DOM\n    //Making sure that the BookmarksView is immediately rendered with the new populated bookmarks array as soon as the page loads resolves the issue that the update method unsuccessfully tries to set the text content of a non-existent element at the time the page loads.\n    //Note that we call the update() method inside of controlRecipes, which is also called once the page loads which is why this it is essential that we first render the BookmarksView immediately once the page loads (even before controlRecipes is called)\n    //So that when we do call the update() method to provide stylization for the current --active bookmark, we have the same amount of elements in our current bookmark as our new bookmark and we won't run into the same issue.\n    //Adding and removing bookmarks works completely fine as we use the render() function to perform those, not the update().\n    //We only called the update() on the BookmarksView for the functionality of keeping the '--active' (CSS style to display current bookmark selected) functionality working appropriately.\n    (0, $04d9757374bd75ac$export$2e2bcd8739ae039).addHandlerRender($4a8214ac06c5fc69$var$controlBookmarks);\n    (0, $86533811ca0ba9c7$export$2e2bcd8739ae039).addHandlerRender($4a8214ac06c5fc69$var$controlRecipes); //we set up our event listeners. controlRecipes is our subscriber as it knows how to react when the events happen. addHandlerRender is our publisher as it knows when the events happen\n    (0, $86533811ca0ba9c7$export$2e2bcd8739ae039).addHandlerUpdateServings($4a8214ac06c5fc69$var$controlServings);\n    //Note that with below, we still need to make sure the bookmarked flag persists in our view. Because everytime we re-render a recipe, we are getting the recipe from our API rather than from our state.\n    //To resolve this issue, we will use our state to mark each recipe as bookmarked if it's in our bookmarks array. And our View will see whether our current recipe on display has the bookmarked property set to true or false (by default).\n    //We resolve this in loadRecipe in our model.\n    (0, $86533811ca0ba9c7$export$2e2bcd8739ae039).addHandlerToggleBookmark($4a8214ac06c5fc69$var$controlToggleBookmark);\n    (0, $71dd548963c9e5e8$export$2e2bcd8739ae039).addHandlerSearch($4a8214ac06c5fc69$var$controlSearchResults);\n    (0, $d3dd33aaa1958054$export$2e2bcd8739ae039).addHandlerClick($4a8214ac06c5fc69$var$controlPagination);\n    (0, $3a3bed218b3ac980$export$2e2bcd8739ae039).addHandlerUpload($4a8214ac06c5fc69$var$controlAddRecipe);\n};\n$4a8214ac06c5fc69$var$init(); //initialize everything that needs to be initialized when starting our program\n\n\n//# sourceMappingURL=index.7fbfcae0.js.map\n","import * as model from './model';\n//We can immediately import the views as we are exporting a singular instance of the class object already (singleton pattern), one benefit is that we don't have to instantiate the object ourselves.\nimport RecipeView from './views/RecipeView';\nimport SearchView from './views/SearchView';\nimport ResultsView from './views/ResultsView';\nimport PaginationView from './views/PaginationView';\nimport BookmarksView from './views/BookmarksView';\nimport AddRecipeView from './views/AddRecipeView';\n\n//One big module for all the controllers\n\n//To ensure that the paths to your assets remain correct after bundling, you should import them in your JavaScript or TypeScript files. This allows the bundler to resolve the paths correctly and to include the assets in the output dist folder.\n//If you don't import your assets explicitly in your JavaScript or CSS files when using a module bundler, the bundler typically won't include those assets in the output dist directory.\n//This is because most module bundlers are not aware of these assets unless they are explicitly referenced in the code.\n// Module bundlers like Webpack, Rollup, and Parcel work by creating a dependency graph of all the modules that your application uses. This graph is built based on the explicit import and require statements in your code.\n//If an asset is not imported or required somewhere in your code, the bundler doesn't know about its existence and consequently doesn't include it in the bundle.\n//Automatically including every file from the source directories without checking for explicit references would lead to bloated and inefficient bundles, containing potentially unused assets.\n//Importing assets gives developers control over which assets are included in the build and how they are handled.\n\n//What Happens If You Don't Import Assets?\n//Assets that are not imported remain untouched in their original directories. They won't be processed or moved to the dist directory, nor will they be optimized or hashed for cache busting.\n//If you want these assets to be available in the dist directory without importing them, you would need to manually copy them or configure your bundler to include specific directories or files.\n\n//To ensure that all your assets are handled correctly by the bundler, always prefer to import them directly in your code where you use them.\n//This not only ensures they are included in the output but also lets you take advantage of the bundler's features for handling them efficiently.\n\n//Now, icons will be the path to the new icons file in the 'dist' folder. Everytime we referred to the previous icons path, we will now use the icons variable instead which contains the path of our new icons file\n\n//Polyfilling to ensure that most old browsers are supported by our application. We could pick which features we want to polyfill, and only import those specific features but let's just polyfill everything.\nimport 'core-js/stable'; //Polyfilling all other features except async/await.\nimport 'regenerator-runtime'; //Polyfilling async/await\nimport BookmarksView from './views/BookmarksView';\nimport { MODAL_CLOSE_SEC } from './config';\n\n// https://forkify-api.herokuapp.com/v2\n\n///////////////////////////////////////\n\n//This is coming from parcel. This enables the hot module replacement, which reloads the modules that changed without refreshing the whole website. This is helpful in development as this sets up the module to accept changes dynamically without reloading the entire page\n// if (module.hot) {\n//   module.hot.accept();\n// }\n\n//Since we are now in a controller, instead of naming this function showRecipe we name it controlRecipe as it's more of an accurate name as to what it's doing now\nconst controlRecipes = async function () {\n  try {\n    //Loading Recipe\n\n    //We want to dynamically get the recipe ID from our hash. Note that getting the ID is more about application logic rather than business logic so we leave this in the controller.\n    const id = window.location.hash.slice(1); //window.location gets our current URL and .hash grabs the '#...' portion of the URL, which contains our recipe ID. But we don't want the '#' char, we want everything after it so we use the slice method\n\n    //if id is an empty string, we want to leave this function so that way we're not rendering the spinner and trying to render a recipe that doesn't exist\n    if (!id) return;\n\n    RecipeView.renderSpinner(); //Indicate that we're loading the recipe by rendering the spinner first\n\n    //0. Update results view to mark selected search result when loading the recipe as well as our bookmarks view to display which bookmark (if any) we're actively on if we choose to activate the 'hover' class on the bookmarks button on the nav-bar\n    ResultsView.update(model.getSearchResultsPage()); //We want to pass in our current 'page' on our search results as we want to pass in the same data that we used to render our search results.\n    //However, note that the update function only updates the text and attributes that have changed.\n    //In the case of loading a new recipe, we would be adding a class attribute to the selected recipe to indicate that it is the current recipe we are on by adding the '--active' class attribute and removing the '--active' class attribute from the previous recipe.\n    //This is evaluated through our logic when generating each individual markup for our individual search results.\n    //Re-rendering the entire search results would work as well; however, it would be inefficient as we only need to update one attribute when clicking on a recipe from the search result.\n\n    //1. Updating Bookmarks View\n    BookmarksView.update(model.state.bookmarks); //Update our bookmarks view when loading a recipe to show that we are currently on this recipe by updating the --active class attribute appropriately (which is the same as what we did above for our ResultsView)\n    //This is due to our logic when deciding whether to add the --active class when generating the markup, similarly to how we did with our search results\n    //We are going to create a child class for BookmarksView and ResultsView named previewView (since both of them share the preview class in common) to help create each separate list option (PreviewView)\n    //with the BookmarksView or ResultsView being the parent in order to encapsulate the generateMarkup functionality, which both classes have in common\n\n    //2. Loading Recipe\n    //Recall that loadRecipe is an async function, which means that it is going to return a Promise. So we have to await that Promise so that we are actually working with the data in the next code rather than an unfulfilled Promise with an undefined value.\n    await model.loadRecipe(id);\n\n    //3. Rendering Recipe\n    RecipeView.render(model.state.recipe);\n  } catch (err) {\n    console.log('here');\n    RecipeView.renderError();\n  }\n};\n\nconst controlSearchResults = async function () {\n  try {\n    //Load spinner when searching for a recipe\n    ResultsView.renderSpinner(); //ResultsView doesn't have renderSpinner directly inside of it, though it extends the View class meaning that it inherits the methods from the View parent class\n\n    //1. Get search query\n    const query = SearchView.getQuery();\n\n    if (!query) return;\n\n    //2. Load search results\n    //We don't need to store the result anywhere. Just like with the loadRecipe function above, we are not returning a value and we don't need to store the undefined value anywhere. All we're doing with this function is manipulating state\n    await model.loadSearchResults(query);\n\n    //3. Render results\n    // ResultsView.render(model.state.search.results); //We no longer want all of the results. We only want to display the results based on the page.\n    ResultsView.render(model.getSearchResultsPage());\n\n    //4. Render initial pagination buttons\n    //While displaying the search results, we also want to display the pagination buttons to browse through the search results\n    PaginationView.render(model.state.search);\n  } catch (err) {\n    ResultsView.renderError();\n  }\n};\n//Our PaginationView.addHandlerClick (callback function) calls this function and passes in the goToPage\nconst controlPagination = function (goToPage) {\n  //Our result is already loaded since we've called controlSearchResults to load our searches and controlRecipe to load our recipe. Now we are just accessing the 'pages' which are basically just the different parts of the results array in our state (different range of indexes)\n  //So, once we are on the page we need to render our new search results as well as our new buttons\n  ResultsView.render(model.getSearchResultsPage(goToPage)); //This call on render again will overwrite the markup that was previously there as render calls this._clear. We are passing in the appropriate elements on our 'page' to be rendered.\n  PaginationView.render(model.state.search); //This will also overwrite the previous markup that was previously there due to the this._clear call and will add in our new markup based on our currPage (logic written in PaginationView)\n  //Keep in mind that before any new HTML is inserted in the page, the appropriate _parentElement in the instance that's calling the method is first cleared so then the render overwrites everything that was previously there by putting the new content in the same place\n  // as it's the same instance calling this chain of methods\n};\n\n//Implement feature of updating recipe servings\n//Our RecipeView.addHandlerUpdateServing (callback function) calls this function and passes in the servings\nconst controlServings = function (newServings) {\n  //Update the recipe servings (in state). Basically, updating the underlying data with the passed in amount of servings.\n  model.updateServings(newServings);\n  //Update the RecipeView (the view that's impacted by updating the servings). There's no need to create a ServingsView because the buttons to modify servings as well as the updated recipe is all within the RecipeView.\n  //All we have to do is re-render the recipe view with the new servings and new quantites. However, this does cause a bit of a visual problem as every time that we update the servings,\n  //the things on our page that would take longer to load would have to reload each time which is inefficient and not visually pleasing.\n\n  //However, in order to resolve this, we could develop an algorithm that will update (re-render) the text and attributes in the DOM and leaving everything else the same, basically meaning we wouldn't have to re-render everything else.\n  //We will be doing this inside of an update method in our View as we want our other View's to have this method as well.\n  // RecipeView.render(model.state.recipe);\n  RecipeView.update(model.state.recipe);\n};\n\n//Whenever a new bookmark is added, we want to render our BookmarksView with all of the bookmarks (from our bookmarks array). This is activated when we click the button to add/remove a bookmark.\n//Do not mistake this with the Bookmarks button on the nav__btn, which is toggled using the --hover style attribute between the HTML and CSS.\nconst controlToggleBookmark = function () {\n  //Add/Remove bookmark\n  //If this recipe is not already bookmarked and we click on the bookmark icon, then we want to add this recipe to our bookmarks array and set this recipe to bookmarked\n  if (!model.state.recipe.bookmarked) {\n    model.addBookmark(model.state.recipe); //add the current recipe on our page to our bookmarks\n  }\n  //Else, this recipe is already bookmarked and we want to remove this recipe from our bookmarks array and set this recipe as not bookmarked\n  else {\n    model.deleteBookmark(model.state.recipe.id);\n  }\n\n  //Update RecipeView\n  RecipeView.update(model.state.recipe); //update recipe view on our page so that the added attribute to fill in the bookmark icon is added. When we click the bookmark icon, it's href attribute changes which the update() method will notice and change the value of the href attribute to add the '-fill' CSS attribute\n\n  //Render Bookmarks. Though we can't actively see the BookmarksView as the CSS is not currently displaying the information, we are still rendering the data for if/when we do want to see it.\n  //Note that the hover event is handled in the sass/_preview.scss file where we have enabled the styling for hover for our markup, which does have class=\"preview\"\n  //Similarly to how when you render the search results data, you aren't displaying it all at once, you only display the search result that you click on due to how the CSS is set up.\n  //The search results also have class=\"preview\", which is why these two have such similar behavior.\n  BookmarksView.render(model.state.bookmarks);\n};\n\nconst controlBookmarks = function () {\n  BookmarksView.render(model.state.bookmarks);\n};\n\nconst controlAddRecipe = async function (newRecipe) {\n  try {\n    //Let's first display a loading spinner to show that we're currently waiting to complete the interactions between our program and the API to upload the data.\n    //Remember, these interactions being that we send our new recipe object to the API to actually upload it, we receive back our uploaded recipe with our key, we save our recipe in our state, display it on our page, and save it to our bookmarks\n    AddRecipeView.renderSpinner(); //display the spinner in our form (parentElement)\n\n    //Upload new recipe data. Since we're going to be calling an asynchronous function, we're going to have to await for the value of the returned Promise.\n    //Since uploadRecipe is an async function and if you call it without await, it returns a Promise immediately, which is not yet resolved.\n    //Without await, JavaScript will not wait for uploadRecipe to resolve or reject, and the try-catch block won't catch errors that occur asynchronously after the initial call unless you have another try-catch inside of uploadRecipe.\n\n    //This is because JavaScript uses an event-driven, non-blocking I/O model. This means it will continue executing other scripts while waiting for asynchronous operations (like network requests, timers, I/O operations) to complete.\n    //Without await, the Promise executes independently of the synchronous control flow. The async function does not pause. It continues to the next line of code immediately after starting the Promise.\n    //If the Promise rejects, the rejection occurs outside the current synchronous control flow of the async function. The error is thrown in the Promise's context, not in the context where the try-catch block exists.\n    //Since the error is not thrown within the try-catch block but in an asynchronous callback managed by the Promise, it becomes an uncaught Promise rejection unless specifically caught with a catch() handler inside of the async function (uploadRecipe in this case)\n\n    //The error inside the Promise is not caught by the try-catch block because the error occurs outside the synchronous control flow of the controlAddRecipe function.\n    //The Promise rejection happens asynchronously after the controlAddRecipe function has already executed its try-catch block.\n    //Therefore, to handle errors from asynchronous operations correctly, you must use await within a try-catch block, or you must attach a catch() handler directly to the Promise.\n    //If you actually want to use the value of the Promise, you'll need to await for that Promise to finish settling, however.\n    await model.uploadRecipe(newRecipe);\n    //Render recipe\n    RecipeView.render(model.state.recipe); //Let's render our new uploaded recipe onto our page (remember that we store it in our state so that it'll be ready to be rendered as it's our current relevant recipe)\n\n    //Success Message. Let's first display a nice success message and then hide the form and overlay.\n    AddRecipeView.renderMessage(); //Recall that in our View, the renderMessage function defaults it's argument to this._message, which will be AddRecipeView's ._message property\n    //Our success message will be replacing the previous content from our _upload parentElement from AddRecipeView.\n    //Note that our _upload parentElement is the form that we're displaying, so we'd clear out our previous HTML content for our success message. Our form element would now hold our new markup (success message).\n    //Replacing the inner content of a <form> element with new markup that doesn't contain form-related elements (like input, select, textarea, button, etc.) would mean the <form> no longer contains interactive form fields\n\n    //Also note that our overlay and windows are both div, meaning they hold sections of our HTML page. Toggling between hiding and displaying these will either hide or display everything within that section.\n    //We manipulate this by using the 'hidden' class to toggle between actually displaying our window and overlay or hiding it.\n    //Our window would include our parent_element (container), so we would be able to toggle between displaying and hiding the contents within this container.\n    //The window would be in the section that displayed/stylized our form, our success message, etc and the overlay would be in the section that displayed/stylized our background.\n\n    //Remember that we also need to update our URL to point to our new uploaded recipe's ID so that if we reload the page, we will remain on the newly uploaded recipe's page\n    window.history.pushState(null, '', `#${model.state.recipe.id}`); //We use the history API in our browser and use the pushState method which allows us to change our URL without reloading the page\n    //History API allows manipulation of the browser session history, meaning the pages visited in the tab or frame that the current page is loaded in\n\n    /* \n    window.history.pushState(state, title, url)\n    state is an object associated with the new history entry created by pushState(). When the user navigates to this new state, a popstate event is fired, and the state object can be accessed within the event handler through event.state. This is a way to keep track of the state of the app without having to rely on the server or hidden form fields.\n    title is currently ignored by most browsers and can be set to an empty string (\"\"). It is intended to be the title of the new history entry.\n    url is the new URL you want to add to the browser history. The URL provided to window.history.pushState() completely replaces the current URL displayed in the browser's address bar, except for the protocol, hostname, and port number which must remain the same due to the same-origin policy.\n\n    For example, if your current URL is http://yourdomain.com/new-page.html and your url passed into the argument is \"/old-page.html\", the browser's address bar will update to http://yourdomain.com/old-page.html.\n    This happens without a page reload, and the browser history will have a new entry, enabling the user to press the back button to go back to http://yourdomain.com/new-page.html.\n    Note that the new URL must be of the same origin as the current URL; otherwise, pushState() will throw an exception. This parameter is optional; if omitted, it defaults to the current URL. */\n\n    //We also need to re-render our BookmarksView with our new uploaded recipe\n    BookmarksView.render(model.state.bookmarks); //Remember we updated our state.model.bookmarks array in uploadRecipe(). We must use render() rather than update() as we're adding a new bookmark element to our container. Update doesn't work for adding or removing, only modifying.\n\n    //Finally, remember that we need to mark our uploaded recipe with our key to mark this submitted recipe as our own. Also, we need to make sure that only we can access our own recipes.\n    //We'll do this by attaching our key to our API queries, so that the recipes that we receive from our API will also include those associated with our key.\n    //We need to do this in our model by attaching our key inside of the AJAX calls when fetching our data from our API.\n    //This will enable us to load all of our recipes including the ones that contain our own key (remember that the API stores our key inside of our uploaded recipes)\n\n    //We want to visually show which recipes are our own and also have our icon show for our own recipes\n    //We're going to do that in our PreviewView, so that our search results and bookmarks display our icon for our own recipes (remember that ResultsView and BookmarksView generates its individual markups using PreviewView).\n    //We're also going to do that in our RecipeView so that we display our icon if our current recipe has the key property, which would indicate that we're displaying our own recipe\n\n    //You can see the logic implementing this when generating the markup for these views (basically, if we have the key property inside of our current recipe, then we don't hide our icon. Otherwise, we hide it)\n    //Lastly, we make sure that when creating the SearchResult objects in our model for our results array, we make sure to maintain the key property in our objects if it already has one (meaning it's a recipe that we uploaded)\n    //so that our view knows to display it as ours in the search results\n\n    //We don't have to do this for bookmarks as we just push the entire recipe object into our bookmarks array if we want to add it as a bookmark, or it will automatically be done if it's our own recipe.\n    //We needed to do that for our search results because we needed to display all of the recipes that matched our search query. With bookmarks, we're just pushing whatever recipe is either ours or ones that we want to bookmark.\n\n    //Close form window\n    setTimeout(function () {\n      AddRecipeView.toggleWindow();\n    }, MODAL_CLOSE_SEC * 1000); //Multiply 1000 to convert our seconds to milliseconds (which setTimeOut expects)\n  } catch (err) {\n    console.error(err);\n    //We could actually just pass in our errMessage as we accounted for that ability in the renderError function in our View. By default, the errMessage would be from this._errorMessage, but we could also specify in our own message\n    //So, that's we're going to do in this case as we want to display different error messages based on the error that was thrown\n    AddRecipeView.renderError(err.message);\n  }\n};\n\n//Notice the naming convention of 'addHandler...'\nconst init = function () {\n  model.restoreBookmarks();\n\n  //We ensure that the BookmarksView is rendered as soon as the page loads.\n  //The issue to look out for was that our currDOM on the page was not yet rendered with the populated bookmarks array from localStorage in our BookmarksView\n  //And when we'd try to update the currDOM with the newDOM, which contained the new populated bookmarks array, this would cause an error.\n  //The newDOM would contain the new populated bookmarks array because we'd be calling _generateMarkup to create our new markup, which would generate a markup based on the current data from our state which would include the bookmarks array from localStorage.\n  //However, our currDOM would remain as whatever we'd currently have on the page upon immediately loading which, at the time, hadn't generated any updated markups for our BookmarksView with the bookmarks array from localStorage yet, let alone inserted them into the DOM,\n  //which would be necessary as our update() method compares what's currently on our DOM right now with the updated markup that's going to be inserted into the DOM so that it knows what to \"update\".\n\n  //Since our newDOM would have the previously populated bookmark list which the currDOM doesn't have, this would cause an error as we'd be trying to set the text property of an element that hasn't been created yet on our current DOM\n  //Making sure that the BookmarksView is immediately rendered with the new populated bookmarks array as soon as the page loads resolves the issue that the update method unsuccessfully tries to set the text content of a non-existent element at the time the page loads.\n  //Note that we call the update() method inside of controlRecipes, which is also called once the page loads which is why this it is essential that we first render the BookmarksView immediately once the page loads (even before controlRecipes is called)\n  //So that when we do call the update() method to provide stylization for the current --active bookmark, we have the same amount of elements in our current bookmark as our new bookmark and we won't run into the same issue.\n\n  //Adding and removing bookmarks works completely fine as we use the render() function to perform those, not the update().\n  //We only called the update() on the BookmarksView for the functionality of keeping the '--active' (CSS style to display current bookmark selected) functionality working appropriately.\n  BookmarksView.addHandlerRender(controlBookmarks);\n\n  RecipeView.addHandlerRender(controlRecipes); //we set up our event listeners. controlRecipes is our subscriber as it knows how to react when the events happen. addHandlerRender is our publisher as it knows when the events happen\n  RecipeView.addHandlerUpdateServings(controlServings);\n  //Note that with below, we still need to make sure the bookmarked flag persists in our view. Because everytime we re-render a recipe, we are getting the recipe from our API rather than from our state.\n  //To resolve this issue, we will use our state to mark each recipe as bookmarked if it's in our bookmarks array. And our View will see whether our current recipe on display has the bookmarked property set to true or false (by default).\n  //We resolve this in loadRecipe in our model.\n  RecipeView.addHandlerToggleBookmark(controlToggleBookmark);\n  SearchView.addHandlerSearch(controlSearchResults);\n  PaginationView.addHandlerClick(controlPagination);\n  AddRecipeView.addHandlerUpload(controlAddRecipe);\n};\n\ninit(); //initialize everything that needs to be initialized when starting our program\n","'use strict';\n// TODO: Remove this module from `core-js@4` since it's split to modules listed below\nrequire('../modules/web.clear-immediate');\nrequire('../modules/web.set-immediate');\n","'use strict';\nvar $ = require('../internals/export');\nvar global = require('../internals/global');\nvar clearImmediate = require('../internals/task').clear;\n\n// `clearImmediate` method\n// http://w3c.github.io/setImmediate/#si-clearImmediate\n$({ global: true, bind: true, enumerable: true, forced: global.clearImmediate !== clearImmediate }, {\n  clearImmediate: clearImmediate\n});\n","'use strict';\nvar global = require('../internals/global');\nvar getOwnPropertyDescriptor = require('../internals/object-get-own-property-descriptor').f;\nvar createNonEnumerableProperty = require('../internals/create-non-enumerable-property');\nvar defineBuiltIn = require('../internals/define-built-in');\nvar defineGlobalProperty = require('../internals/define-global-property');\nvar copyConstructorProperties = require('../internals/copy-constructor-properties');\nvar isForced = require('../internals/is-forced');\n\n/*\n  options.target         - name of the target object\n  options.global         - target is the global object\n  options.stat           - export as static methods of target\n  options.proto          - export as prototype methods of target\n  options.real           - real prototype method for the `pure` version\n  options.forced         - export even if the native feature is available\n  options.bind           - bind methods to the target, required for the `pure` version\n  options.wrap           - wrap constructors to preventing global pollution, required for the `pure` version\n  options.unsafe         - use the simple assignment of property instead of delete + defineProperty\n  options.sham           - add a flag to not completely full polyfills\n  options.enumerable     - export as enumerable property\n  options.dontCallGetSet - prevent calling a getter on target\n  options.name           - the .name of the function if it does not match the key\n*/\nmodule.exports = function (options, source) {\n  var TARGET = options.target;\n  var GLOBAL = options.global;\n  var STATIC = options.stat;\n  var FORCED, target, key, targetProperty, sourceProperty, descriptor;\n  if (GLOBAL) {\n    target = global;\n  } else if (STATIC) {\n    target = global[TARGET] || defineGlobalProperty(TARGET, {});\n  } else {\n    target = global[TARGET] && global[TARGET].prototype;\n  }\n  if (target) for (key in source) {\n    sourceProperty = source[key];\n    if (options.dontCallGetSet) {\n      descriptor = getOwnPropertyDescriptor(target, key);\n      targetProperty = descriptor && descriptor.value;\n    } else targetProperty = target[key];\n    FORCED = isForced(GLOBAL ? key : TARGET + (STATIC ? '.' : '#') + key, options.forced);\n    // contained in target\n    if (!FORCED && targetProperty !== undefined) {\n      if (typeof sourceProperty == typeof targetProperty) continue;\n      copyConstructorProperties(sourceProperty, targetProperty);\n    }\n    // add a flag to not completely full polyfills\n    if (options.sham || (targetProperty && targetProperty.sham)) {\n      createNonEnumerableProperty(sourceProperty, 'sham', true);\n    }\n    defineBuiltIn(target, key, sourceProperty, options);\n  }\n};\n","'use strict';\nvar check = function (it) {\n  return it && it.Math === Math && it;\n};\n\n// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028\nmodule.exports =\n  // eslint-disable-next-line es/no-global-this -- safe\n  check(typeof globalThis == 'object' && globalThis) ||\n  check(typeof window == 'object' && window) ||\n  // eslint-disable-next-line no-restricted-globals -- safe\n  check(typeof self == 'object' && self) ||\n  check(typeof global == 'object' && global) ||\n  check(typeof this == 'object' && this) ||\n  // eslint-disable-next-line no-new-func -- fallback\n  (function () { return this; })() || Function('return this')();\n","'use strict';\nvar DESCRIPTORS = require('../internals/descriptors');\nvar call = require('../internals/function-call');\nvar propertyIsEnumerableModule = require('../internals/object-property-is-enumerable');\nvar createPropertyDescriptor = require('../internals/create-property-descriptor');\nvar toIndexedObject = require('../internals/to-indexed-object');\nvar toPropertyKey = require('../internals/to-property-key');\nvar hasOwn = require('../internals/has-own-property');\nvar IE8_DOM_DEFINE = require('../internals/ie8-dom-define');\n\n// eslint-disable-next-line es/no-object-getownpropertydescriptor -- safe\nvar $getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;\n\n// `Object.getOwnPropertyDescriptor` method\n// https://tc39.es/ecma262/#sec-object.getownpropertydescriptor\nexports.f = DESCRIPTORS ? $getOwnPropertyDescriptor : function getOwnPropertyDescriptor(O, P) {\n  O = toIndexedObject(O);\n  P = toPropertyKey(P);\n  if (IE8_DOM_DEFINE) try {\n    return $getOwnPropertyDescriptor(O, P);\n  } catch (error) { /* empty */ }\n  if (hasOwn(O, P)) return createPropertyDescriptor(!call(propertyIsEnumerableModule.f, O, P), O[P]);\n};\n","'use strict';\nvar fails = require('../internals/fails');\n\n// Detect IE8's incomplete defineProperty implementation\nmodule.exports = !fails(function () {\n  // eslint-disable-next-line es/no-object-defineproperty -- required for testing\n  return Object.defineProperty({}, 1, { get: function () { return 7; } })[1] !== 7;\n});\n","'use strict';\nmodule.exports = function (exec) {\n  try {\n    return !!exec();\n  } catch (error) {\n    return true;\n  }\n};\n","'use strict';\nvar NATIVE_BIND = require('../internals/function-bind-native');\n\nvar call = Function.prototype.call;\n\nmodule.exports = NATIVE_BIND ? call.bind(call) : function () {\n  return call.apply(call, arguments);\n};\n","'use strict';\nvar fails = require('../internals/fails');\n\nmodule.exports = !fails(function () {\n  // eslint-disable-next-line es/no-function-prototype-bind -- safe\n  var test = (function () { /* empty */ }).bind();\n  // eslint-disable-next-line no-prototype-builtins -- safe\n  return typeof test != 'function' || test.hasOwnProperty('prototype');\n});\n","'use strict';\nvar $propertyIsEnumerable = {}.propertyIsEnumerable;\n// eslint-disable-next-line es/no-object-getownpropertydescriptor -- safe\nvar getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;\n\n// Nashorn ~ JDK8 bug\nvar NASHORN_BUG = getOwnPropertyDescriptor && !$propertyIsEnumerable.call({ 1: 2 }, 1);\n\n// `Object.prototype.propertyIsEnumerable` method implementation\n// https://tc39.es/ecma262/#sec-object.prototype.propertyisenumerable\nexports.f = NASHORN_BUG ? function propertyIsEnumerable(V) {\n  var descriptor = getOwnPropertyDescriptor(this, V);\n  return !!descriptor && descriptor.enumerable;\n} : $propertyIsEnumerable;\n","'use strict';\nmodule.exports = function (bitmap, value) {\n  return {\n    enumerable: !(bitmap & 1),\n    configurable: !(bitmap & 2),\n    writable: !(bitmap & 4),\n    value: value\n  };\n};\n","'use strict';\n// toObject with fallback for non-array-like ES3 strings\nvar IndexedObject = require('../internals/indexed-object');\nvar requireObjectCoercible = require('../internals/require-object-coercible');\n\nmodule.exports = function (it) {\n  return IndexedObject(requireObjectCoercible(it));\n};\n","'use strict';\nvar uncurryThis = require('../internals/function-uncurry-this');\nvar fails = require('../internals/fails');\nvar classof = require('../internals/classof-raw');\n\nvar $Object = Object;\nvar split = uncurryThis(''.split);\n\n// fallback for non-array-like ES3 and non-enumerable old V8 strings\nmodule.exports = fails(function () {\n  // throws an error in rhino, see https://github.com/mozilla/rhino/issues/346\n  // eslint-disable-next-line no-prototype-builtins -- safe\n  return !$Object('z').propertyIsEnumerable(0);\n}) ? function (it) {\n  return classof(it) === 'String' ? split(it, '') : $Object(it);\n} : $Object;\n","'use strict';\nvar NATIVE_BIND = require('../internals/function-bind-native');\n\nvar FunctionPrototype = Function.prototype;\nvar call = FunctionPrototype.call;\nvar uncurryThisWithBind = NATIVE_BIND && FunctionPrototype.bind.bind(call, call);\n\nmodule.exports = NATIVE_BIND ? uncurryThisWithBind : function (fn) {\n  return function () {\n    return call.apply(fn, arguments);\n  };\n};\n","'use strict';\nvar uncurryThis = require('../internals/function-uncurry-this');\n\nvar toString = uncurryThis({}.toString);\nvar stringSlice = uncurryThis(''.slice);\n\nmodule.exports = function (it) {\n  return stringSlice(toString(it), 8, -1);\n};\n","'use strict';\nvar isNullOrUndefined = require('../internals/is-null-or-undefined');\n\nvar $TypeError = TypeError;\n\n// `RequireObjectCoercible` abstract operation\n// https://tc39.es/ecma262/#sec-requireobjectcoercible\nmodule.exports = function (it) {\n  if (isNullOrUndefined(it)) throw new $TypeError(\"Can't call method on \" + it);\n  return it;\n};\n","'use strict';\n// we can't use just `it == null` since of `document.all` special case\n// https://tc39.es/ecma262/#sec-IsHTMLDDA-internal-slot-aec\nmodule.exports = function (it) {\n  return it === null || it === undefined;\n};\n","'use strict';\nvar toPrimitive = require('../internals/to-primitive');\nvar isSymbol = require('../internals/is-symbol');\n\n// `ToPropertyKey` abstract operation\n// https://tc39.es/ecma262/#sec-topropertykey\nmodule.exports = function (argument) {\n  var key = toPrimitive(argument, 'string');\n  return isSymbol(key) ? key : key + '';\n};\n","'use strict';\nvar call = require('../internals/function-call');\nvar isObject = require('../internals/is-object');\nvar isSymbol = require('../internals/is-symbol');\nvar getMethod = require('../internals/get-method');\nvar ordinaryToPrimitive = require('../internals/ordinary-to-primitive');\nvar wellKnownSymbol = require('../internals/well-known-symbol');\n\nvar $TypeError = TypeError;\nvar TO_PRIMITIVE = wellKnownSymbol('toPrimitive');\n\n// `ToPrimitive` abstract operation\n// https://tc39.es/ecma262/#sec-toprimitive\nmodule.exports = function (input, pref) {\n  if (!isObject(input) || isSymbol(input)) return input;\n  var exoticToPrim = getMethod(input, TO_PRIMITIVE);\n  var result;\n  if (exoticToPrim) {\n    if (pref === undefined) pref = 'default';\n    result = call(exoticToPrim, input, pref);\n    if (!isObject(result) || isSymbol(result)) return result;\n    throw new $TypeError(\"Can't convert object to primitive value\");\n  }\n  if (pref === undefined) pref = 'number';\n  return ordinaryToPrimitive(input, pref);\n};\n","'use strict';\nvar isCallable = require('../internals/is-callable');\n\nmodule.exports = function (it) {\n  return typeof it == 'object' ? it !== null : isCallable(it);\n};\n","'use strict';\n// https://tc39.es/ecma262/#sec-IsHTMLDDA-internal-slot\nvar documentAll = typeof document == 'object' && document.all;\n\n// `IsCallable` abstract operation\n// https://tc39.es/ecma262/#sec-iscallable\n// eslint-disable-next-line unicorn/no-typeof-undefined -- required for testing\nmodule.exports = typeof documentAll == 'undefined' && documentAll !== undefined ? function (argument) {\n  return typeof argument == 'function' || argument === documentAll;\n} : function (argument) {\n  return typeof argument == 'function';\n};\n","'use strict';\nvar getBuiltIn = require('../internals/get-built-in');\nvar isCallable = require('../internals/is-callable');\nvar isPrototypeOf = require('../internals/object-is-prototype-of');\nvar USE_SYMBOL_AS_UID = require('../internals/use-symbol-as-uid');\n\nvar $Object = Object;\n\nmodule.exports = USE_SYMBOL_AS_UID ? function (it) {\n  return typeof it == 'symbol';\n} : function (it) {\n  var $Symbol = getBuiltIn('Symbol');\n  return isCallable($Symbol) && isPrototypeOf($Symbol.prototype, $Object(it));\n};\n","'use strict';\nvar global = require('../internals/global');\nvar isCallable = require('../internals/is-callable');\n\nvar aFunction = function (argument) {\n  return isCallable(argument) ? argument : undefined;\n};\n\nmodule.exports = function (namespace, method) {\n  return arguments.length < 2 ? aFunction(global[namespace]) : global[namespace] && global[namespace][method];\n};\n","'use strict';\nvar uncurryThis = require('../internals/function-uncurry-this');\n\nmodule.exports = uncurryThis({}.isPrototypeOf);\n","'use strict';\n/* eslint-disable es/no-symbol -- required for testing */\nvar NATIVE_SYMBOL = require('../internals/symbol-constructor-detection');\n\nmodule.exports = NATIVE_SYMBOL\n  && !Symbol.sham\n  && typeof Symbol.iterator == 'symbol';\n","'use strict';\n/* eslint-disable es/no-symbol -- required for testing */\nvar V8_VERSION = require('../internals/engine-v8-version');\nvar fails = require('../internals/fails');\nvar global = require('../internals/global');\n\nvar $String = global.String;\n\n// eslint-disable-next-line es/no-object-getownpropertysymbols -- required for testing\nmodule.exports = !!Object.getOwnPropertySymbols && !fails(function () {\n  var symbol = Symbol('symbol detection');\n  // Chrome 38 Symbol has incorrect toString conversion\n  // `get-own-property-symbols` polyfill symbols converted to object are not Symbol instances\n  // nb: Do not call `String` directly to avoid this being optimized out to `symbol+''` which will,\n  // of course, fail.\n  return !$String(symbol) || !(Object(symbol) instanceof Symbol) ||\n    // Chrome 38-40 symbols are not inherited from DOM collections prototypes to instances\n    !Symbol.sham && V8_VERSION && V8_VERSION < 41;\n});\n","'use strict';\nvar global = require('../internals/global');\nvar userAgent = require('../internals/engine-user-agent');\n\nvar process = global.process;\nvar Deno = global.Deno;\nvar versions = process && process.versions || Deno && Deno.version;\nvar v8 = versions && versions.v8;\nvar match, version;\n\nif (v8) {\n  match = v8.split('.');\n  // in old Chrome, versions of V8 isn't V8 = Chrome / 10\n  // but their correct versions are not interesting for us\n  version = match[0] > 0 && match[0] < 4 ? 1 : +(match[0] + match[1]);\n}\n\n// BrowserFS NodeJS `process` polyfill incorrectly set `.v8` to `0.0`\n// so check `userAgent` even if `.v8` exists, but 0\nif (!version && userAgent) {\n  match = userAgent.match(/Edge\\/(\\d+)/);\n  if (!match || match[1] >= 74) {\n    match = userAgent.match(/Chrome\\/(\\d+)/);\n    if (match) version = +match[1];\n  }\n}\n\nmodule.exports = version;\n","'use strict';\nmodule.exports = typeof navigator != 'undefined' && String(navigator.userAgent) || '';\n","'use strict';\nvar aCallable = require('../internals/a-callable');\nvar isNullOrUndefined = require('../internals/is-null-or-undefined');\n\n// `GetMethod` abstract operation\n// https://tc39.es/ecma262/#sec-getmethod\nmodule.exports = function (V, P) {\n  var func = V[P];\n  return isNullOrUndefined(func) ? undefined : aCallable(func);\n};\n","'use strict';\nvar isCallable = require('../internals/is-callable');\nvar tryToString = require('../internals/try-to-string');\n\nvar $TypeError = TypeError;\n\n// `Assert: IsCallable(argument) is true`\nmodule.exports = function (argument) {\n  if (isCallable(argument)) return argument;\n  throw new $TypeError(tryToString(argument) + ' is not a function');\n};\n","'use strict';\nvar $String = String;\n\nmodule.exports = function (argument) {\n  try {\n    return $String(argument);\n  } catch (error) {\n    return 'Object';\n  }\n};\n","'use strict';\nvar call = require('../internals/function-call');\nvar isCallable = require('../internals/is-callable');\nvar isObject = require('../internals/is-object');\n\nvar $TypeError = TypeError;\n\n// `OrdinaryToPrimitive` abstract operation\n// https://tc39.es/ecma262/#sec-ordinarytoprimitive\nmodule.exports = function (input, pref) {\n  var fn, val;\n  if (pref === 'string' && isCallable(fn = input.toString) && !isObject(val = call(fn, input))) return val;\n  if (isCallable(fn = input.valueOf) && !isObject(val = call(fn, input))) return val;\n  if (pref !== 'string' && isCallable(fn = input.toString) && !isObject(val = call(fn, input))) return val;\n  throw new $TypeError(\"Can't convert object to primitive value\");\n};\n","'use strict';\nvar global = require('../internals/global');\nvar shared = require('../internals/shared');\nvar hasOwn = require('../internals/has-own-property');\nvar uid = require('../internals/uid');\nvar NATIVE_SYMBOL = require('../internals/symbol-constructor-detection');\nvar USE_SYMBOL_AS_UID = require('../internals/use-symbol-as-uid');\n\nvar Symbol = global.Symbol;\nvar WellKnownSymbolsStore = shared('wks');\nvar createWellKnownSymbol = USE_SYMBOL_AS_UID ? Symbol['for'] || Symbol : Symbol && Symbol.withoutSetter || uid;\n\nmodule.exports = function (name) {\n  if (!hasOwn(WellKnownSymbolsStore, name)) {\n    WellKnownSymbolsStore[name] = NATIVE_SYMBOL && hasOwn(Symbol, name)\n      ? Symbol[name]\n      : createWellKnownSymbol('Symbol.' + name);\n  } return WellKnownSymbolsStore[name];\n};\n","'use strict';\nvar store = require('../internals/shared-store');\n\nmodule.exports = function (key, value) {\n  return store[key] || (store[key] = value || {});\n};\n","'use strict';\nvar IS_PURE = require('../internals/is-pure');\nvar globalThis = require('../internals/global');\nvar defineGlobalProperty = require('../internals/define-global-property');\n\nvar SHARED = '__core-js_shared__';\nvar store = module.exports = globalThis[SHARED] || defineGlobalProperty(SHARED, {});\n\n(store.versions || (store.versions = [])).push({\n  version: '3.36.1',\n  mode: IS_PURE ? 'pure' : 'global',\n  copyright: '© 2014-2024 Denis Pushkarev (zloirock.ru)',\n  license: 'https://github.com/zloirock/core-js/blob/v3.36.1/LICENSE',\n  source: 'https://github.com/zloirock/core-js'\n});\n","'use strict';\nmodule.exports = false;\n","'use strict';\nvar global = require('../internals/global');\n\n// eslint-disable-next-line es/no-object-defineproperty -- safe\nvar defineProperty = Object.defineProperty;\n\nmodule.exports = function (key, value) {\n  try {\n    defineProperty(global, key, { value: value, configurable: true, writable: true });\n  } catch (error) {\n    global[key] = value;\n  } return value;\n};\n","'use strict';\nvar uncurryThis = require('../internals/function-uncurry-this');\nvar toObject = require('../internals/to-object');\n\nvar hasOwnProperty = uncurryThis({}.hasOwnProperty);\n\n// `HasOwnProperty` abstract operation\n// https://tc39.es/ecma262/#sec-hasownproperty\n// eslint-disable-next-line es/no-object-hasown -- safe\nmodule.exports = Object.hasOwn || function hasOwn(it, key) {\n  return hasOwnProperty(toObject(it), key);\n};\n","'use strict';\nvar requireObjectCoercible = require('../internals/require-object-coercible');\n\nvar $Object = Object;\n\n// `ToObject` abstract operation\n// https://tc39.es/ecma262/#sec-toobject\nmodule.exports = function (argument) {\n  return $Object(requireObjectCoercible(argument));\n};\n","'use strict';\nvar uncurryThis = require('../internals/function-uncurry-this');\n\nvar id = 0;\nvar postfix = Math.random();\nvar toString = uncurryThis(1.0.toString);\n\nmodule.exports = function (key) {\n  return 'Symbol(' + (key === undefined ? '' : key) + ')_' + toString(++id + postfix, 36);\n};\n","'use strict';\nvar DESCRIPTORS = require('../internals/descriptors');\nvar fails = require('../internals/fails');\nvar createElement = require('../internals/document-create-element');\n\n// Thanks to IE8 for its funny defineProperty\nmodule.exports = !DESCRIPTORS && !fails(function () {\n  // eslint-disable-next-line es/no-object-defineproperty -- required for testing\n  return Object.defineProperty(createElement('div'), 'a', {\n    get: function () { return 7; }\n  }).a !== 7;\n});\n","'use strict';\nvar global = require('../internals/global');\nvar isObject = require('../internals/is-object');\n\nvar document = global.document;\n// typeof document.createElement is 'object' in old IE\nvar EXISTS = isObject(document) && isObject(document.createElement);\n\nmodule.exports = function (it) {\n  return EXISTS ? document.createElement(it) : {};\n};\n","'use strict';\nvar DESCRIPTORS = require('../internals/descriptors');\nvar definePropertyModule = require('../internals/object-define-property');\nvar createPropertyDescriptor = require('../internals/create-property-descriptor');\n\nmodule.exports = DESCRIPTORS ? function (object, key, value) {\n  return definePropertyModule.f(object, key, createPropertyDescriptor(1, value));\n} : function (object, key, value) {\n  object[key] = value;\n  return object;\n};\n","'use strict';\nvar DESCRIPTORS = require('../internals/descriptors');\nvar IE8_DOM_DEFINE = require('../internals/ie8-dom-define');\nvar V8_PROTOTYPE_DEFINE_BUG = require('../internals/v8-prototype-define-bug');\nvar anObject = require('../internals/an-object');\nvar toPropertyKey = require('../internals/to-property-key');\n\nvar $TypeError = TypeError;\n// eslint-disable-next-line es/no-object-defineproperty -- safe\nvar $defineProperty = Object.defineProperty;\n// eslint-disable-next-line es/no-object-getownpropertydescriptor -- safe\nvar $getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;\nvar ENUMERABLE = 'enumerable';\nvar CONFIGURABLE = 'configurable';\nvar WRITABLE = 'writable';\n\n// `Object.defineProperty` method\n// https://tc39.es/ecma262/#sec-object.defineproperty\nexports.f = DESCRIPTORS ? V8_PROTOTYPE_DEFINE_BUG ? function defineProperty(O, P, Attributes) {\n  anObject(O);\n  P = toPropertyKey(P);\n  anObject(Attributes);\n  if (typeof O === 'function' && P === 'prototype' && 'value' in Attributes && WRITABLE in Attributes && !Attributes[WRITABLE]) {\n    var current = $getOwnPropertyDescriptor(O, P);\n    if (current && current[WRITABLE]) {\n      O[P] = Attributes.value;\n      Attributes = {\n        configurable: CONFIGURABLE in Attributes ? Attributes[CONFIGURABLE] : current[CONFIGURABLE],\n        enumerable: ENUMERABLE in Attributes ? Attributes[ENUMERABLE] : current[ENUMERABLE],\n        writable: false\n      };\n    }\n  } return $defineProperty(O, P, Attributes);\n} : $defineProperty : function defineProperty(O, P, Attributes) {\n  anObject(O);\n  P = toPropertyKey(P);\n  anObject(Attributes);\n  if (IE8_DOM_DEFINE) try {\n    return $defineProperty(O, P, Attributes);\n  } catch (error) { /* empty */ }\n  if ('get' in Attributes || 'set' in Attributes) throw new $TypeError('Accessors not supported');\n  if ('value' in Attributes) O[P] = Attributes.value;\n  return O;\n};\n","'use strict';\nvar DESCRIPTORS = require('../internals/descriptors');\nvar fails = require('../internals/fails');\n\n// V8 ~ Chrome 36-\n// https://bugs.chromium.org/p/v8/issues/detail?id=3334\nmodule.exports = DESCRIPTORS && fails(function () {\n  // eslint-disable-next-line es/no-object-defineproperty -- required for testing\n  return Object.defineProperty(function () { /* empty */ }, 'prototype', {\n    value: 42,\n    writable: false\n  }).prototype !== 42;\n});\n","'use strict';\nvar isObject = require('../internals/is-object');\n\nvar $String = String;\nvar $TypeError = TypeError;\n\n// `Assert: Type(argument) is Object`\nmodule.exports = function (argument) {\n  if (isObject(argument)) return argument;\n  throw new $TypeError($String(argument) + ' is not an object');\n};\n","'use strict';\nvar isCallable = require('../internals/is-callable');\nvar definePropertyModule = require('../internals/object-define-property');\nvar makeBuiltIn = require('../internals/make-built-in');\nvar defineGlobalProperty = require('../internals/define-global-property');\n\nmodule.exports = function (O, key, value, options) {\n  if (!options) options = {};\n  var simple = options.enumerable;\n  var name = options.name !== undefined ? options.name : key;\n  if (isCallable(value)) makeBuiltIn(value, name, options);\n  if (options.global) {\n    if (simple) O[key] = value;\n    else defineGlobalProperty(key, value);\n  } else {\n    try {\n      if (!options.unsafe) delete O[key];\n      else if (O[key]) simple = true;\n    } catch (error) { /* empty */ }\n    if (simple) O[key] = value;\n    else definePropertyModule.f(O, key, {\n      value: value,\n      enumerable: false,\n      configurable: !options.nonConfigurable,\n      writable: !options.nonWritable\n    });\n  } return O;\n};\n","'use strict';\nvar uncurryThis = require('../internals/function-uncurry-this');\nvar fails = require('../internals/fails');\nvar isCallable = require('../internals/is-callable');\nvar hasOwn = require('../internals/has-own-property');\nvar DESCRIPTORS = require('../internals/descriptors');\nvar CONFIGURABLE_FUNCTION_NAME = require('../internals/function-name').CONFIGURABLE;\nvar inspectSource = require('../internals/inspect-source');\nvar InternalStateModule = require('../internals/internal-state');\n\nvar enforceInternalState = InternalStateModule.enforce;\nvar getInternalState = InternalStateModule.get;\nvar $String = String;\n// eslint-disable-next-line es/no-object-defineproperty -- safe\nvar defineProperty = Object.defineProperty;\nvar stringSlice = uncurryThis(''.slice);\nvar replace = uncurryThis(''.replace);\nvar join = uncurryThis([].join);\n\nvar CONFIGURABLE_LENGTH = DESCRIPTORS && !fails(function () {\n  return defineProperty(function () { /* empty */ }, 'length', { value: 8 }).length !== 8;\n});\n\nvar TEMPLATE = String(String).split('String');\n\nvar makeBuiltIn = module.exports = function (value, name, options) {\n  if (stringSlice($String(name), 0, 7) === 'Symbol(') {\n    name = '[' + replace($String(name), /^Symbol\\(([^)]*)\\).*$/, '$1') + ']';\n  }\n  if (options && options.getter) name = 'get ' + name;\n  if (options && options.setter) name = 'set ' + name;\n  if (!hasOwn(value, 'name') || (CONFIGURABLE_FUNCTION_NAME && value.name !== name)) {\n    if (DESCRIPTORS) defineProperty(value, 'name', { value: name, configurable: true });\n    else value.name = name;\n  }\n  if (CONFIGURABLE_LENGTH && options && hasOwn(options, 'arity') && value.length !== options.arity) {\n    defineProperty(value, 'length', { value: options.arity });\n  }\n  try {\n    if (options && hasOwn(options, 'constructor') && options.constructor) {\n      if (DESCRIPTORS) defineProperty(value, 'prototype', { writable: false });\n    // in V8 ~ Chrome 53, prototypes of some methods, like `Array.prototype.values`, are non-writable\n    } else if (value.prototype) value.prototype = undefined;\n  } catch (error) { /* empty */ }\n  var state = enforceInternalState(value);\n  if (!hasOwn(state, 'source')) {\n    state.source = join(TEMPLATE, typeof name == 'string' ? name : '');\n  } return value;\n};\n\n// add fake Function#toString for correct work wrapped methods / constructors with methods like LoDash isNative\n// eslint-disable-next-line no-extend-native -- required\nFunction.prototype.toString = makeBuiltIn(function toString() {\n  return isCallable(this) && getInternalState(this).source || inspectSource(this);\n}, 'toString');\n","'use strict';\nvar DESCRIPTORS = require('../internals/descriptors');\nvar hasOwn = require('../internals/has-own-property');\n\nvar FunctionPrototype = Function.prototype;\n// eslint-disable-next-line es/no-object-getownpropertydescriptor -- safe\nvar getDescriptor = DESCRIPTORS && Object.getOwnPropertyDescriptor;\n\nvar EXISTS = hasOwn(FunctionPrototype, 'name');\n// additional protection from minified / mangled / dropped function names\nvar PROPER = EXISTS && (function something() { /* empty */ }).name === 'something';\nvar CONFIGURABLE = EXISTS && (!DESCRIPTORS || (DESCRIPTORS && getDescriptor(FunctionPrototype, 'name').configurable));\n\nmodule.exports = {\n  EXISTS: EXISTS,\n  PROPER: PROPER,\n  CONFIGURABLE: CONFIGURABLE\n};\n","'use strict';\nvar uncurryThis = require('../internals/function-uncurry-this');\nvar isCallable = require('../internals/is-callable');\nvar store = require('../internals/shared-store');\n\nvar functionToString = uncurryThis(Function.toString);\n\n// this helper broken in `core-js@3.4.1-3.4.4`, so we can't use `shared` helper\nif (!isCallable(store.inspectSource)) {\n  store.inspectSource = function (it) {\n    return functionToString(it);\n  };\n}\n\nmodule.exports = store.inspectSource;\n","'use strict';\nvar NATIVE_WEAK_MAP = require('../internals/weak-map-basic-detection');\nvar global = require('../internals/global');\nvar isObject = require('../internals/is-object');\nvar createNonEnumerableProperty = require('../internals/create-non-enumerable-property');\nvar hasOwn = require('../internals/has-own-property');\nvar shared = require('../internals/shared-store');\nvar sharedKey = require('../internals/shared-key');\nvar hiddenKeys = require('../internals/hidden-keys');\n\nvar OBJECT_ALREADY_INITIALIZED = 'Object already initialized';\nvar TypeError = global.TypeError;\nvar WeakMap = global.WeakMap;\nvar set, get, has;\n\nvar enforce = function (it) {\n  return has(it) ? get(it) : set(it, {});\n};\n\nvar getterFor = function (TYPE) {\n  return function (it) {\n    var state;\n    if (!isObject(it) || (state = get(it)).type !== TYPE) {\n      throw new TypeError('Incompatible receiver, ' + TYPE + ' required');\n    } return state;\n  };\n};\n\nif (NATIVE_WEAK_MAP || shared.state) {\n  var store = shared.state || (shared.state = new WeakMap());\n  /* eslint-disable no-self-assign -- prototype methods protection */\n  store.get = store.get;\n  store.has = store.has;\n  store.set = store.set;\n  /* eslint-enable no-self-assign -- prototype methods protection */\n  set = function (it, metadata) {\n    if (store.has(it)) throw new TypeError(OBJECT_ALREADY_INITIALIZED);\n    metadata.facade = it;\n    store.set(it, metadata);\n    return metadata;\n  };\n  get = function (it) {\n    return store.get(it) || {};\n  };\n  has = function (it) {\n    return store.has(it);\n  };\n} else {\n  var STATE = sharedKey('state');\n  hiddenKeys[STATE] = true;\n  set = function (it, metadata) {\n    if (hasOwn(it, STATE)) throw new TypeError(OBJECT_ALREADY_INITIALIZED);\n    metadata.facade = it;\n    createNonEnumerableProperty(it, STATE, metadata);\n    return metadata;\n  };\n  get = function (it) {\n    return hasOwn(it, STATE) ? it[STATE] : {};\n  };\n  has = function (it) {\n    return hasOwn(it, STATE);\n  };\n}\n\nmodule.exports = {\n  set: set,\n  get: get,\n  has: has,\n  enforce: enforce,\n  getterFor: getterFor\n};\n","'use strict';\nvar global = require('../internals/global');\nvar isCallable = require('../internals/is-callable');\n\nvar WeakMap = global.WeakMap;\n\nmodule.exports = isCallable(WeakMap) && /native code/.test(String(WeakMap));\n","'use strict';\nvar shared = require('../internals/shared');\nvar uid = require('../internals/uid');\n\nvar keys = shared('keys');\n\nmodule.exports = function (key) {\n  return keys[key] || (keys[key] = uid(key));\n};\n","'use strict';\nmodule.exports = {};\n","'use strict';\nvar hasOwn = require('../internals/has-own-property');\nvar ownKeys = require('../internals/own-keys');\nvar getOwnPropertyDescriptorModule = require('../internals/object-get-own-property-descriptor');\nvar definePropertyModule = require('../internals/object-define-property');\n\nmodule.exports = function (target, source, exceptions) {\n  var keys = ownKeys(source);\n  var defineProperty = definePropertyModule.f;\n  var getOwnPropertyDescriptor = getOwnPropertyDescriptorModule.f;\n  for (var i = 0; i < keys.length; i++) {\n    var key = keys[i];\n    if (!hasOwn(target, key) && !(exceptions && hasOwn(exceptions, key))) {\n      defineProperty(target, key, getOwnPropertyDescriptor(source, key));\n    }\n  }\n};\n","'use strict';\nvar getBuiltIn = require('../internals/get-built-in');\nvar uncurryThis = require('../internals/function-uncurry-this');\nvar getOwnPropertyNamesModule = require('../internals/object-get-own-property-names');\nvar getOwnPropertySymbolsModule = require('../internals/object-get-own-property-symbols');\nvar anObject = require('../internals/an-object');\n\nvar concat = uncurryThis([].concat);\n\n// all object keys, includes non-enumerable and symbols\nmodule.exports = getBuiltIn('Reflect', 'ownKeys') || function ownKeys(it) {\n  var keys = getOwnPropertyNamesModule.f(anObject(it));\n  var getOwnPropertySymbols = getOwnPropertySymbolsModule.f;\n  return getOwnPropertySymbols ? concat(keys, getOwnPropertySymbols(it)) : keys;\n};\n","'use strict';\nvar internalObjectKeys = require('../internals/object-keys-internal');\nvar enumBugKeys = require('../internals/enum-bug-keys');\n\nvar hiddenKeys = enumBugKeys.concat('length', 'prototype');\n\n// `Object.getOwnPropertyNames` method\n// https://tc39.es/ecma262/#sec-object.getownpropertynames\n// eslint-disable-next-line es/no-object-getownpropertynames -- safe\nexports.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {\n  return internalObjectKeys(O, hiddenKeys);\n};\n","'use strict';\nvar uncurryThis = require('../internals/function-uncurry-this');\nvar hasOwn = require('../internals/has-own-property');\nvar toIndexedObject = require('../internals/to-indexed-object');\nvar indexOf = require('../internals/array-includes').indexOf;\nvar hiddenKeys = require('../internals/hidden-keys');\n\nvar push = uncurryThis([].push);\n\nmodule.exports = function (object, names) {\n  var O = toIndexedObject(object);\n  var i = 0;\n  var result = [];\n  var key;\n  for (key in O) !hasOwn(hiddenKeys, key) && hasOwn(O, key) && push(result, key);\n  // Don't enum bug & hidden keys\n  while (names.length > i) if (hasOwn(O, key = names[i++])) {\n    ~indexOf(result, key) || push(result, key);\n  }\n  return result;\n};\n","'use strict';\nvar toIndexedObject = require('../internals/to-indexed-object');\nvar toAbsoluteIndex = require('../internals/to-absolute-index');\nvar lengthOfArrayLike = require('../internals/length-of-array-like');\n\n// `Array.prototype.{ indexOf, includes }` methods implementation\nvar createMethod = function (IS_INCLUDES) {\n  return function ($this, el, fromIndex) {\n    var O = toIndexedObject($this);\n    var length = lengthOfArrayLike(O);\n    if (length === 0) return !IS_INCLUDES && -1;\n    var index = toAbsoluteIndex(fromIndex, length);\n    var value;\n    // Array#includes uses SameValueZero equality algorithm\n    // eslint-disable-next-line no-self-compare -- NaN check\n    if (IS_INCLUDES && el !== el) while (length > index) {\n      value = O[index++];\n      // eslint-disable-next-line no-self-compare -- NaN check\n      if (value !== value) return true;\n    // Array#indexOf ignores holes, Array#includes - not\n    } else for (;length > index; index++) {\n      if ((IS_INCLUDES || index in O) && O[index] === el) return IS_INCLUDES || index || 0;\n    } return !IS_INCLUDES && -1;\n  };\n};\n\nmodule.exports = {\n  // `Array.prototype.includes` method\n  // https://tc39.es/ecma262/#sec-array.prototype.includes\n  includes: createMethod(true),\n  // `Array.prototype.indexOf` method\n  // https://tc39.es/ecma262/#sec-array.prototype.indexof\n  indexOf: createMethod(false)\n};\n","'use strict';\nvar toIntegerOrInfinity = require('../internals/to-integer-or-infinity');\n\nvar max = Math.max;\nvar min = Math.min;\n\n// Helper for a popular repeating case of the spec:\n// Let integer be ? ToInteger(index).\n// If integer < 0, let result be max((length + integer), 0); else let result be min(integer, length).\nmodule.exports = function (index, length) {\n  var integer = toIntegerOrInfinity(index);\n  return integer < 0 ? max(integer + length, 0) : min(integer, length);\n};\n","'use strict';\nvar trunc = require('../internals/math-trunc');\n\n// `ToIntegerOrInfinity` abstract operation\n// https://tc39.es/ecma262/#sec-tointegerorinfinity\nmodule.exports = function (argument) {\n  var number = +argument;\n  // eslint-disable-next-line no-self-compare -- NaN check\n  return number !== number || number === 0 ? 0 : trunc(number);\n};\n","'use strict';\nvar ceil = Math.ceil;\nvar floor = Math.floor;\n\n// `Math.trunc` method\n// https://tc39.es/ecma262/#sec-math.trunc\n// eslint-disable-next-line es/no-math-trunc -- safe\nmodule.exports = Math.trunc || function trunc(x) {\n  var n = +x;\n  return (n > 0 ? floor : ceil)(n);\n};\n","'use strict';\nvar toLength = require('../internals/to-length');\n\n// `LengthOfArrayLike` abstract operation\n// https://tc39.es/ecma262/#sec-lengthofarraylike\nmodule.exports = function (obj) {\n  return toLength(obj.length);\n};\n","'use strict';\nvar toIntegerOrInfinity = require('../internals/to-integer-or-infinity');\n\nvar min = Math.min;\n\n// `ToLength` abstract operation\n// https://tc39.es/ecma262/#sec-tolength\nmodule.exports = function (argument) {\n  var len = toIntegerOrInfinity(argument);\n  return len > 0 ? min(len, 0x1FFFFFFFFFFFFF) : 0; // 2 ** 53 - 1 == 9007199254740991\n};\n","'use strict';\n// IE8- don't enum bug keys\nmodule.exports = [\n  'constructor',\n  'hasOwnProperty',\n  'isPrototypeOf',\n  'propertyIsEnumerable',\n  'toLocaleString',\n  'toString',\n  'valueOf'\n];\n","'use strict';\n// eslint-disable-next-line es/no-object-getownpropertysymbols -- safe\nexports.f = Object.getOwnPropertySymbols;\n","'use strict';\nvar fails = require('../internals/fails');\nvar isCallable = require('../internals/is-callable');\n\nvar replacement = /#|\\.prototype\\./;\n\nvar isForced = function (feature, detection) {\n  var value = data[normalize(feature)];\n  return value === POLYFILL ? true\n    : value === NATIVE ? false\n    : isCallable(detection) ? fails(detection)\n    : !!detection;\n};\n\nvar normalize = isForced.normalize = function (string) {\n  return String(string).replace(replacement, '.').toLowerCase();\n};\n\nvar data = isForced.data = {};\nvar NATIVE = isForced.NATIVE = 'N';\nvar POLYFILL = isForced.POLYFILL = 'P';\n\nmodule.exports = isForced;\n","'use strict';\nvar global = require('../internals/global');\nvar apply = require('../internals/function-apply');\nvar bind = require('../internals/function-bind-context');\nvar isCallable = require('../internals/is-callable');\nvar hasOwn = require('../internals/has-own-property');\nvar fails = require('../internals/fails');\nvar html = require('../internals/html');\nvar arraySlice = require('../internals/array-slice');\nvar createElement = require('../internals/document-create-element');\nvar validateArgumentsLength = require('../internals/validate-arguments-length');\nvar IS_IOS = require('../internals/engine-is-ios');\nvar IS_NODE = require('../internals/engine-is-node');\n\nvar set = global.setImmediate;\nvar clear = global.clearImmediate;\nvar process = global.process;\nvar Dispatch = global.Dispatch;\nvar Function = global.Function;\nvar MessageChannel = global.MessageChannel;\nvar String = global.String;\nvar counter = 0;\nvar queue = {};\nvar ONREADYSTATECHANGE = 'onreadystatechange';\nvar $location, defer, channel, port;\n\nfails(function () {\n  // Deno throws a ReferenceError on `location` access without `--location` flag\n  $location = global.location;\n});\n\nvar run = function (id) {\n  if (hasOwn(queue, id)) {\n    var fn = queue[id];\n    delete queue[id];\n    fn();\n  }\n};\n\nvar runner = function (id) {\n  return function () {\n    run(id);\n  };\n};\n\nvar eventListener = function (event) {\n  run(event.data);\n};\n\nvar globalPostMessageDefer = function (id) {\n  // old engines have not location.origin\n  global.postMessage(String(id), $location.protocol + '//' + $location.host);\n};\n\n// Node.js 0.9+ & IE10+ has setImmediate, otherwise:\nif (!set || !clear) {\n  set = function setImmediate(handler) {\n    validateArgumentsLength(arguments.length, 1);\n    var fn = isCallable(handler) ? handler : Function(handler);\n    var args = arraySlice(arguments, 1);\n    queue[++counter] = function () {\n      apply(fn, undefined, args);\n    };\n    defer(counter);\n    return counter;\n  };\n  clear = function clearImmediate(id) {\n    delete queue[id];\n  };\n  // Node.js 0.8-\n  if (IS_NODE) {\n    defer = function (id) {\n      process.nextTick(runner(id));\n    };\n  // Sphere (JS game engine) Dispatch API\n  } else if (Dispatch && Dispatch.now) {\n    defer = function (id) {\n      Dispatch.now(runner(id));\n    };\n  // Browsers with MessageChannel, includes WebWorkers\n  // except iOS - https://github.com/zloirock/core-js/issues/624\n  } else if (MessageChannel && !IS_IOS) {\n    channel = new MessageChannel();\n    port = channel.port2;\n    channel.port1.onmessage = eventListener;\n    defer = bind(port.postMessage, port);\n  // Browsers with postMessage, skip WebWorkers\n  // IE8 has postMessage, but it's sync & typeof its postMessage is 'object'\n  } else if (\n    global.addEventListener &&\n    isCallable(global.postMessage) &&\n    !global.importScripts &&\n    $location && $location.protocol !== 'file:' &&\n    !fails(globalPostMessageDefer)\n  ) {\n    defer = globalPostMessageDefer;\n    global.addEventListener('message', eventListener, false);\n  // IE8-\n  } else if (ONREADYSTATECHANGE in createElement('script')) {\n    defer = function (id) {\n      html.appendChild(createElement('script'))[ONREADYSTATECHANGE] = function () {\n        html.removeChild(this);\n        run(id);\n      };\n    };\n  // Rest old browsers\n  } else {\n    defer = function (id) {\n      setTimeout(runner(id), 0);\n    };\n  }\n}\n\nmodule.exports = {\n  set: set,\n  clear: clear\n};\n","'use strict';\nvar NATIVE_BIND = require('../internals/function-bind-native');\n\nvar FunctionPrototype = Function.prototype;\nvar apply = FunctionPrototype.apply;\nvar call = FunctionPrototype.call;\n\n// eslint-disable-next-line es/no-reflect -- safe\nmodule.exports = typeof Reflect == 'object' && Reflect.apply || (NATIVE_BIND ? call.bind(apply) : function () {\n  return call.apply(apply, arguments);\n});\n","'use strict';\nvar uncurryThis = require('../internals/function-uncurry-this-clause');\nvar aCallable = require('../internals/a-callable');\nvar NATIVE_BIND = require('../internals/function-bind-native');\n\nvar bind = uncurryThis(uncurryThis.bind);\n\n// optional / simple context binding\nmodule.exports = function (fn, that) {\n  aCallable(fn);\n  return that === undefined ? fn : NATIVE_BIND ? bind(fn, that) : function (/* ...args */) {\n    return fn.apply(that, arguments);\n  };\n};\n","'use strict';\nvar classofRaw = require('../internals/classof-raw');\nvar uncurryThis = require('../internals/function-uncurry-this');\n\nmodule.exports = function (fn) {\n  // Nashorn bug:\n  //   https://github.com/zloirock/core-js/issues/1128\n  //   https://github.com/zloirock/core-js/issues/1130\n  if (classofRaw(fn) === 'Function') return uncurryThis(fn);\n};\n","'use strict';\nvar getBuiltIn = require('../internals/get-built-in');\n\nmodule.exports = getBuiltIn('document', 'documentElement');\n","'use strict';\nvar uncurryThis = require('../internals/function-uncurry-this');\n\nmodule.exports = uncurryThis([].slice);\n","'use strict';\nvar $TypeError = TypeError;\n\nmodule.exports = function (passed, required) {\n  if (passed < required) throw new $TypeError('Not enough arguments');\n  return passed;\n};\n","'use strict';\nvar userAgent = require('../internals/engine-user-agent');\n\n// eslint-disable-next-line redos/no-vulnerable -- safe\nmodule.exports = /(?:ipad|iphone|ipod).*applewebkit/i.test(userAgent);\n","'use strict';\nvar global = require('../internals/global');\nvar classof = require('../internals/classof-raw');\n\nmodule.exports = classof(global.process) === 'process';\n","'use strict';\nvar $ = require('../internals/export');\nvar global = require('../internals/global');\nvar setTask = require('../internals/task').set;\nvar schedulersFix = require('../internals/schedulers-fix');\n\n// https://github.com/oven-sh/bun/issues/1633\nvar setImmediate = global.setImmediate ? schedulersFix(setTask, false) : setTask;\n\n// `setImmediate` method\n// http://w3c.github.io/setImmediate/#si-setImmediate\n$({ global: true, bind: true, enumerable: true, forced: global.setImmediate !== setImmediate }, {\n  setImmediate: setImmediate\n});\n","'use strict';\nvar global = require('../internals/global');\nvar apply = require('../internals/function-apply');\nvar isCallable = require('../internals/is-callable');\nvar ENGINE_IS_BUN = require('../internals/engine-is-bun');\nvar USER_AGENT = require('../internals/engine-user-agent');\nvar arraySlice = require('../internals/array-slice');\nvar validateArgumentsLength = require('../internals/validate-arguments-length');\n\nvar Function = global.Function;\n// dirty IE9- and Bun 0.3.0- checks\nvar WRAP = /MSIE .\\./.test(USER_AGENT) || ENGINE_IS_BUN && (function () {\n  var version = global.Bun.version.split('.');\n  return version.length < 3 || version[0] === '0' && (version[1] < 3 || version[1] === '3' && version[2] === '0');\n})();\n\n// IE9- / Bun 0.3.0- setTimeout / setInterval / setImmediate additional parameters fix\n// https://html.spec.whatwg.org/multipage/timers-and-user-prompts.html#timers\n// https://github.com/oven-sh/bun/issues/1633\nmodule.exports = function (scheduler, hasTimeArg) {\n  var firstParamIndex = hasTimeArg ? 2 : 1;\n  return WRAP ? function (handler, timeout /* , ...arguments */) {\n    var boundArgs = validateArgumentsLength(arguments.length, 1) > firstParamIndex;\n    var fn = isCallable(handler) ? handler : Function(handler);\n    var params = boundArgs ? arraySlice(arguments, firstParamIndex) : [];\n    var callback = boundArgs ? function () {\n      apply(fn, this, params);\n    } : fn;\n    return hasTimeArg ? scheduler(callback, timeout) : scheduler(callback);\n  } : scheduler;\n};\n","'use strict';\n/* global Bun -- Bun case */\nmodule.exports = typeof Bun == 'function' && Bun && typeof Bun.version == 'string';\n","//One big module for all the models\nimport { API_KEY, API_URL, RES_PER_PAGE } from './config';\nimport { AJAX } from './helpers';\n\n//State contains all of the data that we need to build our application\nexport const state = {\n  recipe: {},\n  search: {\n    query: '',\n    results: [],\n    page: 1, //set the page to 1 by default\n    resultsPerPage: RES_PER_PAGE,\n  },\n  bookmarks: [],\n};\n\n//Receive the recipe from the API and convert it into our own object that we'll use throughout our application, where we'll have the property names match ours.\nconst createRecipeObject = function (data) {\n  const { recipe } = data.data;\n\n  return {\n    id: recipe.id,\n    title: recipe.title,\n    publisher: recipe.publisher,\n    sourceUrl: recipe.source_url,\n    image: recipe.image_url,\n    servings: recipe.servings,\n    cookingTime: recipe.cooking_time,\n    ingredients: recipe.ingredients,\n    ...(recipe.key && { key: recipe.key }),\n    /* This way we only populate the key property if there already exists one. So, if recipe.key is a falsy value, then this operation short-circuits.\n    However, recipe.key is a truthy value (meaning it exists), then we create an object that has the key property tied to our recipe.key and return it. Lastly, we use the spread operator extract the enumerable data (key: recipe.key) out of the object.\n    Essentially, doing the same as key: recipe.key, only if recipe.key existed in the first place.\n\n    The && operator returns the first falsy value, or the last one (if the first one is truthy). In this case: recipe.key && {key: recipe.key}. We ask \"Does the recipe.key exists\"? If so, return this object {key: recipe.key}.\n    So, we're really destructuring this object {key: recipe.key} in another object\n    const recipe = {\n      id: 'some id',\n      ...{ key: 'some key' }\n    };\n    And, destructuring will just add the \"key\" property to the recipe object.\n    const recipe = {\n      id: 'some id',\n      key: 'some key'\n    }; \n    \n    When you upload a recipe, you also send your API key in the url:\n    const data = await sendJSON(`${API_URL}?search=${recipe.title}&key=${API_KEY}`, recipe);\n    When the API saves your recipe, it also includes that API key, so when you receive that recipe later, it returns your object which has that API key stored as a property (recipe.key).\n    So, only uploaded recipes will have this recipe.key property. \n    \n    Generally, when the spread syntax is used in an object, it looks for enumerable (iterable) properties and adds them to the original object (where the spread syntax was used).\n    It makes sense even for primitive types, like string or number because they have their object wrappers (that's why we can call methods on strings, numbers, booleans, etc.)\n    This doesn't apply to spreading values outside of objects because the spread syntax outside of an object requires the value be iterable, so things like arrays, maps, sets and strings can be spread because they are iterables,\n    but normal objects, numbers, boolean values, undefined and null can't be spread because they're not iterable.\n    \n    Ex of this being used: \n\n    Creating a shallow copy:\n    const originalObject = { a: 1, b: 2 };\n    const copiedObject = { ...originalObject };\n    console.log(copiedObject); // { a: 1, b: 2 }\n\n    Property Overriding:\n    const originalObject = { a: 1, b: 2 };\n    datedObject = { ...originalObject, b: 3 };\n    console.log(updatedObject); // { a: 1, b: 3 }\n\n    Merging Objects:\n    const object1 = { a: 1, b: 2 };\n    const object2 = { b: 3, c: 4 };\n    const mergedObject = { ...object1, ...object2 };\n    console.log(mergedObject); // { a: 1, b: 3, c: 4 }\n\n    Note that the spread operator works only with objects' own enumerable properties. It does not copy non-enumerable properties, methods, or inherited properties (it's only a shallow copy).\n    This meaning that the new object is not related to the original object in terms of memory address at all, we would be extracting the enumerable data out of the original object (first step using spread operator)\n    and populating them in an entirely new object, if we decide to (storing the results in a new object). */\n  };\n};\n//Fetch recipe data from Forkify API. This function will not return anything, it will change our state object which will contain the recipe property which the controller will have access to.\n//This works because the export and imports have a live connection between one another, so any changes in here will be reflected also inside of the controller which imports the state object\n//In this case, loadRecipe is not be a pure function due to this side effect, but for the sake of learning we will not overcomplicate things\nexport const loadRecipe = async function (id) {\n  try {\n    const data = await AJAX(`${API_URL}/${id}?key=${API_KEY}`);\n\n    //Let's create a new object based on our returned data object with more readable variable names. Basically, let's reformat our object.\n    // const recipe = data.data.recipe;\n    // const { recipe } = data.data; //destructuring because our variable name will be the same as the property name\n\n    //Currently recipe is linked to data.data.recipe, and now we are refactoring our property names. We are reassigning properties from an existing object (recipe) to a new object, which creates a new object that includes only the properties you specify.\n    //The pattern of newPropName: oldObject.oldPropName is particularly useful when you want to rename properties while transferring them to a new object.\n    //It may seem redundant when we're choosing the same name as the original property, but we still need to specify which properties we want our new object to have.\n    //This sets a clear structure for the new recipe object and can be easily extended for transformations, filtering, or renaming without affecting the original data structure.\n    //It also enhances the predictability and maintainability of the code, making it clearer what the expected properties of the recipe object are in the scope where it is used.\n\n    //You're constructing a completely new object. This new object is distinct from the original recipe object referenced earlier.\n    //Any modifications to this new object will not affect the original recipe object or data.data.recipe\n\n    //While creating this new object, you're still accessing the properties of the original recipe object.\n    //This is possible because in the expression that creates the new object, the right-hand side of each property assignment (e.g., recipe.id, recipe.title) evaluates first.\n    //During this evaluation, recipe still refers to the original object, allowing you to retrieve the existing values.\n\n    //Once the new object is created and initialized with values from the original recipe object, you assign this new object back to the recipe variable.\n    //At this point, recipe now points to the new object, and the link to the original object is replaced only in this local scope. The original object, data.data.recipe, remains unchanged elsewhere in your program.\n\n    //This approach is particularly useful when you want to ensure immutability or when you need to work with a subset of the properties from an object, possibly transforming or filtering them in the process.\n    //By reassigning recipe to a new object, you essentially \"decouple\" it from the original data structure, allowing safer manipulation without side effects on the original data, thereby promoting safer and more predictable code behavior, especially in larger, more complex applications.\n\n    // state.recipe = {\n    //   id: recipe.id,\n    //   title: recipe.title,\n    //   publisher: recipe.publisher,\n    //   sourceUrl: recipe.source_url,\n    //   image: recipe.image_url,\n    //   servings: recipe.servings,\n    //   cookingTime: recipe.cooking_time,\n    //   ingredients: recipe.ingredients,\n    // };\n\n    state.recipe = createRecipeObject(data); //We set the recipe that we just fetched from the API to our current recipe that we'll load onto our page\n\n    //if we have any element in our bookmarks array that has the same id as the current id that we're loading, then we want to mark the current recipe that we're loading as bookmarked for our view\n    if (state.bookmarks.some(bookmark => bookmark.id === id)) {\n      state.recipe.bookmarked = true;\n    }\n  } catch (err) {\n    throw err; //We need our controller to handle the error, so we throw this error back up\n  }\n};\n\nexport const loadSearchResults = async function (query) {\n  try {\n    //Store the query alongside the results in our state\n    state.search.query = query;\n\n    const data = await AJAX(`${API_URL}?search=${query}&key=${API_KEY}`); //we already have a parameter ('?'), so we use '&' for our key. Search and key.\n\n    //change property names for each object inside of our array of objects fetched from the API and we store this new array in our state\n    state.search.results = data.data.recipes.map(recipe => {\n      //Note that the objects maintain the same order, it just renames the properties to what you specify in here and stores those values.\n      //This new object only has the properties that we give it, it will not contain all properties of the object we're mapping to unless we assign all of them.\n      return {\n        id: recipe.id,\n        title: recipe.title,\n        publisher: recipe.publisher,\n        image: recipe.image_url,\n        ...(recipe.key && { key: recipe.key }), //In our search results, if any of the recipes in our current 'page' has the key property, then we want to make sure that this property is copied over so that the ResultsView knows to display our icon on that recipe, indicating that it's our own recipe.\n      };\n    });\n    state.search.page = 1; //When loading a new search result, we want to reset the page to 1\n  } catch (err) {\n    throw err;\n  }\n};\n\n//Reach into the state and get the data for the page being requested\n//By default we set the page to whatever is saved in our page property just in case we do not receive any arguments for this function.\n//Even if it's unlikely, we want to avoid running into any potential errors due to page being set to undefined from not having any argument passed in for it.\nexport const getSearchResultsPage = function (page = state.search.page) {\n  //Let's say for page 1, we want to receive results 0 to 9. And for page 2, results 10 to 19. And so on. Keep in mind that we want 10 results per page. And let's say for page 1 we named 0 as start and 9 as end.\n  //To calculate this, we take the page, subtract 1, and then multiply this value by the number of results we want on the page. And for the end, we simply do page * number of results\n  //So, page 1. Start = (1 - 1) * 10 = 0. End = 1 * 10 = 10. Page 2. Start = (2-1) * 10 = 10. End = 2 * 10 = 20. Page 3. Start = (3-1) * 10 = 20. End = 3 * 10 = 30.\n  //End would be where we are starting off from, we wouldn't need to add one because remember that the second parameter in slice is exclusive.\n\n  const start = (page - 1) * state.search.resultsPerPage;\n  const end = page * state.search.resultsPerPage;\n\n  //Let's save our page number\n  state.search.page = page;\n  return state.search.results.slice(start, end);\n};\n\n//To update the servings, we need to reach into our state and change the quantity of each of the recipe ingredients\nexport const updateServings = function (newServings) {\n  //We could use map to create a new array and override our current state.recipe.ingredients to the clone, but let's just mutate the underlying array.\n  //Our API gives us a quantity within each ingredient object within recipe.ingredients array, so this is what we want to modify\n  state.recipe.ingredients.forEach(ing => {\n    //The formula to calculate the new quantity for our new serving is newQuantity = (oldQuantity * newServings)/oldServings. For example, if we need 2 tablespoon of salt for 1 serving, and we increase the serving to 2 we calculate this by 1 * (2/1) = 2\n    //Multiplication of oldQuantity and newServings: Here, you are scaling the quantity of the ingredient directly in proportion to the increase in servings. If the number of servings doubles, the quantity of each ingredient also doubles.\n    //Division by oldServings: This step adjusts the scaled quantity to ensure it is in proportion to the original serving size. If your original recipe quantity was calculated for a certain number of servings, dividing by this number aligns the scaled quantity correctly. In this example, since the original servings (oldServings) is 1, dividing by 1 does not change the number.\n    //By dividing by the old serving size, you're adjusting the multiplication factor to reflect the base from which you are scaling up or down. This keeps the ingredient proportions exactly aligned with the increase or decrease in servings.\n    ing.quantity = (ing.quantity * newServings) / state.recipe.servings;\n  });\n\n  //Update the servings in the state. We do this at the end as we needed our oldServings to calculate the quantity of each ingredient for our newServings\n  state.recipe.servings = newServings;\n};\n\n//Persist bookmarks data across different page loads using local storage. We will want to update our localStorage everytime we add/remove a bookmark.\nconst persistBookmarks = function () {\n  localStorage.setItem('bookmarks', JSON.stringify(state.bookmarks));\n  //However, note that just because the data is stored in our localStorage that doesn't mean that we'll still have that persist in our bookmarks array.\n  //So, basically, when the page is loaded, we want to transfer the data stored in the localStorage, if there is any, to our bookmarks array and render it.\n  //We will write this logic in our init function.\n};\n\n/* Add a recipe that we want to bookmark (add into our bookmark array in our state) and mark it as bookmarked */\nexport const addBookmark = function (recipe) {\n  //Add bookmark\n  state.bookmarks.push(recipe);\n\n  //Mark current recipe as bookmarked. This will create the bookmarked property on state.recipe for us if it doesn't already exist.\n  //When evaluating this bookmarked property in the view (or anywhere else), if we haven't set this property to true yet then it will evaluate to undefined, which is a falsy value.\n  state.recipe.bookmarked = true;\n  persistBookmarks();\n};\n\n//When we add something, we receive the entire data to add the data. However, when we delete something, we only need the ID. We don't want to pass in unnecessary data as this will lower the runtime and efficiency of our function.\n//So, using only the ID, we will delete the recipe that has this ID from the bookmarks array\nexport const deleteBookmark = function (id) {\n  const index = state.bookmarks.findIndex(recipe => id === recipe.id); //find the element in the bookmarks array that has the same id as the passed in id\n\n  //JS passes by value, meaning if you pass in an object or a primitive value, actually trying to change what the identifier is pointing to will not persist. However, with objects, the properties of the object is passed by reference.\n  //So modifying the bookmarked property in this object inside of the bookmarked array will actually modify that property in the object.\n  //unlike primitive values, which are passed by value in JS meaning copies of the value are passed.\n  state.bookmarks[index].bookmarked = false; //set the bookmarked property to false for this recipe.\n  state.bookmarks.splice(index, 1); //remove this recipe from our bookmarked array. we only want to delete 1 element starting from this index\n\n  persistBookmarks();\n};\n\n//Once the page is initially loaded, we want to grab the data from localStorage, store it in our bookmarks array, and re-render this data. We will run this inside of our init() function.\nexport const restoreBookmarks = function () {\n  const storage = localStorage.getItem('bookmarks'); //We don't directly store this in our state as this data might not even be defined at all (undefined) if we haven't added or removed any bookmarks.\n  //We want to make sure that this is defined. We'll also make sure that if it's empty, then we'll just keep our initial empty array.\n  if (storage?.length > 0) state.bookmarks = JSON.parse(storage); //Parse converts the string back to an object, which we will store in our state\n};\n\n//Send our custom personal recipe to our API. This function will make a request to the API (so it will be async as we'll need to await this request).\nexport const uploadRecipe = async function (newRecipe) {\n  //First, we'll need to take the raw data that we've pulled from the form and transform it into the same format as the data that we grab out of the API.\n  //We notice that the ingredients property in our received data from the API is an array that stores an array of ingredient objects. However, from our form, we simply receive a string in the specified format to store this information.\n  //So, we're going to have to first convert this by taking our newRecipe object, extract the ingredients data, and store them in a new array.\n\n  //So, let's convert the object that contain the data that was passed into the form into an array\n\n  //Asynchronous functions in JavaScript return promises, and these promises can either resolve successfully or reject due to an error.\n  //When an async function throws an error, it returns a Promise that gets rejected with that error.\n\n  //A try-catch block allows you to catch errors that occur during the asynchronous operations performed within the async function\n  //We could have our higher-level function (controlAddRecipe) handle the error with our rejected Promise as the error thrown will propagate up naturally.\n  //However, we are going to utilize localized error handling rather than relying on higher-level handling as a design choice.\n  //We want to throw different personalized Error objects based on the error that rejects the Promise, which localized error handling is useful for.\n  try {\n    //First, we filter through the entries that are ingredients and have a value (entries are a key/value pair), and then we use map() to create an object storing the ingredients so that we could ultimately return our object into our newly created array\n    const ingredients = Object.entries(newRecipe)\n      .filter(\n        entry => {\n          // console.log(entry);\n          return entry[0].startsWith('ingredient-') && entry[1];\n        } //the key should start with 'ingredient-' and the value should not be an empty string. Ex: [ingredient-1, '1,gram,salt']\n      )\n      .map(ingredient => {\n        // const ingArray = ingredient[1].replaceAll(' ', '').split(','); //Now, we take the data out of the values of our ingredient- keys and destructure them.\n        //However, we want to consider if an ingredient has a whitespace in it, such as 'tomato sauce', which replaceAll() is not allowing\n        const ingArray = ingredient[1].split(',').map(str => str.trim()); //Instead, we will split the string into multiple parts which will return an array, and then we can loop over this array and just trim each of the elements\n        //For example, if we have '1,gram,tomato sauce', then it will convert to [1,gram,tomato sauce], and then it will trim each of these elements to remove whitespace from the beginning and end of the string.\n        //So, now 'tomato sauce' would retain its whitespace between tomato and sauce.\n\n        //We also don't want unit and description to ever be undefined in the case of an empty string. We should always receive 3 commas, as specified for the format.\n        if (ingArray.length !== 3) {\n          throw new Error(\n            'Wrong ingredient format! Please use the correct format.'\n          ); //We have converted our strings into an array, separated by the inputted commas by the user. Therefore, there should be exactly 3 elements in our array.\n        }\n        //We create variables named quantity, unit, and description and assign quantity to ingArray[0], unit to ingArray[1], and description to ingArray[2]\n        const [quantity, unit, description] = ingArray;\n\n        //One thing to note in our API is that when quantity is empty, we want it to be stored as null to match the API. Also, quantity should be stored as a Number.\n        //We return an object with the quantity, unit, and description properties holding the values that we just assigned to them previously that we're returning into our ingredients array using map(). Remember {unit} is the same as {unit: unit}.\n        return { quantity: '' ? null : Number(quantity), unit, description }; //we return the quantity, unit, and description of each ingredient stored in an object and store this in our array\n      }); //First, we convert our array into a string with ',' as the separator between elements while trimming out any whitespace from the string. In the case of ['  1  , gram , salt  '], we want to trim the whitespace between the separators and from the beginning and end.\n    //We do this by using the replaceAll() function to ensure all the white spaces are removed because trim would only remove the whitespace from the very beginning and very end of the string.\n\n    //Now it's time to create the object that we will use to pass into our API. We're matching the properties of our new recipe to the properties of objects created by our API.\n    const recipe = {\n      title: newRecipe.title,\n      publisher: newRecipe.publisher,\n      source_url: newRecipe.sourceUrl,\n      image_url: newRecipe.image,\n      cooking_time: Number(newRecipe.cookingTime),\n      servings: Number(newRecipe.servings),\n      ingredients, //This is the same as ingredients: ingredients\n    };\n\n    //Now we can send over our recipe to our API\n    const data = await AJAX(\n      `${API_URL}?search=${recipe.title}&key=${API_KEY}`,\n      recipe\n    ); //refer to documentation to know what url path to use for our POST request as well as to generate our own unique key\n    //Remember that our API sends our recipe back to us so we're going to await for that. Note that the uploaded recipe will automatically have an ID generated for it from the API and will have it stored as the recipe.id property.\n\n    //Now that we've uploaded our new recipe, it would make sense to now render this new recipe to our user interface after closing the window.\n    //So, we will now convert this returned recipe to the format that we've been using for our application. Which will be the same as what we did in loadRecipe, so we'll create a reusable function (createRecipeObject) for this.\n    state.recipe = createRecipeObject(data); //We set the current recipe that we're looking at to the recipe that we just uploaded\n\n    //We also want to be sure to bookmark our uploaded recipe and also tie our uploaded recipe to our API_KEY\n\n    //First, we'll mark our uploaded recipe as a bookmark and store our bookmarks in localStorage\n    addBookmark(state.recipe);\n    persistBookmarks();\n    //Finally, we'll add our API_KEY to our object. We could do that manually; however, we'll do that in our createRecipeObject() function.\n  } catch (err) {\n    throw err;\n    //Rethrow our error because we want our higher-level function that's invoking this function to know that this Promise has been rejected with the appropriate error object as the value.\n    //Otherwise, our Promise would be considered 'fulfilled' since we'd be catching the error and handling it internally, so we need to rethrow the error\n  }\n};\n\n/* Note that when you use import * from 'module' in JavaScript to import everything from a module, you are not only importing the exported parts but also running any top-level code that is executed in that module.\nThis includes any function calls, variable assignments, or other operations that happen at the top level when the module is first evaluated.\n\nModule Evaluation: When a module is imported for the first time, JavaScript evaluates the module from top to bottom. This evaluation includes running any top-level code.\nExports Gathering: After evaluating, JavaScript collects any exports defined in the module, which are then available to be imported by other modules.\nCode Reuse: If the same module is imported elsewhere (even using import * or any other form), the module is not evaluated again. Instead, the already evaluated state is reused. This means that the top-level code is executed only once, the first time the module is loaded.\n\nThis behavior highlights the importance of being cautious with what you place at the top level in your modules, especially operations with side effects, since they will be executed on module load. */\n","/* A config.js file is used in software projects to centralize configuration settings, making it easier to manage different aspects of your application. \n\nContents of config.js:\nEnvironment-Specific Settings: This includes different parameters for development, testing, and production environments, such as database URLs, API endpoints, and server ports.\nAPI Keys and Credentials: Securely store API keys and other credentials your application needs for interacting with external services. For production, it's safer to use environment variables or secure services to manage these.\nApplication Settings: General settings that influence application behavior, like feature toggles, session parameters, and pagination defaults.\nConnection and Performance Settings: Configurations for performance optimization, such as request timeouts, database connection pools, and rate limits.\nSecurity Settings: Settings related to security features, including CORS configurations, SSL/TLS setups, and security headers.\n\nUsing a config.js file effectively helps maintain a cleaner, more secure, and easily maintainable codebase by centralizing and managing settings separately from application logic. */\nexport const API_URL = `https://forkify-api.herokuapp.com/api/v2/recipes`;\nexport const TIMEOUT_SEC = 10;\nexport const RES_PER_PAGE = 10;\nexport const API_KEY = '786378a9-17fb-4888-b735-553b6c89e880';\nexport const MODAL_CLOSE_SEC = 2500;\n","/* Contains helper functions that we will reuse throughout the project */\n\nimport { TIMEOUT_SEC } from './config';\n\n//If our fetch takes too long to load the data, we want to time out the request by rejecting the Promise. We are going to implement this by using the race() function to see which settles first: the fetch request or the timeout function\nconst timeout = function (s) {\n  return new Promise(function (_, reject) {\n    setTimeout(function () {\n      reject(new Error(`Request took too long! Timeout after ${s} second`));\n    }, s * 1000);\n  });\n};\n\n//getJSON and sendJSON refactored into one function\nexport const AJAX = async function (url, uploadData = undefined) {\n  try {\n    const fetchPro = uploadData\n      ? await fetch(url, {\n          method: 'POST',\n          headers: {\n            //Information about the request\n            'Content-Type': 'application/json', //specifying that the data that we're going to send in is going to be in JSON format so the API knows to correctly accept that data and to create a new recipe in the database\n          },\n          body: JSON.stringify(uploadData), //The data that we want to send. Remember that we specified that the body will be in JSON, so we will use stringify to convert our data that we want to send into JSON\n        })\n      : fetch(url);\n\n    const res = await Promise.race([fetchPro, timeout(TIMEOUT_SEC)]); //race concurrently initiates the execution of all the promises in the input array. fetch automatically creates a GET request for us to get the data from the passed in URL.\n    const data = await res.json();\n\n    if (!res.ok) {\n      throw new Error(`${data.message} ${res.status}`); //Using the error message from our API and throwing our error so that it gets handled in our catch both. Note that the error object only accepts one string argument\n    }\n\n    return data;\n  } catch (err) {}\n};\n\n// //Function that will fetch data from a web API for us and convert the data to json()\n// export const getJSON = async function (url) {\n//   try {\n//     const res = await Promise.race([fetch(url), timeout(TIMEOUT_SEC)]); //race concurrently initiates the execution of all the promises in the input array. fetch automatically creates a GET request for us to get the data from the passed in URL.\n//     const data = await res.json();\n\n//     if (!res.ok) {\n//       throw new Error(`${data.message} ${res.status}`); //Using the error message from our API and throwing our error so that it gets handled in our catch both. Note that the error object only accepts one string argument\n//     }\n\n//     return data;\n//   } catch (err) {\n//     //Since the purpose of this function is to return a promise, we are also likely going to be using this function inside of another async function. So, we want to rethrow the error so that the async function that called this function could handle the error\n//     throw err;\n//   }\n// };\n\n// //Function that will send data to a web API for us\n// export const sendJSON = async function (url, uploadData) {\n//   try {\n//     const fetchPro = await fetch(url, {\n//       method: 'POST',\n//       headers: {\n//         //Information about the request\n//         'Content-Type': 'application/json', //specifying that the data that we're going to send in is going to be in JSON format so the API knows to correctly accept that data and to create a new recipe in the database\n//       },\n//       body: JSON.stringify(uploadData), //The data that we want to send. Remember that we specified that the body will be in JSON, so we will use stringify to convert our data that we want to send into JSON\n//     }); //We can also use fetch to create a POST request in order to send data. In order to do that, aside from just sending in a URL, we also need to send in an options object\n\n//     //We will still do this to time how long this request takes\n//     const res = await Promise.race([fetchPro, timeout(TIMEOUT_SEC)]); //race concurrently initiates the execution of all the promises in the input array.\n\n//     //Forkify API will actually return back the data that we just sent, so we're still going to await for this\n//     const data = await res.json();\n\n//     if (!res.ok) {\n//       throw new Error(`${data.message} ${res.status}`); //Using the error message from our API and throwing our error so that it gets handled in our catch both. Note that the error object only accepts one string argument\n//     }\n\n//     return data;\n//   } catch (err) {\n//     //Since the purpose of this function is to return a promise, we are also likely going to be using this function inside of another async function. So, we want to rethrow the error so that the async function that called this function could handle the error\n//     throw err;\n//   }\n// };\n","// One class for each of the different views. We do this because we are going to have a parent class named View which will contain a few methods that all the views will inherit. However, we also want each view to have its own private methods and properties.\n//With these in mind, classes seems best due to our need of inheritance as well as encapsulation\n\nimport View from './View'; //we need to import what we're extending\n//In this case, icons.svg has a default export so we can use any name. You can experiment this if documentation and configurations are helpful through trial and error:\n//Attempt a Default Import: Try importing without braces and see if it works without errors.\n//Attempt Named Imports: Try importing with specific names within braces. If this fails but the default import works, it’s likely a default export.\nimport icons from 'url:../../img/icons.svg'; //In Parcel v2, we need to have url: in front of the file path for any static asset.  It makes the intention clear that you are using the URL of the asset, rather than the asset itself.\n//If you need to interact with the actual content of the file rather than just its URL, you should import it without the url: prefix.\nimport fracty from 'fracty'; //Library we installed in NPM to change decimals to fractions in our UI. Note that with libraries we don't need to specify a path. We could see from logging Fraction that this would give us a Fraction object containing another object, so we are going to destructure this object immediately\n/* API gave us: var Fraction = require('fractiona').Fraction;\nObject with Properties: The expression require('fractional').Fraction implies that fractional exports an object which includes Fraction as one of its properties. This is a common pattern in JavaScript modules where a module exports multiple functionalities (such as classes, functions, or constants) grouped within a single object.\nNamed Export Access: By accessing .Fraction immediately after requiring the module, you're using dot notation to access a property of the returned object. This style suggests that fractiona does not use a default export that directly exposes Fraction but rather an object that groups multiple exports, with Fraction being one of them. */\nclass RecipeView extends View {\n  _parentElement = document.querySelector('.recipe'); //We set our container as private property. By making the parent element a private property of the RecipeView class, you restrict access to it from outside the class.\n  //Only the view classes would need access to the parent element, providing unnecessary access could lead to issues in our code.\n  //If any modifications need to be made to the #parentElement, they can be controlled through methods defined within RecipeView.\n  //This ensures that all changes go through a \"gatekeeper\" function, which can manage things like cleaning up event listeners, preventing memory leaks, or ensuring the DOM is in a valid state before and after updates.\n  //The concept of not making the #parentElement \"protected\" in JavaScript arises from a key aspect of the language: JavaScript does not natively support the protected access modifier as seen in other object-oriented languages like Java or C++.\n  _errMessage = 'We could not find that recipe. Please try another one!';\n  _message = '';\n\n  //Not a private method as this method needs to be part of the public API so that we can call it in the controller. Remember that we want to set these event listeners right when we start out application, which we will do through the init function in our controller.\n  //This is the publisher, and the handler is the subscriber. Meaning that the publisher knows when to react, and the subscriber knows how to react.\n  //This function is called addHandlerRendler because we are passing in the handler function (function that handles the event) and we are adding these event listeners for this handler in this function, which is initialized in init() in the controller\n  //And the functionality of the handler that we are passing in is to load the data and, ultimately, render our data (recipe). We call the function that we pass in our handler because it's our event handler that will be executed whenever the specified event happens in the specified element on the DOM.\n  addHandlerRender(handler) {\n    //If our hash (in the URL, the #...) changes, which means that the user clicked on a new recipe, we want to listen for this event so that we can update our recipe page with the new recipe.\n    // window.addEventListener('hashchange', controlRecipes);\n    //We set this on the window as we are globally listening for a hashchanger or load event\n\n    //We also need to listen for a load event in case the user loads the link to a recipe in their URL. The hash isn't changing if the user directly types in the link, so we need to also listen for the load event\n    // window.addEventListener('load', controlRecipes);\n\n    //However, what we did above is using duplicate code. So, instead we could do this to add the event listener to each of the individual events:\n    ['hashchange', 'load'].forEach(\n      event => window.addEventListener(event, handler) //We pass in our subscriber so now we know how to react, and so we connect the logic of both the publisher and subscriber by knowing when the events happen and what to do when these events happen\n      //We want this to be done in our view as we are performing an action based on how the user is interacting with the global window. However, the logic is inside of the controller and the view cannot import from the controller if we want to correctly follow MVC architecture, which we do.\n      //So, we use the pub/sub relationship when starting the program through the init() function in the controller and sending over information on what should be done when these events do happen in the view.\n    );\n  }\n\n  addHandlerUpdateServings(handler) {\n    this._parentElement.addEventListener('click', function (e) {\n      const btn = e.target.closest('.btn--update-servings'); //both the minus and addition buttons share this class in common. though notice that they have child elements in them, such as the svg child element used to display the image of the + and -\n      //We use this class over btn--tiny because btn--tiny is a class that we use more for styling with btn--update-servings is a class that we created for functionality, which is more appropraite for this case even though we could technically use both.\n      //We want to separate the logic if possible.\n      if (!btn) return; //If we aren't clicking any area where our + and - buttons are found as a parent element, then we aren't clicking anywhere inside of the button and we don't want to proceed\n      //We will again need to use our dataset to dynamically receive our new updated servings value from our DOM by adding that we want to store this value in our dataset in our markup below\n      const updateTo = Number(btn.dataset.updateTo); //Remember that our dataset automatically returns a string, so we have to convert this to a Number so that we could calculate the new quantities in our model when we pass in our updated servings to it\n      //Notice in our HTML, we named our custom 'data-*' attribute 'update-to'. However, when accessing this attribute using the dataset property in JavaScript, we use camelCase in the place of the '-'\n      //In that case, we can even use destructuring to make our code even cleaner:\n\n      // const { updateTo } = Number(btn.dataset); //This is equivalent to the above as our variable name is the same as the variable name used to access the dataset property.\n      //However, this actually doesn't work in this case because btn.dataset will first be converted to a number and then we would be using that converted number to try to access the .updateTo property of that number, which would result in undefined.\n      //We'd basically be trying to destructure properties from a Number object. We'd be trying to convert the entire dataset object to a number and then access the updateTo property within this number.\n\n      //Note that we don't want zero or negative servings, as that'd be either pointless or invalid, so we want to add a check here so that we're not going to modify or re-render the page for a negative serving\n      //(basically, we won't call the handler in this case, which would be the controlServings function in our controller in this case)\n      if (updateTo > 0) handler(updateTo);\n    });\n  }\n\n  addHandlerToggleBookmark(handler) {\n    //Event delegation is necessary here as the bookmark button is not loaded until we load a recipe, but we still need an element to attach our eventListener to which will be our parentElement.\n    //We put this inside of the RecipeView as it's dealing with an element within the same parentElement.\n    this._parentElement.addEventListener('click', function (e) {\n      const btn = e.target.closest('.btn--bookmark'); //the user might click on the svg element within the button\n      if (!btn) return; //if there's no .btn--bookmark element as the parent, we didn't click within the button\n      handler();\n    });\n  }\n\n  //This is private as this markup is going to be unique for our class. By using a function rather than a property, we ensure that our HTML markup reflects the most recently passed in recipe data every time that we render a recipe.\n  //Note that we use 'this._data' to refer to the model.state object as we don't have connection between the view and model. Only from the model to controller and view to controller. We receive the data from the controller when we render the data in our parent View class\n  //and we are able to manipulate the UI using this received data. The '_this' refers to whatever we pass in to the RecipeView as the data; however, it's important to keep this consistent as we will be using the sane generateMarkup function for several different uses in this case.\n  //For example, this markup will be used for bookmarking, updating servings, and just rendering the entire recipe in general so we want to keep the passed in data consistent to keep the references in the template literals consistent.\n\n  //You don't want prettier to be modifying HTML whitespace in JS code\n  //In HTML and JavaScript templates, especially when using template literals in JavaScript to dynamically generate or modify HTML content, whitespace can sometimes have unintended consequences.\n  //This is particularly true when dealing with attribute values or any syntax-sensitive parts of HTML.\n  //For example, whitespace (including line breaks and spaces) that's introduced into the href attribute's value due to the formatting of the template literal across multiple lines will not be ignored by the HTML parser; instead, it becomes part of the attribute value.\n  //This can lead to the browser interpreting the URL incorrectly, because URLs should not contain unencoded spaces or line breaks.\n\n  //This issue of whitespace affecting HTML attribute values is primarily a concern when dynamically generating HTML using JavaScript, especially with template literals or when constructing HTML strings.\n  //The same problems generally do not occur in static .html files because template literals include all content inside of them while HTML files generally ignore whitespace around elements or within tags while parsing and attributes in HTML are parsed to ignore whitespace around their values\n  //However, even in static HTML files, unnecessary spaces inside the attribute value within the \"\" may lead to incorrect URLs or broken links.\n\n  // prettier-ignore\n  _generateMarkup() {\n    //There will be one list element for each ingredient. We will have to loop over the ingredients array and create a list element for each ingredient in the array, and then return a string of our array so that we could print it in our HTML in a formattable way\n    //Recall that join has a default separator of a comma\n    return `<figure class=\"recipe__fig\">\n        <img src=\"${this._data.image}\" alt=\"${this._data.title}\" class=\"recipe__img\" />\n        <h1 class=\"recipe__title\">\n          <span>${this._data.title}</span>\n        </h1>\n      </figure>\n\n      <div class=\"recipe__details\">\n        <div class=\"recipe__info\">\n          <svg class=\"recipe__info-icon\">\n            <use href=\"${icons}#icon-clock\"></use>\n          </svg>\n          <span class=\"recipe__info-data recipe__info-data--minutes\">${this._data.cookingTime}</span>\n          <span class=\"recipe__info-text\">minutes</span>\n        </div>\n        <div class=\"recipe__info\">\n          <svg class=\"recipe__info-icon\">\n            <use href=\"${icons}#icon-users\"></use>\n          </svg>\n          <span class=\"recipe__info-data recipe__info-data--people\">${this._data.servings}</span>\n          <span class=\"recipe__info-text\">servings</span>\n\n          <div class=\"recipe__info-buttons\">\n            <button data-update-to=\"${this._data.servings - 1}\" class=\"btn--tiny btn--update-servings\">\n              <svg>\n                <use href=\"${icons}#icon-minus-circle\"></use>\n              </svg>\n            </button>\n            <button data-update-to=\"${this._data.servings + 1}\" class=\"btn--tiny btn--update-servings\">\n              <svg>\n                <use href=\"${icons}#icon-plus-circle\"></use>\n              </svg>\n            </button>\n          </div>\n        </div>\n\n      <div class=\"recipe__user-generated ${this._data.key ? '' : 'hidden'}\">\n        <svg>\n          <use href=\"${icons}#icon-user\"></use>\n        </svg>\n      </div>\n\n        </div>\n        <button class=\"btn--round btn--bookmark\">\n          <svg class=\"\">\n            <use href=\"${icons}#icon-bookmark${this._data.bookmarked ? '-fill' : ''}\"></use>\n          </svg>\n        </button>\n      </div>\n\n      <div class=\"recipe__ingredients\">\n        <h2 class=\"heading--2\">Recipe ingredients</h2>\n        <ul class=\"recipe__ingredient-list\">\n        ${this._data.ingredients.map(this._generateMarkupIngredients).join('')}\n      </div>\n\n      <div class=\"recipe__directions\">\n        <h2 class=\"heading--2\">How to cook it</h2>\n        <p class=\"recipe__directions-text\">\n          This recipe was carefully designed and tested by\n          <span class=\"recipe__publisher\">${this._data.publisher}</span>. Please check out\n          directions at their website.\n        </p>\n        <a\n          class=\"btn--small recipe__btn\"\n          href=\"${this._data.sourceUrl}\"\n          target=\"_blank\"\n        >\n          <span>Directions</span>\n          <svg class=\"search__icon\">\n            <use href=\"${icons}#icon-arrow-right\"></use>\n          </svg>\n        </a>\n      </div>`;\n  }\n\n  _generateMarkupIngredients(el) {\n    return `<li class=\"recipe__ingredient\">\n            <svg class=\"recipe__icon\">\n              <use href=\"${icons}#icon-check\"></use>\n            </svg>\n            <div class=\"recipe__quantity\">${\n              el.quantity ? fracty(el.quantity).toString() : ''\n            }</div>\n            <div class=\"recipe__description\">\n              <span class=\"recipe__unit\">${el.unit}</span>\n              ${el.description}\n            </div>\n          </li>`;\n  }\n}\n\n/* Instantiation: new RecipeView() creates a new instance of the RecipeView class.\n  Exporting: By exporting the instance directly, the module ensures that any import of this module gets exactly the same instance. This is the core of the Singleton pattern applied through modules.\n  \n  Single Instance: Anywhere this module is imported, the same instance of RecipeView is reused. This is useful when you need a consistent state across different parts of your application, such as a UI component that manages how a recipe is displayed.\n  \n  No Constructor Needed: As mentioned in the comment, since the instance is created directly in the module file and exported, there is no need to expose a constructor or create multiple instances elsewhere.\n  This can simplify usage and prevent misuse, like inadvertently creating multiple instances where a single shared instance is intended.\n  \n  No Data Passing on Construction: If the RecipeView class does not require any dynamic initialization data, or if it can initialize itself without external inputs, this approach works well.\n  It encapsulates all initialization within the RecipeView itself, potentially fetching its own data or setting up its state independently.\n  \n  The Singleton pattern ensures that a class has only one instance and provides a global point of access to it. */\nexport default new RecipeView();\n","import icons from 'url:../../img/icons.svg';\n\nexport default class View {\n  //parent class for child classes to inherit methods. We are exporting the class itself as we are not going to create any instances with this view. This is only for child views to inherit these methods.\n  //NOTE: With Parcel and Babel, inheritance between private fields and methods is not supported. So, we are going to change all of our previously private fields to protected. Please do note this when reading the comments for the methods in this class.\n  //With this in mind, we're actually going to change all of our private fields/methods to protected in all of our view files.\n  _data;\n  //Every view will have a unique parentElement, markup, and view so we define those in our separate views. The data can be shared as we are reassigning the data inside of the render() method.\n\n  /**\n   * Rendered the received object to the DOM. (Documented using JSDoc)\n   * @param {Object | Object[]} data The data to be rendered (e.g. a recipe)                            //Expect an object or an array of objects for our data parameter\n   * @param {boolean} [render=true] If false, create markup string instead of rendering to the DOM      //Render argument is optional, so we surround it in brackets and identify its default value as true\n   * @returns {undefined | ''} A markup string is returned if render=false                              //We either return undefined or our markup string if render is set to false\n   * @this {Object} View Instance       //The 'this' keyword points to the instance of our View object (more accurately, our child instance) that's invoking this method. Notice we specified the type of View in curly braces\n   * @author Eric Chen\n   *\n   */\n  //Notice that if we hover over the function that we wrote JSDoc for, VSCode will show us our documentation that we wrote. This will remain consistent anytime the function is used in our project.\n\n  //We are not creating any constructor for RecipeView, but we can still create a function to render the recipe that is passed in, that can be reused in the same RecipeView object that we export.\n  //We accept the recipe data that is passed in and will store the data in the object. Storing it as an object within the class makes it easier to manage and use this data throughout the class methods, and we don't want to rely on the DOM for our data.\n  render(data, render = true) {\n    //If there's no data or we receive an empty array\n    if (!data || (Array.isArray(data) && data.length === 0)) {\n      return this.renderError(); //return out of our function while also calling renderError() on whatever child instance is calling the render method. We already specified the _errMessage inside of our child classes, so that will be handled for us when invoking renderError.\n    }\n    this._data = data; //Recall that our data is the passed in data and it is stored inside of our class now.\n\n    //Now that we've stored the most recent recipe data, we want to display this data on the page.\n    const markup = this._generateMarkup(); //this._generateMarkup is unique for each different child class of view, so we need our own _generateMarkup() method inside of our child class in order to call the inherited render() method from our parent class.\n    //It has to have the same name so the parent class is able to refer to the _generateMarkup method inside of our child class instance\n\n    if (!render) {\n      return markup;\n    }\n    this._clear();\n    this._parentElement.insertAdjacentHTML('afterbegin', markup); //insert our markup HTML as the first child in the container. This means that the newly added content becomes the first element within that container so that the newly added content will be on top of the previous content, similar to a stack.\n  }\n\n  //Only update text attributes in the DOM without re-rendering the entire view\n  update(data) {\n    //Once we update the data, we want the view's data to become the new data and to also generate some new markUp to reflect this change on the DOM\n\n    //We don't need this check for our update method. We aren't dealing with potential empty arrays or unknown data for our update function as we aren't using it to render fetched data, for example.\n    //We know exactly what we're passing into our update function as we are only using it to update text and attributes in a previous _parentElement to an updated _parentElement, which was the reason why we made this function in the first place.\n    //So, in our case, it's okay if there's an empty array because we want to account for scenarios such as if there were no search results. Because what if we have a link that we want to go to and just paste that into our URL?\n    //There would be no search results, but we don't want to render an error in this case as that would be a completely acceptable scenario.\n    // We could just return out of the function in that case as there would be nothing to update.\n\n    if (!data || (Array.isArray(data) && data.length === 0)) {\n      return;\n    }\n\n    // if (!data || (Array.isArray(data) && data.length === 0)) {\n    //   return this.renderError();\n    // }\n    this._data = data;\n\n    //This newMarkup will be the entire markup as if we wanted to render a new view.\n    //However, we are only going to update the text and attributes in the DOM, but we still need to have the entire view in order to do that by essentially comparing the old and new markup against one another\n    const newMarkup = this._generateMarkup();\n    //So, we are going to create newMarkup but not render it. Instead, we're going to create this new markup and compare this new markup to our previous markup and then only update the text and attributes that have changed from the old version to the new version.\n\n    //First, we'll convert the returned String from the _generateMarkup function to a DOM object to compare with the actual DOM object on the page\n    const newDOM = document.createRange().createContextualFragment(newMarkup);\n    /* document.createRange(): Creates a new Range object. A Range represents a fragment of a document that can contain nodes and parts of text nodes.\n    createContextualFragment(htmlString): This method is called on a Range object. It takes a string of HTML (in this case, newMarkup) and converts it into a DOM fragment.\n    This fragment is a full-fledged part of the DOM but exists in memory and isn't part of the actual document's structure until it's inserted somewhere in the document.\n    \n    Initialization: You create a Range by calling document.createRange(). At this point, the range is conceptually positioned but doesn’t highlight or select anything specific unless you define its start and end points.\n    Fragment Creation: When you call createContextualFragment() with an HTML string, the method parses this string as if it were part of the document at the location specified by the Range. This parsing respects the document's structure and formatting rules.\n    DOM Fragment: The parsed HTML string becomes a DocumentFragment, which is a lightweight, document-like object that can hold DOM nodes in the same way a full document can, but it does so without being directly part of the main document tree until explicitly inserted.\n    Storing in newDOM: The resulting DOM fragment is stored in the variable newDOM. This DOM fragment can now be used for various purposes, such as comparing with the existing DOM on the page or being inserted into the document at a desired location.\n\n    We're essentially preparing a chunk of HTML text to be dynamically manipulated or compared with the current content of the webpage without affecting the visible page until you decide to insert or replace elements.\n    This method is particularly useful for updating parts of a webpage with new content without reloading the entire page, allowing for more efficient and smoother user experiences in dynamic web applications. */\n\n    //Now we can select all elements within our new DOM that we created by generating the new markup containing the updated text and attributes. Basically, we are selecting all elements of the DOM with the updated information (the DOM that would have been rendered if we had just called the render() method)\n    //Recall that querySelectorAll returns a NodeList, so let's convert this to an array using Array.from\n    const newElements = Array.from(newDOM.querySelectorAll('*'));\n\n    //So now we can compare this updated DOM with our current DOM. First, we need to get all the elements of our current DOM (meaning all of the elements within our current _parentElement), and we will update the text and attributes within these elements\n    //within our current _parentElement to our new _parentElement\n\n    //Note that this name is a bit misleading as it's actually a NodeList, where each \"Node\" is actually each of our child elements within the _parentElement. This is because all elements are nodes. However, not all nodes are elements so this can get a bit confusing.\n    const currElements = Array.from(this._parentElement.querySelectorAll('*'));\n\n    //Now, let's compare between the elements in our new DOM and our current DOM\n    newElements.forEach((newEl, i) => {\n      const currEl = currElements[i];\n\n      //There is a method on all nodes that allows us to compare between two nodes called isEqualNode, so we will use that. Note that this is not comparing memory references, this is comparing the actual content of the nodes\n      //However this name is a bit misleading as it does compare between the nodes in our _parentElement, but it also compares the child elements within our current and new _parentElement\n      if (\n        !currEl.isEqualNode(newEl) &&\n        currEl.firstChild?.nodeValue.trim() !== ''\n      ) {\n        //Since we are updating our servings, our text elements will differ in servings as the servings in our state has changed. However, this will be limited to +/- 1 as we also need to update the dataset property (the 'data-*' attribute) within our markup.\n        //What's happening is that the value that we pass into our handler (the updateTo value in our RecipeView) +/- 1 due to the button click, but we are not actually re-rendering and saving this updated value anywhere.\n        //So, we will do this in our second if block.\n\n        //However, first, we are going to render this new servings value on the DOM.\n\n        //However, note that this also notices in the parent elements that the entire container elements are different due to the underlying nodes of the servings being different, which we will handle later.\n\n        //So, over here we will say that if the current element is different than our new element, we will change the text node of the current element to the text node of the new element\n        currEl.textContent = newEl.textContent; //Note that currEl is the DOM element that is currently on the page, so we do want to mutate the text node within this element\n        //Note that just doing the above will not work as we would be replacing the text node for every current element that does not equal our new element, including the text node within the parent container.\n        //This would cause the entire text node in the parent container to equal the text node of our new element.\n        //To avoid this, we need to find a way to determine if the element within our parentElement only contains a text node, without any other children elements, as we know that that's what we're looking to re-render in this case.\n        //And that's what would differentiate this element from others within our parentElement in this situation.\n\n        //We can do this by adjusting a node property called nodeValue.\n        //The value of nodeValue will be null if the node is an element, amongst many others (you can refer to the doc), but the main point is that if it's a text node, then we can extract that text content value of the text node.\n        //So, with this in mind, we should check to ensure that the elements are different, but on top of that, we also only want elements that only contain a child element containing a text node.\n        //So, we can take the first child of the element since we know that the only child in the element should contain the text node, so if we check the nodeValue property of this text node, it should return something meaning it should not be an empty string or return null.\n        //We can check this on either the currEl or the newEl, it doesn't matter as the indexes are matching. The point is that we find the element containing only the servings text node, and we modify this.\n        //We use optional chaining to ensure that it's not null meaning that if the first child doesn't exist, then we just short circuit and returns undefined instead of throwing an error\n        //We also trim to filter the elements which don't have a first child element containing a text node because the nodeValue of such elements will be a string consisting of white space, such as ('\\n')\n        //However, the parent elements with a first child element containing a text node will pass this condition as there will be some content left after trimming white space.\n\n        /* The phenomenon where the first child element appears to be just whitespace is a common occurrence in HTML documents, primarily due to how HTML is formatted by developers for readability.\n        When developers create HTML, they often format it with indentations and line breaks to make the code easier to read and manage.\n        These formatting choices, while invisible on the rendered page, become part of the DOM as text nodes. */\n\n        //So, we just updated the servings displayed on the DOM based on the new servings\n\n        //Now we want to update the dataset properties:\n        if (!currEl.isEqualNode(newEl)) {\n          //We can access the attributes property, which all elements have. newEl.attributes, for example, will return an object of all of the attributes that have changed.\n          //So, we will convert this object to an array and basically copy all of the attributes from our new element to our current element, updating our DOM\n\n          Array.from(newEl.attributes).forEach(attr => {\n            currEl.setAttribute(attr.name, attr.value); //if the elements aren't equal, we take the attributes of the updated parentElement of our DOM and copy them over to the current parentElement of our DOM\n            //setAttribute: We are taking the name of our attribute that's updated (in this case, it would be update-to) and we are updating the value tied to this name to the updated value that we get from our new element (parentElement)\n          });\n        }\n        this._clear();\n        this._parentElement.insertAdjacentHTML('afterbegin', newMarkup);\n      }\n    });\n  }\n\n  //Let's create a function to render the spinner when loading the elements in our parent element, which is the container that holds our child elements. We make this reusable by doing this in any parent element that we pass in\n  //Note that renderSpinner has nothing to do with the business logic, but is only presentation logic so this goes in the view\n  //This will be a public method so that the controller could call this method as it starts fetching the data\n  renderSpinner() {\n    this._clear(); //Before loading the spinner, let's clear the container (parent element) so that the only thing inside of the container will be the spinner until the data is finished loading\n\n    const markup = `<div class=\"spinner\">\n    <svg>\n      <use href=\"${icons}#icon-loader\"></use>\n    </svg>\n  </div>`;\n\n    this._parentElement.insertAdjacentHTML('afterbegin', markup);\n  }\n\n  //We create this as a method so that other view classes inherit this method. However, we make this protected as private properties and methods do not get inherited and outside classes (only view classes) do not need access to this method.\n  //The protected modifier allows a class member to be accessed within the class itself, by instances of the class, and by any subclass derived from it, but not from the outside world (i.e., not by any code that is not part of the class or its subclasses).\n  //However, note that protected is simply a convention in JS. It does not actually limit accessibility. However, we use this convention so that we know that only View classes should use this property (only view classes would have parentElement anyways).\n\n  //We could also make this private if we don't plan to have other classes inherit this method if we aren't accessing this method outside of this class definition. Note that private methods/properties cannot be accessed directly from outside the class, including from instances of the class.\n  _clear() {\n    this._parentElement.innerHTML = ''; //Before inserting our new recipe into our container, let's clear anything that was previously there. In this case, we are clearing our spinner before adding our new child elements into the container so that the spinner is not constantly on the page.\n  }\n\n  renderError(err = this._errMessage) {\n    this._clear();\n\n    const markup = `<div class=\"error\">\n    <div>\n      <svg>\n        <use href=\"${icons}#icon-alert-triangle\"></use>\n      </svg>\n    </div>\n    <p>${err}</p>\n  </div>`;\n\n    this._parentElement.insertAdjacentHTML('afterbegin', markup);\n  }\n\n  renderMessage(err = this._message) {\n    this._clear();\n\n    const markup = `<div class=\"message\">\n    <div>\n      <svg>\n        <use href=\"${icons}#icon-smile\"></use>\n      </svg>\n    </div>\n    <p>${err}</p>\n  </div>`;\n\n    this._parentElement.insertAdjacentHTML('afterbegin', markup);\n  }\n}\n","module.exports = new __parcel__URL__(\"icons.c14567a0.svg\").toString();","// FRACTY CONVERTS DECIMAL NUMBERS TO FRACTIONS BY ASSUMING THAT TRAILING PATTERNS FROM 10^-2 CONTINUE TO REPEAT\n// The assumption is based on the most standard numbering conventions\n// e.g. 3.51 will convert to 3 51/100 while 3.511 will convert to 3 23/45\n// Throw any number up to 16 digits long at fracty and let fracy do the work.\n// If number is beyond 16 digits fracty will truncate at 15 digits to compensate for roundoff errors created in IEEE 754 Floating Point conversion.\n\nmodule.exports = function (number) { //IEEE 754 Floating Point conversion problems will cause entires above 16 digits to convert incorrectly to binary with small roundoff errors, so keeping entry below 16 digits will help fracy make the most accurate calculation. If there are 16 or more digits in the number fracty can be called on the decimal part of the number only to maximize accuracy.\n    let type;\n\n    if (number < 0) { //If number is less than zero it's negative.\n        number = Math.abs(number);\n        type = '-';\n    } else {\n        type = '';\n    }\n\n    if (number === undefined) {\n        return `Your input was undefined.`\n    }\n\n    if (isNaN(number)) { //isNaN() instead of Number.isNaN() is used so that if fracty is called on something that is not a number but could be a string of numbers the function still passes as true.\n        return `\"${number}\" is not a number.`;\n    }\n\n    if (number == 9999999999999999) { //There's no reason to call fracty on an integer at all, but in the unlikely case that the number is 9999999999999999 JavaScript will round to 10000000000000000 and fracty handles that. Interestingly, if fracty is called on -9999999999999999, which fracty converts to absolute value, the number logged is 10000000000000000 but the number stored is 9999999999999999, so this if statement works for both 9999999999999999 and -9999999999999999.\n        return `${type}9999999999999999`;\n    }\n\n    if (number > 9999999999999999) { //Beyond 9999999999999999 IEEE 754 Floating Point conversion inaccuracies will occur in JavaScript.\n        return `Too many digits in your integer to maintain IEEE 754 Floating Point conversion accuracy.`;\n    }\n\n    if (Number.isInteger(number)) { //If fracty is called on an integer, return the integer.\n        return `${type}${number}`;\n    }\n\n    if (number < .000001) { //Non negative numbers with integers equal to zero that are followed by six or more consecutive zeros will coerce to scientific notation but, interestingly enough, numbers with integers that are not zero that are followed by six or more consecutive zeros will not coerce to scientific notation. Therefore, in the case of numbers with integers that are not zero that are followed by six or more consecutive zeros, fracty is more accurate than it is with numbers that have  integers equal to zero that are followed by six or more consecutive zeros because fracty doesn't have to coerce the decimal part of the number to '0' so soon. This it the smartest way fracty can compensate for this \"bug\" in JavaScript.\n        return '0';\n    }\n\n    const numberString = number.toString();\n    const entry = numberString.split('.');\n    let integer = entry[0];\n    let decimal;\n\n    if (decimal == '0' && integer !== '0') { //If there's no decimal just return the integer.\n        return integer;\n    } else if (decimal == '0' && integer == '0') { //If only zero is entered return zero.\n        return '0';\n    } else if (numberString.length >= 17){ //If the number entered has equal to or more than 16 digits (decimal is excluded) truncate the last digit to prevent errors in IEEE 754 Floating Point conversion.\n        decimal = entry[1].slice(0,entry[1].length-1);\n    } else {\n        decimal = entry[1];\n    }\n\n    if (decimal == '99' && integer !== '0') { //Otherwise it will automatically round to 1/1.\n        return `${integer} 99/100`;\n    } else if (decimal == '99' && integer == '0') {\n        return `99/100`;\n    } else if (1 - parseFloat(`.${decimal}`) < .0011) { //If decimal is at least .99899999999 assume that the fraction will inevitably result in 1/1, so circumnavigate the issue that .999, upon IEEE 754 Floating Point conversion, accidentally becomes .9989999999999997 by replacing it with '999', which fracty will further reduce properly.\n        decimal = '999';\n    }\n\n    if (decimal == undefined) {\n        return integer;\n    }\n\n    const decimalRev = decimal.split('').reverse().join(''); //Reverse the string to look for patterns.\n    const patternSearch = /^(\\d+)\\1{1,2}/; //This greedy regex matches the biggest pattern that starts at the beginning of the string (at the end, in the case of the reversed string). A lazy regex doesn't work because it only identifies subpatterns in cases where subpatterns exist (e.g. '88' in '388388388388'), thus pattern capture must be greedy.\n    let pattern = decimalRev.match(patternSearch); //If there's a pattern, it's full sequence is in [0] of this array and the single unit is in [1] but it may still need to be reduced further.\n\n    if (pattern && decimal.length > 2) { //In keeping with the most standard numbering conventions of monetary divisibility, etc., if there's a pattern beyond two decimal places, reverse back the pattern that the greedy regex deemed a single unit, and the full pattern sequence, respectively.\n        let patternSequence = pattern[0].split('').reverse().join('');\n        let endPattern = pattern[1].split('').reverse().join('');\n\n        if (endPattern.length > 1) { //Test to see if the pattern unit is actually a single repeating digit.\n            let endPatternArray = endPattern.split('');\n            let testSingleUnit = 1;\n            for (let i = 0; i < endPatternArray.length; i++) {\n                testSingleUnit /= endPatternArray[0]/endPatternArray[i];\n            }\n\n            if (testSingleUnit === 1 ) {\n                endPattern = endPatternArray[0];\n            }\n          }\n\n        if (endPattern.length > 1 && endPattern.length % 2 === 0) { //If what the greedy regex deems to be the pattern unit has a length greater than 1 and an even number of digits, check to see if splitting it in half will give two equal parts. If it does, one of those equal parts will be the pattern. There's no need repeat this test as no case needing this test more than once would exist for strings of 16 digits or less.\n            endPattern = parseInt(endPattern.slice(0,endPattern.length/2),10) - parseInt(endPattern.slice(endPattern.length/2,endPattern.length),10) === 0 ? endPattern.slice(0,endPattern.length/2) : endPattern;\n        }\n            return yesRepeat(decimal, endPattern, patternSequence, integer, type); //Begin calculating the numerator and denominator for decimals that have a pattern.\n        } else {\n            return noRepeat(decimal, integer, type); //Begin calculating the numerator and denominator for decimals that don't have a pattern.\n    }\n}\n\n  //IF THERE'S A TRAILING PATTERN FRACTY DIVIDES THE INPUT BY ONE SUBTRACTED FROM THE NEAREST BASE 10 NUMBER WITH NUMBER OF ZEROS EQUAL TO THE LENGTH OF THE REPEATED PATTERN (I.E. A SERIES OF 9'S) MULTIPLIED BY THE BASE 10 NUMBER GREATER THAN AND CLOSEST TO THE INPUT.\nfunction yesRepeat(decimal, endPattern, patternSequence, integer, type) {\n\n    const rep = true; //The numerator repeats.\n    const nonPatternLength = decimal.length - patternSequence.length >= 1 ? decimal.length - patternSequence.length : 1; //Does the length of the non pattern segment of the input = 0? If it does, that's incorrect since we know it must equal at least 1, otherwise it's the length of the decimal input minus the length of the full pattern.\n    const decimalMultiplier2 = Math.pow(10,(nonPatternLength)); //Second multiplier to use.\n    const float = parseFloat(`0.${decimal}`); //Convert the decimal input to a floating point number.\n    const decimalMultiplier1 = Math.pow(10,(endPattern.length)); //Find the right multiplier to use for both numerator and denominator, which will later have 1 subtracted from it in the case of the denominator.\n    const numerator = Math.round(((float * decimalMultiplier1) - float) * Math.pow(10,(nonPatternLength))); //Find the numerator to be used in calculating the fraction that contains a repeating trailing sequence.\n    const denominator = (decimalMultiplier1-1) * decimalMultiplier2; //Caluculate the denominator using the equation for repeating trailing sequences.\n    return reduce(numerator, denominator, integer, type, rep); //Further reduce the numerator and denominator.\n}\n\n//IF THERE'S NO TRAILING PATTERN FRACTY DIVIDES THE INPUT BY THE NEAREST BASE 10 INTEGER GREATER THAN THE NUMERATOR.\nfunction noRepeat(decimal, integer, type) {\n    const rep = false; //The numerator doesn't repeat.\n    const numerator = parseInt(decimal, 10); //Numerator begins as decimal input converted into an integer.\n    const denominator = Math.pow(10,(decimal.length)); //Denominator begins as 10 to the power of the length of the numerator.\n    return reduce(numerator, denominator, integer, type, rep); //Reduce the numerator and denominator.\n}\n\n//FRACTY REDUCES THE FRACTION.\nfunction reduce(numerator, denominator, integer, type, rep) {\n\n    const primeNumberArray = [2, 3, 5]; //If the numerator isn't from a repeating decimal case, the initialized array of prime numbers will suffice to find the common denominators.\n\n    if (rep === true) {  //If the numerator is from a repeating decimal case, fracty generates an array of prime numbers from 2 to the square root of the numerator, loops over the array to find the common denominators, and reduces the fraction. Since reducing by prime numbers beyond i^2 isn't necessary, fracty creates and array of the prime numbers that, when squared, are still less than or equal to the numerator.\n        for (let i = 3; i * i <= numerator; i+=2) {\n            if (numerator % i === 0) {\n                primeNumberArray.push(i);\n            }\n        }\n    }\n\n    let j = 0; //Initialize counter over the prime number array for the while loop.\n    let comDenom = 1; //Initialize the common denominator.\n    let num = numerator; //Initialize the numerator.\n    let den = denominator; //Initialize the denominator.\n\n    while (j <= primeNumberArray.length) { //While i is less than the length of the array of prime numbers, check divisibility for both numerator and denominator and if there's a common denominator, divide it by that prime number and continue until they no longer reduce and you have to check the next prime number in the array.\n        if (num % primeNumberArray[j] === 0 && den % primeNumberArray[j] === 0) {\n            comDenom = comDenom * primeNumberArray[j];\n            num = num/primeNumberArray[j];\n            den = den/primeNumberArray[j];\n        } else {\n            j++;\n        }\n    }\n\n    return returnStrings(den, num, integer, type);\n}\n\n//FRACTY RETURNS THE REDUCED FRACTION AS A STRING.\nfunction returnStrings (den, num, integer, type) {\n\n    if (den === 1 && num === 1) { //If '1/1'\n        integer = `${type}${(parseInt(integer) + 1).toString()}`; //Add 1 to the integer and return a string without a fraction.\n        return `${integer}`;\n    } else if (num === 0) { //This happens when there are >=15 zeros in the decimal part of your number and the number has an integer part that is not zero and so doesn't coerce to scientific notation.\n        return `${type}${integer}`;\n    } else if (integer == '0') { //If the integer is '0' just return the fraction.\n        return `${type}${num}/${den}`;\n    } else {\n        return `${type}${integer} ${num}/${den}`; //If there's an integer and a fraction return both.\n    }\n\n}\n","// Class to get the query and to also handle the click event on the button\nclass SearchView {\n  _parentElement = document.querySelector('.search'); //in the HTML, the search class is our parent element which contains the text box as well as the button\n  _inputField = this._parentElement.querySelector('.search__field');\n\n  //We don't make this private as our controller needs access to this function\n  getQuery() {\n    //First get the query\n    const query = this._inputField.value; //we need to have the 'this' keyword, because the only time we can run this function is by accessing it through an instance of the class object, which the 'this' would be referring to\n    //Clear the input field\n    this._clearInputField();\n    //Return the query\n    return query;\n  }\n\n  //We can make this private because we won't be trying to access it outside of just this class. We're calling addHandlerSearch from our controller, and private properties/methods can only be accessed within the same class where they are defined.\n  //They cannot be accessed directly from outside the class, including from instances of the class.\n  _clearInputField() {\n    this._inputField.value = '';\n  }\n\n  addHandlerSearch(handler) {\n    //We set the event listeners on the parent element rather than just the button as we also want to listen in case the user presses the 'enter' on their keyboard.\n    //So, we want to listen for a submit event in the context of the entire search element (the text box and the button)\n    this._parentElement.addEventListener('submit', function (e) {\n      //we cannot pass in the handler immediately as when we submit a form (which you can see the search element is in the HTML), there is a default action of reloading the page. So, we need to prevent this default action.\n      //This is the function that the callback function will call when the submit event is 'heard' on the search element.\n      //If we didn't prevent the default behavior, the page would reload and our controlSearchResults function (the handler) would be trying to get the data.\n      //Whether it succeeds in time before the page reloads or not is irrelevant as the reload will clear out either this action or the returned data\n      e.preventDefault();\n      handler();\n      //We don't want to call clearInputField() in here as the 'this' keyword would now be referring the DOM element to which the event listener is attached (#parentElement), which would not have access to the method\n      //We also just don't need to clearInputField() here, as we already do so inside of our getQuery() function, which is called inside of our handler.\n    });\n  }\n}\nexport default new SearchView();\n","import View from './View';\nimport PreviewView from './PreviewView';\n//Since we inherited methods from the parent class, we want to make sure that we name the variables being used within the inherited methods the same\nclass ResultsView extends View {\n  //The parent element depends on where you want to add new results.\n  //That <ul class=\"results\"> element is the closest parent that contains all results. Later in the course, we'll implement results as <li> elements, which needs to be contained in either <ul> or <ol> elements, which fits the .results parent class\n  _parentElement = document.querySelector('.results');\n  _errMessage = 'No recipes found for your query! Please try again';\n  _message = '';\n\n  // _generateMarkup() {\n  //   //We want to add the 'preview__link--active' CSS class to the recipe that we select to visually show that this recipe is currently selected\n  //   //So, we do this by checking to see if result.id is the same as the current ID in our URL, which would be our hash (window.location.hash), and if they are the same then we want to add the CSS class to the markup for that recipe.\n  //   //Next, we need to update the resultsView by re-rendering only this changed attribute in our controller. We could re-render the page; however, that would be inefficient and we can use our update function in our View parent class to achieve this\n\n  //   const id = window.location.hash.slice(-1); //We take everything but the first element as it starts with '#'\n\n  //   //this._data is an array of objects containing our results as it's our model.state.search.results. So, we want to loop through our array and return a string for each of the elements\n  //   //When you use the # symbol in an href attribute of an <a> tag in HTML, the browser understands it as a directive to navigate to an anchor point within the current document with the given id\n  //   return this._data.map(result => {\n  //     return `<li class=\"preview\">\n  //       <a class=\"preview__link ${\n  //         result.id === id ? 'preview__link--active' : ''\n  //       }\" href=\"#${result.id}\">\n  //         <figure class=\"preview__fig\">\n  //           <img src=\"${result.image}\" alt=${result.title} />\n  //         </figure>\n  //         <div class=\"preview__data\">\n  //           <h4 class=\"preview__title\">${result.title}</h4>\n  //           <p class=\"preview__publisher\">${result.publisher}</p>\n  //         </div>\n  //       </a>\n  //     </li>`;\n  //   });\n  // }\n\n  _generateMarkup() {\n    return this._data.map(result => PreviewView.render(result, false)).join(''); //the render() method in our View parent class will generate the markup using the function in our PreviewView class, and from this parent class we will add each result to our container (parentElement)\n  }\n}\n\nexport default new ResultsView();\n","import View from './View';\nimport icons from 'url:../../img/icons.svg';\n\n//Since we inherited methods from the parent class, we want to make sure that we name the variables being used within the inherited methods the same.\n//We are using this to build our preview element, so we don't need the message variables\nclass PreviewView extends View {\n  _parentElement = ''; //We are not storing this in any container, we are going to return the preview elements to either the BookmarksView or ResultsView to insert into their appropriate containers\n\n  //Note that we aren't using map(), so this will only generate the markup for one preview element. We'll be calling the map() method inside of the views that are going to use this method.\n  _generateMarkup() {\n    const id = window.location.hash.slice(-1); //We take everything but the first element as it starts with '#'\n\n    return `<li class=\"preview\">\n        <a class=\"preview__link ${\n          this._data.id === id ? 'preview__link--active' : ''\n        }\" href=\"#${this._data.id}\">\n          <figure class=\"preview__fig\">\n            <img src=\"${this._data.image}\" alt=${this._data.title} />\n          </figure>\n          <div class=\"preview__data\">\n            <h4 class=\"preview__title\">${this._data.title}</h4>\n            <p class=\"preview__publisher\">${this._data.publisher}</p>\n\n          <div class=\"preview__user-generated ${\n            this._data.key ? '' : 'hidden'\n          }\">\n          <svg>\n            <use href=\"${icons}#icon-user\"></use>\n          </svg>\n        </div>\n        </div>\n        </a>\n      </li>`;\n  }\n}\n\nexport default new PreviewView(); //We do want to instantiate this child class as we want to directly call its methods rather than having anything inherit these methods from it\n","import View from './View';\nimport icons from 'url:../../img/icons.svg';\n\nclass PaginationView extends View {\n  _parentElement = document.querySelector('.pagination');\n  //The markup that we create is based on the page that we're on\n\n  //Note that because of our render method in our View class, we have access to what we passed in to the render function from our controller using the instance of this object as this._data ('this' referring to the instance of this class that called this method, which would be PaginationView)\n  //Recall: PaginationView.render(model.state.search). And since we are following a Singleton pattern, all instances of this class would be referring to the same instance object. This is true for all other View classes, excluding the parent since we didn't instantiate it.\n  //All view classes have one object instantiated for them appropriately.\n  _generateMarkup() {\n    const resultsLength = this._data.results.length;\n    const resultsPerPage = this._data.resultsPerPage;\n    //In order to know where we stand in terms of the pages, we must know how many pages there are in the first place.\n    const numPages = Math.ceil(resultsLength / resultsPerPage); //We may get a decimal, so we want to round this to the highest integer. Not all pages need to be filled with the entire 10 elements.\n    const currPage = this._data.page;\n\n    const prevButton = `<button data-goto=\"${\n      currPage - 1\n    }\"button class=\"btn--inline pagination__btn--prev\">\n            <svg class=\"search__icon\">\n                <use href=\"${icons}#icon-arrow-left\"></use>\n            </svg>\n         <span>Page ${currPage - 1}</span>               \n        </button>`;\n\n    const nextButton = `\n    <button data-goto=\"${\n      currPage + 1\n    }\"class=\"btn--inline pagination__btn--next\">\n      <span>Page ${currPage + 1}</span>\n      <svg class=\"search__icon\">\n        <use href=\"${icons}#icon-arrow-right\"></use>\n      </svg>\n    </button>`;\n\n    //1. If we're on the first page, we don't want to have a back button. Since we'll also be on the first page in the case that there are less than 10 results, we need to consider this as well.\n    if (currPage === 1 && numPages > 1) {\n      return nextButton;\n    }\n\n    //2. If there are less or equal results than results per page then we don't want to have a next button as we only need one page\n    //3. Also, if we're on the last page, then we don't want to have a next button either\n    if (resultsLength <= resultsPerPage || currPage === numPages) {\n      return prevButton;\n    }\n\n    //4. If we're on a middle page, we want both buttons\n    return `${prevButton}${nextButton}`; //Note that in HTML, spacing and tabs (whitespace characters) do not affect the way the content is rendered in a browser.\n    //Whitespace inside HTML tags (between attributes, for example) is not sensitive. You can use spaces or tabs to improve readability without affecting how the tag is processed\n    //The main exceptions to this rule in HTML are elements like <pre> and CSS properties that control the rendering of whitespace, which would be specifically designed to alter how whitespace is handled.\n  }\n\n  //We're going to use event delegation because there will be two buttons, but we don't want to listen to each of them individually when we could use event delegation instead\n  addHandlerClick(handler) {\n    //Add event listener to parent element\n    this._parentElement.addEventListener('click', function (e) {\n      //We do not immediately call the handler because we need to figure out which button was actually clicked\n      //So, first we create a btn element to store the closest button element to the clicked target if we click within the button element\n      //This is important as we could accidentally click on the span, svg, or use elements within the button element but we want it to register as clicking on the actual button itself.\n      //The button element has child elements, and even if we click on the child elements we want it to register as the button element (the parent element that we're selecting)\n      //Recall that the closest method is similar to querySelector but instead of searching down the tree for children, it searches up the tree for parents\n      const btn = e.target.closest('.btn--inline'); //Notice that the next and prev buttons share this common class.\n\n      //We select the button so that we know if we need to move forward or back a page. We need to establish a connection between the DOM and our code. We can achieve this using custom data attributes.\n      //So we will create custom data attributes for each of the buttons which will contain the page that we want to go to\n      //Using that, we can read that data and go to that exact page\n\n      if (!btn) return;\n\n      //So, inside of our HTML, before establishing our class we add: data-goto=\"${currPage+1}\". Now, we can actually know what page to go to from the button by reading this property.\n      //The use of data-* attributes in HTML is a handy way to store extra data on standard HTML elements, and it's perfectly suited for the kind of dynamic, client-side functionality that we need.\n      //We are setting a data-goto attribute to indicate which page a button should navigate to when clicked. This is a great approach for implementing pagination or any kind of stepwise navigation on a web page.\n      const goToPage = Number(btn.dataset.goto); //Note that this datasets return a string, so we will have to convert this to a number.\n\n      //However, note that since we set this eventListener on the parent element that the dataset will try to be accessed even if we click outside of the 'button' element, and we won't be able to find any '.btn--inline' parent elements.\n      //So, we will have to account for that using the if statement above (guard clause)\n\n      //Now that we have the number of the page, we can pass that number back to the controller by passing it into the handler when we call the handler\n      //From the controller, we can pass that number into our getSearchResultsPage() function, which will load the searchResults for the passed in page\n      handler(goToPage);\n    });\n  }\n}\nexport default new PaginationView();\n","import View from './View';\nimport PreviewView from './PreviewView';\n\n//Since we inherited methods from the parent class, we want to make sure that we name the variables being used within the inherited methods the same\nclass BookmarksView extends View {\n  //Our bookmark previews are <li> elements, which needs to be contained in either <ul> or <ol> elements, which fits the .bookmarks__list parent class\n  _parentElement = document.querySelector('.bookmarks__list');\n  _errMessage = 'No bookmarks yet! Find a nice recipe and bookmark it :)'; //Go back to our default message indicating there are no bookmarks added yet once all bookmarks are removed and our passed in bookmarks array is empty.\n  //If the user had previously added bookmarks, overriding our default HTML message, and then removed all bookmarks, this would show as we'd be passing in an empty array to our render() method (which we call when adding/removing bookmarks)\n  //When the user either click adds/removes a bookmark, this would call the render() function and we would be trying try to access the passed in bookmarks array, which would be empty (in this case) prompting the error message.\n  //Note that we only call update() when adding/removing the --active class attribute to the bookmarks (and search results, and updating the servings. but nothing that should trigger an error message)\n  _message = '';\n\n  //However, we don't actually want PreviewView to render the markup as we want our BookmarksView or ResultsView class to ultimately do that inside of their appropraite containers.\n  //We only want PreviewView to generate the individual markup for each element that we pass into it. So, we are going to resolve this by having a check in our render function.\n  //We'll add a parameter called render which, by default, will be set to true. However, if PreviewView calls this render method, then render will be set to false.\n  //When render is set to false, we will simply return the markup for the passed in element.\n\n  //But why not call generateMarkup directly rather than PreviewView.render(element, false)?\n  //We still need to set this._data in our render method to the data that's passed in (our bookmark that we want to add as a child to our parentElement in this case)\n  //This is so that in PreviewView, we are able to actually generate the markup by accessing the properties inside of the bookmark (or any object) that we pass into the render method.\n\n  //Now, BookmarksView and ResultsView are essentially the same in terms of functionality in generating their markups and so we encapsulated that logic within a child class.\n  //We kept what differentiated them, however, by maintaining different messages and a different parentElement (container).\n  _generateMarkup() {\n    return this._data\n      .map(bookmark => PreviewView.render(bookmark, false))\n      .join(''); //the render() method in our View parent class will generate the markup using the function in our PreviewView class, and from this parent class we will add each bookmark to our container (parentElement)\n  }\n\n  addHandlerRender(handler) {\n    window.addEventListener('load', handler);\n  }\n}\n\nexport default new BookmarksView();\n","import View from './View';\n\n//We actually already have the view that we want to display in our HTML. And so showing this window will be as simple as toggling the hidden class from the window and overlay\nclass AddRecipeView extends View {\n  _parentElement = document.querySelector('.upload'); //Let's make our form our parent element in this case as that's what we want to display.\n  //However, we'll still need to be able to select our window and overlay, so we'll manually select those.\n  _window = document.querySelector('.add-recipe-window');\n  _overlay = document.querySelector('.overlay');\n  //Now we'll need to select the button that will be clicked to open the window as well as the button that will be clicked to close the window.\n  _btnOpen = document.querySelector('.nav__btn--add-recipe');\n  _btnClose = document.querySelector('.btn--close-modal');\n  _message = 'Recipe was successfully uploaded!';\n  //Since this is a child class of View, we need to inherit its properties using the super() keyword\n  constructor() {\n    super();\n    this._addHandlerShowWindow(); //So, we'll run these functions as soon as this class is instantiated to attach our event listeners\n    this._addHandlerHideWindow();\n    //We don't need addHandlerUpload in our constructor as this will be invoked in our constructor. Having it in our constructor could cause a problem as when it's called from the constructor, we're not passing in any function as an argument so handler will be undefined causing an error\n  }\n\n  //This will be a public method as we'll want to be able to call this from the controller because we'll want to hide the window and overlay once we're finished uploading a recipe.\n  toggleWindow() {\n    this._overlay.classList.toggle('hidden');\n    this._window.classList.toggle('hidden');\n  }\n  //Now we need to listen for events of opening and closing our form. This function has nothing to do with the controller, there is no information that we need from the controller in regards to what should happen when the event happens.\n  //All we're doing is hiding or displaying the form through modifying the 'hidden' class. So, we can run this function as soon as our AddRecipeView class is instantiated using a constructor and we can also make this method protected as it's only going to be used\n  //within this class. Note, however, that the controller will still need to import this class as then our controller will not invoke the instantiation of this class (will not create this object)\n  _addHandlerShowWindow() {\n    this._btnOpen.addEventListener('click', this.toggleWindow.bind(this)); //when we click the button, we want to toggle the hidden class from both the overlay and from the window.\n    //We create a separate function for this so that we can use the appropriate 'this' keyword inside of the function that we call in the eventListener by manually binding it to the appropriate 'this' keyword, which would be our current instance of AddRecipeView that's invoking this method\n    //Because, otherwise, the 'this' keyword would be pointing to the element that the eventListener is attached to, which would be the btn selected in this instance of AddRecipeView (this._btnOpen) in this case\n  }\n\n  _addHandlerHideWindow() {\n    //We want to be able to close the form by either clicking the 'x' button or by clicking the overlay\n    //The _toggleWindow() method modifies properties (_window, _overlay) of the AddRecipeView instance.\n    //If you do not bind this to _toggleWindow(), when the event triggers the method, it won't recognize _window and _overlay as properties of the button or the overlay, because this will refer to the HTML elements (like .btn--close-modal or .overlay) rather than the AddRecipeView instance\n    this._btnClose.addEventListener('click', this.toggleWindow.bind(this)); //We don't want the 'this' keyword to refer to the _btnClose or _overlay element, but we want it to refer to our current instance of AddRecipeView that's invoking this method\n    this._overlay.addEventListener('click', this.toggleWindow.bind(this));\n  }\n\n  //When clicking the upload button, we want to get all of the data out of the form and 'submit' it. We create a new function to handle form submission.\n  addHandlerUpload(handler) {\n    //We want to add an event listener to the upload form itself\n    this._parentElement.addEventListener('submit', function (e) {\n      e.preventDefault(); //A button that is created like this <button></button> will submit a form by default when the button is inside of a form. This is what refreshes the page, and this is the default behavior that we want to prevent\n      //Now, how do we access all of the values in our form? We can use something called formData, which is a modern browser API\n      const dataArr = [...new FormData(this)]; //Inside of the constructor, we have to pass in an element that's the form. In this case, that would be our parent element, which would be our 'this' keyword since we're inside of our eventListener function.\n      //Remember, the 'this' keyword in this context refers to the element that triggered the event.\n      //The FormData object is an interface that allows you to easily construct a set of key/value pairs representing form fields and their values,\n      //The spread operator (...) is used here to expand the entries in the FormData object into an array. Each entry in the FormData object is a key/value pair, so this spreads the entries of the FormData object into an array of [key, value] pairs.\n      //The spread syntax (...) can be used to convert some kinds of objects into arrays, but it depends on the object having iterable properties.\n      //The spread syntax is versatile for working with iterable collections in JavaScript, but when dealing with non-iterable objects like plain object literals, you'll need to use methods like Object.keys(), Object.values(), or Object.entries() to first convert these objects into an array format.\n\n      //when you use the spread syntax with a FormData object in JavaScript, the result is a 2D array where each element of the array is itself a 1D array containing two elements: the key and the corresponding value from the form.\n      //Each key-value pair represents one form control (like an input or select field).\n      //Using the spread syntax on a FormData object, [...formData], takes each entry from the FormData object and places it into a new array.\n      //Each entry itself is an array containing two elements: the name of the form control as the first element (key), and its value as the second element.\n\n      //Before being converted into an array, FormData is an object that encapsulates the data from a form as a series of key-value pairs, but these pairs are not directly accessible like those in a regular JavaScript object or array.\n      //FormData is designed to handle and transmit form data in web applications, particularly for AJAX requests, and it has a specific internal structure that supports both simple text fields and file uploads.\n      //FormData does implement the iterable protocol, specifically providing entries as [key, value] pairs, which makes it compatible with iteration methods designed for iterables even though you cannot iterate over it directly using typical object iteration methods like for...in loops\n      //FormData objects are iterable in the sense that they can be used with constructs and methods that expect iterable values.\n      //This iterability is specifically implemented through FormData's entries, which are accessible using the entries() method. By default, when you use FormData with the spread syntax (...), JavaScript uses this entries() iterator.\n\n      //What's going on: The spread syntax implicitly calls the entries() iterator of the FormData object. Each iteration produced by entries() returns a [key, value] pair, much like iterating over a Map object. These [key, value] pairs are then placed into a new array.\n\n      //This returned data is what we want to use to upload our new personal recipe to the API. And the action of uploading the data will be another API call, which happens in the model. So, we need a way of moving this data over to the model.\n      //We will do this by creating a controller function called controlAddRecipe which will be the handler for this event (Publisher Subscriber pattern) and by passing the data into our handler function.\n      //Once we're able to get the data into our controller, we'll also be able to easily get it into our model as the controller is the medium\n\n      //Note that usually our recipe data is an object rather than an array of entries like this and there's actually a method that we can use to convert entries into a regular JavaScript object, which is what we want.\n      const data = Object.fromEntries(dataArr);\n\n      //However, this object is going to be a bit different. It's okay if it's missing some properties as long as we don't add properties that our API isn't expecting.\n      //What's most important is that we need to match the format of the values for each appropriate proeprty so we're going to have to take care of that in that our model\n      handler(data);\n    });\n  }\n\n  _generateMarkup() {}\n}\n\nexport default new AddRecipeView();\n","/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nvar runtime = (function (exports) {\n  \"use strict\";\n\n  var Op = Object.prototype;\n  var hasOwn = Op.hasOwnProperty;\n  var defineProperty = Object.defineProperty || function (obj, key, desc) { obj[key] = desc.value; };\n  var undefined; // More compressible than void 0.\n  var $Symbol = typeof Symbol === \"function\" ? Symbol : {};\n  var iteratorSymbol = $Symbol.iterator || \"@@iterator\";\n  var asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\";\n  var toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n\n  function define(obj, key, value) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n    return obj[key];\n  }\n  try {\n    // IE 8 has a broken Object.defineProperty that only works on DOM objects.\n    define({}, \"\");\n  } catch (err) {\n    define = function(obj, key, value) {\n      return obj[key] = value;\n    };\n  }\n\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n    var generator = Object.create(protoGenerator.prototype);\n    var context = new Context(tryLocsList || []);\n\n    // The ._invoke method unifies the implementations of the .next,\n    // .throw, and .return methods.\n    defineProperty(generator, \"_invoke\", { value: makeInvokeMethod(innerFn, self, context) });\n\n    return generator;\n  }\n  exports.wrap = wrap;\n\n  // Try/catch helper to minimize deoptimizations. Returns a completion\n  // record like context.tryEntries[i].completion. This interface could\n  // have been (and was previously) designed to take a closure to be\n  // invoked without arguments, but in all the cases we care about we\n  // already have an existing method we want to call, so there's no need\n  // to create a new function object. We can even get away with assuming\n  // the method takes exactly one argument, since that happens to be true\n  // in every case, so we don't have to touch the arguments object. The\n  // only additional allocation required is the completion record, which\n  // has a stable shape and so hopefully should be cheap to allocate.\n  function tryCatch(fn, obj, arg) {\n    try {\n      return { type: \"normal\", arg: fn.call(obj, arg) };\n    } catch (err) {\n      return { type: \"throw\", arg: err };\n    }\n  }\n\n  var GenStateSuspendedStart = \"suspendedStart\";\n  var GenStateSuspendedYield = \"suspendedYield\";\n  var GenStateExecuting = \"executing\";\n  var GenStateCompleted = \"completed\";\n\n  // Returning this object from the innerFn has the same effect as\n  // breaking out of the dispatch switch statement.\n  var ContinueSentinel = {};\n\n  // Dummy constructor functions that we use as the .constructor and\n  // .constructor.prototype properties for functions that return Generator\n  // objects. For full spec compliance, you may wish to configure your\n  // minifier not to mangle the names of these two functions.\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n\n  // This is a polyfill for %IteratorPrototype% for environments that\n  // don't natively support it.\n  var IteratorPrototype = {};\n  define(IteratorPrototype, iteratorSymbol, function () {\n    return this;\n  });\n\n  var getProto = Object.getPrototypeOf;\n  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n  if (NativeIteratorPrototype &&\n      NativeIteratorPrototype !== Op &&\n      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\n    // This environment has a native %IteratorPrototype%; use it instead\n    // of the polyfill.\n    IteratorPrototype = NativeIteratorPrototype;\n  }\n\n  var Gp = GeneratorFunctionPrototype.prototype =\n    Generator.prototype = Object.create(IteratorPrototype);\n  GeneratorFunction.prototype = GeneratorFunctionPrototype;\n  defineProperty(Gp, \"constructor\", { value: GeneratorFunctionPrototype, configurable: true });\n  defineProperty(\n    GeneratorFunctionPrototype,\n    \"constructor\",\n    { value: GeneratorFunction, configurable: true }\n  );\n  GeneratorFunction.displayName = define(\n    GeneratorFunctionPrototype,\n    toStringTagSymbol,\n    \"GeneratorFunction\"\n  );\n\n  // Helper for defining the .next, .throw, and .return methods of the\n  // Iterator interface in terms of a single ._invoke method.\n  function defineIteratorMethods(prototype) {\n    [\"next\", \"throw\", \"return\"].forEach(function(method) {\n      define(prototype, method, function(arg) {\n        return this._invoke(method, arg);\n      });\n    });\n  }\n\n  exports.isGeneratorFunction = function(genFun) {\n    var ctor = typeof genFun === \"function\" && genFun.constructor;\n    return ctor\n      ? ctor === GeneratorFunction ||\n        // For the native GeneratorFunction constructor, the best we can\n        // do is to check its .name property.\n        (ctor.displayName || ctor.name) === \"GeneratorFunction\"\n      : false;\n  };\n\n  exports.mark = function(genFun) {\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n    } else {\n      genFun.__proto__ = GeneratorFunctionPrototype;\n      define(genFun, toStringTagSymbol, \"GeneratorFunction\");\n    }\n    genFun.prototype = Object.create(Gp);\n    return genFun;\n  };\n\n  // Within the body of any async function, `await x` is transformed to\n  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n  // `hasOwn.call(value, \"__await\")` to determine if the yielded value is\n  // meant to be awaited.\n  exports.awrap = function(arg) {\n    return { __await: arg };\n  };\n\n  function AsyncIterator(generator, PromiseImpl) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n      if (record.type === \"throw\") {\n        reject(record.arg);\n      } else {\n        var result = record.arg;\n        var value = result.value;\n        if (value &&\n            typeof value === \"object\" &&\n            hasOwn.call(value, \"__await\")) {\n          return PromiseImpl.resolve(value.__await).then(function(value) {\n            invoke(\"next\", value, resolve, reject);\n          }, function(err) {\n            invoke(\"throw\", err, resolve, reject);\n          });\n        }\n\n        return PromiseImpl.resolve(value).then(function(unwrapped) {\n          // When a yielded Promise is resolved, its final value becomes\n          // the .value of the Promise<{value,done}> result for the\n          // current iteration.\n          result.value = unwrapped;\n          resolve(result);\n        }, function(error) {\n          // If a rejected Promise was yielded, throw the rejection back\n          // into the async generator function so it can be handled there.\n          return invoke(\"throw\", error, resolve, reject);\n        });\n      }\n    }\n\n    var previousPromise;\n\n    function enqueue(method, arg) {\n      function callInvokeWithMethodAndArg() {\n        return new PromiseImpl(function(resolve, reject) {\n          invoke(method, arg, resolve, reject);\n        });\n      }\n\n      return previousPromise =\n        // If enqueue has been called before, then we want to wait until\n        // all previous Promises have been resolved before calling invoke,\n        // so that results are always delivered in the correct order. If\n        // enqueue has not been called before, then it is important to\n        // call invoke immediately, without waiting on a callback to fire,\n        // so that the async generator function has the opportunity to do\n        // any necessary setup in a predictable way. This predictability\n        // is why the Promise constructor synchronously invokes its\n        // executor callback, and why async functions synchronously\n        // execute code before the first await. Since we implement simple\n        // async functions in terms of async generators, it is especially\n        // important to get this right, even though it requires care.\n        previousPromise ? previousPromise.then(\n          callInvokeWithMethodAndArg,\n          // Avoid propagating failures to Promises returned by later\n          // invocations of the iterator.\n          callInvokeWithMethodAndArg\n        ) : callInvokeWithMethodAndArg();\n    }\n\n    // Define the unified helper method that is used to implement .next,\n    // .throw, and .return (see defineIteratorMethods).\n    defineProperty(this, \"_invoke\", { value: enqueue });\n  }\n\n  defineIteratorMethods(AsyncIterator.prototype);\n  define(AsyncIterator.prototype, asyncIteratorSymbol, function () {\n    return this;\n  });\n  exports.AsyncIterator = AsyncIterator;\n\n  // Note that simple async functions are implemented on top of\n  // AsyncIterator objects; they just return a Promise for the value of\n  // the final result produced by the iterator.\n  exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {\n    if (PromiseImpl === void 0) PromiseImpl = Promise;\n\n    var iter = new AsyncIterator(\n      wrap(innerFn, outerFn, self, tryLocsList),\n      PromiseImpl\n    );\n\n    return exports.isGeneratorFunction(outerFn)\n      ? iter // If outerFn is a generator, return the full iterator.\n      : iter.next().then(function(result) {\n          return result.done ? result.value : iter.next();\n        });\n  };\n\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = GenStateSuspendedStart;\n\n    return function invoke(method, arg) {\n      if (state === GenStateExecuting) {\n        throw new Error(\"Generator is already running\");\n      }\n\n      if (state === GenStateCompleted) {\n        if (method === \"throw\") {\n          throw arg;\n        }\n\n        // Be forgiving, per GeneratorResume behavior specified since ES2015:\n        // ES2015 spec, step 3: https://262.ecma-international.org/6.0/#sec-generatorresume\n        // Latest spec, step 2: https://tc39.es/ecma262/#sec-generatorresume\n        return doneResult();\n      }\n\n      context.method = method;\n      context.arg = arg;\n\n      while (true) {\n        var delegate = context.delegate;\n        if (delegate) {\n          var delegateResult = maybeInvokeDelegate(delegate, context);\n          if (delegateResult) {\n            if (delegateResult === ContinueSentinel) continue;\n            return delegateResult;\n          }\n        }\n\n        if (context.method === \"next\") {\n          // Setting context._sent for legacy support of Babel's\n          // function.sent implementation.\n          context.sent = context._sent = context.arg;\n\n        } else if (context.method === \"throw\") {\n          if (state === GenStateSuspendedStart) {\n            state = GenStateCompleted;\n            throw context.arg;\n          }\n\n          context.dispatchException(context.arg);\n\n        } else if (context.method === \"return\") {\n          context.abrupt(\"return\", context.arg);\n        }\n\n        state = GenStateExecuting;\n\n        var record = tryCatch(innerFn, self, context);\n        if (record.type === \"normal\") {\n          // If an exception is thrown from innerFn, we leave state ===\n          // GenStateExecuting and loop back for another invocation.\n          state = context.done\n            ? GenStateCompleted\n            : GenStateSuspendedYield;\n\n          if (record.arg === ContinueSentinel) {\n            continue;\n          }\n\n          return {\n            value: record.arg,\n            done: context.done\n          };\n\n        } else if (record.type === \"throw\") {\n          state = GenStateCompleted;\n          // Dispatch the exception by looping back around to the\n          // context.dispatchException(context.arg) call above.\n          context.method = \"throw\";\n          context.arg = record.arg;\n        }\n      }\n    };\n  }\n\n  // Call delegate.iterator[context.method](context.arg) and handle the\n  // result, either by returning a { value, done } result from the\n  // delegate iterator, or by modifying context.method and context.arg,\n  // setting context.delegate to null, and returning the ContinueSentinel.\n  function maybeInvokeDelegate(delegate, context) {\n    var methodName = context.method;\n    var method = delegate.iterator[methodName];\n    if (method === undefined) {\n      // A .throw or .return when the delegate iterator has no .throw\n      // method, or a missing .next method, always terminate the\n      // yield* loop.\n      context.delegate = null;\n\n      // Note: [\"return\"] must be used for ES3 parsing compatibility.\n      if (methodName === \"throw\" && delegate.iterator[\"return\"]) {\n        // If the delegate iterator has a return method, give it a\n        // chance to clean up.\n        context.method = \"return\";\n        context.arg = undefined;\n        maybeInvokeDelegate(delegate, context);\n\n        if (context.method === \"throw\") {\n          // If maybeInvokeDelegate(context) changed context.method from\n          // \"return\" to \"throw\", let that override the TypeError below.\n          return ContinueSentinel;\n        }\n      }\n      if (methodName !== \"return\") {\n        context.method = \"throw\";\n        context.arg = new TypeError(\n          \"The iterator does not provide a '\" + methodName + \"' method\");\n      }\n\n      return ContinueSentinel;\n    }\n\n    var record = tryCatch(method, delegate.iterator, context.arg);\n\n    if (record.type === \"throw\") {\n      context.method = \"throw\";\n      context.arg = record.arg;\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    var info = record.arg;\n\n    if (! info) {\n      context.method = \"throw\";\n      context.arg = new TypeError(\"iterator result is not an object\");\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    if (info.done) {\n      // Assign the result of the finished delegate to the temporary\n      // variable specified by delegate.resultName (see delegateYield).\n      context[delegate.resultName] = info.value;\n\n      // Resume execution at the desired location (see delegateYield).\n      context.next = delegate.nextLoc;\n\n      // If context.method was \"throw\" but the delegate handled the\n      // exception, let the outer generator proceed normally. If\n      // context.method was \"next\", forget context.arg since it has been\n      // \"consumed\" by the delegate iterator. If context.method was\n      // \"return\", allow the original .return call to continue in the\n      // outer generator.\n      if (context.method !== \"return\") {\n        context.method = \"next\";\n        context.arg = undefined;\n      }\n\n    } else {\n      // Re-yield the result returned by the delegate method.\n      return info;\n    }\n\n    // The delegate iterator is finished, so forget it and continue with\n    // the outer generator.\n    context.delegate = null;\n    return ContinueSentinel;\n  }\n\n  // Define Generator.prototype.{next,throw,return} in terms of the\n  // unified ._invoke helper method.\n  defineIteratorMethods(Gp);\n\n  define(Gp, toStringTagSymbol, \"Generator\");\n\n  // A Generator should always return itself as the iterator object when the\n  // @@iterator function is called on it. Some browsers' implementations of the\n  // iterator prototype chain incorrectly implement this, causing the Generator\n  // object to not be returned from this call. This ensures that doesn't happen.\n  // See https://github.com/facebook/regenerator/issues/274 for more details.\n  define(Gp, iteratorSymbol, function() {\n    return this;\n  });\n\n  define(Gp, \"toString\", function() {\n    return \"[object Generator]\";\n  });\n\n  function pushTryEntry(locs) {\n    var entry = { tryLoc: locs[0] };\n\n    if (1 in locs) {\n      entry.catchLoc = locs[1];\n    }\n\n    if (2 in locs) {\n      entry.finallyLoc = locs[2];\n      entry.afterLoc = locs[3];\n    }\n\n    this.tryEntries.push(entry);\n  }\n\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = \"normal\";\n    delete record.arg;\n    entry.completion = record;\n  }\n\n  function Context(tryLocsList) {\n    // The root entry object (effectively a try statement without a catch\n    // or a finally block) gives us a place to store values thrown from\n    // locations where there is no enclosing try statement.\n    this.tryEntries = [{ tryLoc: \"root\" }];\n    tryLocsList.forEach(pushTryEntry, this);\n    this.reset(true);\n  }\n\n  exports.keys = function(val) {\n    var object = Object(val);\n    var keys = [];\n    for (var key in object) {\n      keys.push(key);\n    }\n    keys.reverse();\n\n    // Rather than returning an object with a next method, we keep\n    // things simple and return the next function itself.\n    return function next() {\n      while (keys.length) {\n        var key = keys.pop();\n        if (key in object) {\n          next.value = key;\n          next.done = false;\n          return next;\n        }\n      }\n\n      // To avoid creating an additional object, we just hang the .value\n      // and .done properties off the next function object itself. This\n      // also ensures that the minifier will not anonymize the function.\n      next.done = true;\n      return next;\n    };\n  };\n\n  function values(iterable) {\n    if (iterable != null) {\n      var iteratorMethod = iterable[iteratorSymbol];\n      if (iteratorMethod) {\n        return iteratorMethod.call(iterable);\n      }\n\n      if (typeof iterable.next === \"function\") {\n        return iterable;\n      }\n\n      if (!isNaN(iterable.length)) {\n        var i = -1, next = function next() {\n          while (++i < iterable.length) {\n            if (hasOwn.call(iterable, i)) {\n              next.value = iterable[i];\n              next.done = false;\n              return next;\n            }\n          }\n\n          next.value = undefined;\n          next.done = true;\n\n          return next;\n        };\n\n        return next.next = next;\n      }\n    }\n\n    throw new TypeError(typeof iterable + \" is not iterable\");\n  }\n  exports.values = values;\n\n  function doneResult() {\n    return { value: undefined, done: true };\n  }\n\n  Context.prototype = {\n    constructor: Context,\n\n    reset: function(skipTempReset) {\n      this.prev = 0;\n      this.next = 0;\n      // Resetting context._sent for legacy support of Babel's\n      // function.sent implementation.\n      this.sent = this._sent = undefined;\n      this.done = false;\n      this.delegate = null;\n\n      this.method = \"next\";\n      this.arg = undefined;\n\n      this.tryEntries.forEach(resetTryEntry);\n\n      if (!skipTempReset) {\n        for (var name in this) {\n          // Not sure about the optimal order of these conditions:\n          if (name.charAt(0) === \"t\" &&\n              hasOwn.call(this, name) &&\n              !isNaN(+name.slice(1))) {\n            this[name] = undefined;\n          }\n        }\n      }\n    },\n\n    stop: function() {\n      this.done = true;\n\n      var rootEntry = this.tryEntries[0];\n      var rootRecord = rootEntry.completion;\n      if (rootRecord.type === \"throw\") {\n        throw rootRecord.arg;\n      }\n\n      return this.rval;\n    },\n\n    dispatchException: function(exception) {\n      if (this.done) {\n        throw exception;\n      }\n\n      var context = this;\n      function handle(loc, caught) {\n        record.type = \"throw\";\n        record.arg = exception;\n        context.next = loc;\n\n        if (caught) {\n          // If the dispatched exception was caught by a catch block,\n          // then let that catch block handle the exception normally.\n          context.method = \"next\";\n          context.arg = undefined;\n        }\n\n        return !! caught;\n      }\n\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        var record = entry.completion;\n\n        if (entry.tryLoc === \"root\") {\n          // Exception thrown outside of any try block that could handle\n          // it, so set the completion value of the entire function to\n          // throw the exception.\n          return handle(\"end\");\n        }\n\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, \"catchLoc\");\n          var hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            } else if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            }\n\n          } else if (hasFinally) {\n            if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else {\n            throw new Error(\"try statement without catch or finally\");\n          }\n        }\n      }\n    },\n\n    abrupt: function(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc <= this.prev &&\n            hasOwn.call(entry, \"finallyLoc\") &&\n            this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n\n      if (finallyEntry &&\n          (type === \"break\" ||\n           type === \"continue\") &&\n          finallyEntry.tryLoc <= arg &&\n          arg <= finallyEntry.finallyLoc) {\n        // Ignore the finally entry if control is not jumping to a\n        // location outside the try/catch block.\n        finallyEntry = null;\n      }\n\n      var record = finallyEntry ? finallyEntry.completion : {};\n      record.type = type;\n      record.arg = arg;\n\n      if (finallyEntry) {\n        this.method = \"next\";\n        this.next = finallyEntry.finallyLoc;\n        return ContinueSentinel;\n      }\n\n      return this.complete(record);\n    },\n\n    complete: function(record, afterLoc) {\n      if (record.type === \"throw\") {\n        throw record.arg;\n      }\n\n      if (record.type === \"break\" ||\n          record.type === \"continue\") {\n        this.next = record.arg;\n      } else if (record.type === \"return\") {\n        this.rval = this.arg = record.arg;\n        this.method = \"return\";\n        this.next = \"end\";\n      } else if (record.type === \"normal\" && afterLoc) {\n        this.next = afterLoc;\n      }\n\n      return ContinueSentinel;\n    },\n\n    finish: function(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.finallyLoc === finallyLoc) {\n          this.complete(entry.completion, entry.afterLoc);\n          resetTryEntry(entry);\n          return ContinueSentinel;\n        }\n      }\n    },\n\n    \"catch\": function(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n          if (record.type === \"throw\") {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n          return thrown;\n        }\n      }\n\n      // The context.catch method must only be called with a location\n      // argument that corresponds to a known catch block.\n      throw new Error(\"illegal catch attempt\");\n    },\n\n    delegateYield: function(iterable, resultName, nextLoc) {\n      this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      };\n\n      if (this.method === \"next\") {\n        // Deliberately forget the last sent value so that we don't\n        // accidentally pass it on to the delegate.\n        this.arg = undefined;\n      }\n\n      return ContinueSentinel;\n    }\n  };\n\n  // Regardless of whether this script is executing as a CommonJS module\n  // or not, return the runtime object so that we can declare the variable\n  // regeneratorRuntime in the outer scope, which allows this module to be\n  // injected easily by `bin/regenerator --include-runtime script.js`.\n  return exports;\n\n}(\n  // If this script is executing as a CommonJS module, use module.exports\n  // as the regeneratorRuntime namespace. Otherwise create a new empty\n  // object. Either way, the resulting object will be used to initialize\n  // the regeneratorRuntime variable at the top of this file.\n  typeof module === \"object\" ? module.exports : {}\n));\n\ntry {\n  regeneratorRuntime = runtime;\n} catch (accidentalStrictMode) {\n  // This module should not be running in strict mode, so the above\n  // assignment should always work unless something is misconfigured. Just\n  // in case runtime.js accidentally runs in strict mode, in modern engines\n  // we can explicitly access globalThis. In older engines we can escape\n  // strict mode using a global Function call. This could conceivably fail\n  // if a Content Security Policy forbids using Function, but in that case\n  // the proper solution is to fix the accidental strict mode problem. If\n  // you've misconfigured your bundler to force strict mode and applied a\n  // CSP to forbid Function, and you're not willing to fix either of those\n  // problems, please detail your unique predicament in a GitHub issue.\n  if (typeof globalThis === \"object\") {\n    globalThis.regeneratorRuntime = runtime;\n  } else {\n    Function(\"r\", \"regeneratorRuntime = r\")(runtime);\n  }\n}\n"],"names":["name","version","$6d99163b6684d050$export$2d1720544b23b823","$1e0782be6903ea7b$export$2d1720544b23b823","$998d968a5e32cd49$var$match","$998d968a5e32cd49$var$version","$2d0ac3aa5e39584b$export$2d1720544b23b823","$3a8bcef306e86159$var$set","$3a8bcef306e86159$var$get","$3a8bcef306e86159$var$has","$f6c32256739dd9b5$export$2d1720544b23b823","$0ed66cde5c449819$export$2d1720544b23b823","$a393da0e05d61ed1$var$$location","$a393da0e05d61ed1$var$defer","$a393da0e05d61ed1$var$channel","$a393da0e05d61ed1$var$port","$parcel$global","globalThis","$parcel$interopDefault","a","__esModule","default","$ca3e1754e676956d$exports","$55b335199d6e6d5d$exports","$55b335199d6e6d5d$var$check","it","Math","window","self","Function","$ef322a7f89c3ed41$exports","$6140c9fa18232846$exports","exec","error","Object","defineProperty","get","$881ad37dbe259e8f$exports","$bcbe62e89adc7d37$exports","test","bind","hasOwnProperty","$881ad37dbe259e8f$var$call","prototype","call","apply","arguments","$1e0782be6903ea7b$var$$propertyIsEnumerable","propertyIsEnumerable","$1e0782be6903ea7b$var$getOwnPropertyDescriptor","getOwnPropertyDescriptor","$1e0782be6903ea7b$var$NASHORN_BUG","V","descriptor","enumerable","$b66966b48674609b$exports","bitmap","value","configurable","writable","$4d273c9d7e1bdf46$exports","$8239f4c7c6082668$exports","$43b18aa2f1faac44$exports","$43b18aa2f1faac44$var$FunctionPrototype","$43b18aa2f1faac44$var$call","$43b18aa2f1faac44$var$uncurryThisWithBind","$b0ba63bfbfb16088$exports","$b0ba63bfbfb16088$var$toString","fn","toString","$b0ba63bfbfb16088$var$stringSlice","slice","$8239f4c7c6082668$var$$Object","$8239f4c7c6082668$var$split","split","$c378177673193450$exports","$7ce250ddf7b42d4d$exports","$c378177673193450$var$$TypeError","TypeError","$7f19acfe53927f5c$exports","$8ffb6b36a733d3c0$exports","$6a130d390db46c8e$exports","$70e34a5a2021f756$exports","$70e34a5a2021f756$var$documentAll","document","all","undefined","argument","$0b429cc7792c7d26$exports","$a5217dbd1b0d33ce$exports","namespace","method","length","$41cc576e850a251e$exports","isPrototypeOf","$47f18b427c2fbabf$exports","$4a39565fee8fe980$exports","$998d968a5e32cd49$exports","$492c6dc902f2bf18$exports","navigator","String","userAgent","$998d968a5e32cd49$var$process","process","$998d968a5e32cd49$var$Deno","Deno","$998d968a5e32cd49$var$versions","versions","$998d968a5e32cd49$var$v8","v8","match","$4a39565fee8fe980$var$$String","getOwnPropertySymbols","symbol","Symbol","sham","iterator","$0b429cc7792c7d26$var$$Object","$Symbol","$eb80dcd0b8a5698c$exports","$ae485921c5498156$exports","$8f0ebae34f61e14c$exports","$8f0ebae34f61e14c$var$$String","$ae485921c5498156$var$$TypeError","P","func","$b0f812e443807cb5$exports","$b0f812e443807cb5$var$$TypeError","input","pref","val","valueOf","$1946b9b54b48e7fd$exports","$d00d03e557d638db$exports","$e0409817d4e03fc4$exports","$4ce407c7007beb63$exports","$4ce407c7007beb63$var$defineProperty","key","$d00d03e557d638db$var$SHARED","$d00d03e557d638db$var$store","push","mode","copyright","license","source","$1f868a26fd901990$exports","$a2f3ebb5da11db12$exports","$a2f3ebb5da11db12$var$$Object","$1f868a26fd901990$var$hasOwnProperty","hasOwn","$5e0a1e292f79defc$exports","$5e0a1e292f79defc$var$id","$5e0a1e292f79defc$var$postfix","random","$5e0a1e292f79defc$var$toString","$842f8f0a18746212$var$Symbol","$842f8f0a18746212$var$WellKnownSymbolsStore","$842f8f0a18746212$var$createWellKnownSymbol","withoutSetter","$8ffb6b36a733d3c0$var$$TypeError","$8ffb6b36a733d3c0$var$TO_PRIMITIVE","result","exoticToPrim","$d45526d8245cb22c$exports","$15c0c414b89100b1$exports","$15c0c414b89100b1$var$document","$15c0c414b89100b1$var$EXISTS","createElement","$6d99163b6684d050$var$$getOwnPropertyDescriptor","O","$8693737507995841$exports","$161a89d67c436ccf$exports","$c845d421b7b0e630$exports","$c845d421b7b0e630$var$$String","$c845d421b7b0e630$var$$TypeError","$2d0ac3aa5e39584b$var$$TypeError","$2d0ac3aa5e39584b$var$$defineProperty","$2d0ac3aa5e39584b$var$$getOwnPropertyDescriptor","$2d0ac3aa5e39584b$var$ENUMERABLE","$2d0ac3aa5e39584b$var$CONFIGURABLE","$2d0ac3aa5e39584b$var$WRITABLE","Attributes","current","object","$40e957865125f98f$exports","$09c56ff2ae09b2d7$exports","$81c64883d194e3b4$var$FunctionPrototype","$81c64883d194e3b4$var$getDescriptor","$81c64883d194e3b4$var$CONFIGURABLE","$81c64883d194e3b4$var$EXISTS","$9990f6f719f26a96$exports","$9990f6f719f26a96$var$functionToString","inspectSource","$3a8bcef306e86159$exports","$47d53bb84a8f3c5b$exports","$47d53bb84a8f3c5b$var$WeakMap","WeakMap","$834abcf0f8f3f871$exports","$834abcf0f8f3f871$var$keys","$9f571a3f3d135e31$exports","$3a8bcef306e86159$var$OBJECT_ALREADY_INITIALIZED","$3a8bcef306e86159$var$TypeError","$3a8bcef306e86159$var$WeakMap","state","$3a8bcef306e86159$var$store","has","set","metadata","facade","$3a8bcef306e86159$var$STATE","$09c56ff2ae09b2d7$var$enforceInternalState","enforce","getterFor","TYPE","type","$09c56ff2ae09b2d7$var$getInternalState","$09c56ff2ae09b2d7$var$$String","$09c56ff2ae09b2d7$var$defineProperty","$09c56ff2ae09b2d7$var$stringSlice","$09c56ff2ae09b2d7$var$replace","replace","$09c56ff2ae09b2d7$var$join","join","$09c56ff2ae09b2d7$var$CONFIGURABLE_LENGTH","$09c56ff2ae09b2d7$var$TEMPLATE","$09c56ff2ae09b2d7$var$makeBuiltIn","options","getter","setter","$09c56ff2ae09b2d7$require$CONFIGURABLE_FUNCTION_NAME","arity","constructor","simple","global","unsafe","nonConfigurable","nonWritable","$ef14b437ba65973a$exports","$339f2419d379e6c2$exports","$c4fba4611365c4f5$exports","$1ef9432c43157f41$exports","$b5bb21648546ce5b$exports","$5395b5a4913a5e32$exports","$5395b5a4913a5e32$var$ceil","ceil","$5395b5a4913a5e32$var$floor","floor","trunc","x","n","number","$1ef9432c43157f41$var$max","max","$1ef9432c43157f41$var$min","min","index","integer","$04c91bd3815cd64a$exports","$4aba983aae3daed3$exports","$4aba983aae3daed3$var$min","len","obj","$f00609c516640f24$var$createMethod","IS_INCLUDES","$this","el","fromIndex","$c4fba4611365c4f5$require$indexOf","$f00609c516640f24$exports","includes","indexOf","$c4fba4611365c4f5$var$push","names","i","$f6c32256739dd9b5$var$hiddenKeys","$e73f13f1d8a17cad$exports","concat","getOwnPropertyNames","$339f2419d379e6c2$var$concat","keys","target","exceptions","$ca268db110e9e457$exports","$ca268db110e9e457$var$replacement","$ca268db110e9e457$var$isForced","feature","detection","$ca268db110e9e457$var$data","$ca268db110e9e457$var$normalize","$ca268db110e9e457$var$POLYFILL","$ca268db110e9e457$var$NATIVE","normalize","string","toLowerCase","data","NATIVE","POLYFILL","targetProperty","sourceProperty","TARGET","GLOBAL","STATIC","stat","dontCallGetSet","$ca3e1754e676956d$require$getOwnPropertyDescriptor","forced","$a393da0e05d61ed1$exports","$3cdb2ef65d8e3cb5$exports","$3cdb2ef65d8e3cb5$var$FunctionPrototype","$3cdb2ef65d8e3cb5$var$apply","$3cdb2ef65d8e3cb5$var$call","Reflect","$43284f0171045916$exports","$4828cb1b4c7586c8$exports","$43284f0171045916$var$bind","that","$b8ce1ad1b6b1e7c1$exports","$0709cba658bb4ed6$exports","$7d824954c5058f7d$exports","$7d824954c5058f7d$var$$TypeError","passed","required","$05f68a2417343639$exports","$3f8bc2b5488269f3$exports","$a393da0e05d61ed1$var$set","setImmediate","$a393da0e05d61ed1$var$clear","clearImmediate","$a393da0e05d61ed1$var$process","$a393da0e05d61ed1$var$Dispatch","Dispatch","$a393da0e05d61ed1$var$Function","$a393da0e05d61ed1$var$MessageChannel","MessageChannel","$a393da0e05d61ed1$var$String","$a393da0e05d61ed1$var$counter","$a393da0e05d61ed1$var$queue","$a393da0e05d61ed1$var$ONREADYSTATECHANGE","location","$a393da0e05d61ed1$var$run","id","$a393da0e05d61ed1$var$runner","$a393da0e05d61ed1$var$eventListener","event","$a393da0e05d61ed1$var$globalPostMessageDefer","postMessage","protocol","host","handler","args","nextTick","now","port2","port1","onmessage","addEventListener","importScripts","appendChild","removeChild","setTimeout","$99b55bbd56d52729$require$clearImmediate","clear","$e55ac54d5aaa2e1c$require$setTask","$f112a170991e44cc$exports","$99637759dc933969$exports","Bun","$f112a170991e44cc$var$Function","$f112a170991e44cc$var$WRAP","scheduler","hasTimeArg","firstParamIndex","timeout","boundArgs","params","callback","$e55ac54d5aaa2e1c$var$setImmediate","$dba1f40f036b2a50$export$923ea8233b386e99","$dba1f40f036b2a50$export$a9861bd62f48e142","$ae0ec1623a891cbe$export$2b3ff41fecbef7c8","url","uploadData","fetchPro","fetch","headers","body","JSON","stringify","res","Promise","race","_","reject","Error","s","json","ok","message","status","err","$140f8d4f1c304308$export$ca000e230c0caa3e","recipe","search","query","results","page","resultsPerPage","bookmarks","$140f8d4f1c304308$var$createRecipeObject","title","publisher","sourceUrl","source_url","image","image_url","servings","cookingTime","cooking_time","ingredients","$140f8d4f1c304308$export$b96725c7a035d60b","some","bookmark","bookmarked","$140f8d4f1c304308$export$202b8e5cb363a0c4","recipes","map","$140f8d4f1c304308$export$8d7f79465139ab72","start","end","$140f8d4f1c304308$export$5e23f4642ecad5ea","newServings","forEach","ing","quantity","$140f8d4f1c304308$var$persistBookmarks","localStorage","setItem","$140f8d4f1c304308$export$72009cc673d27d80","$140f8d4f1c304308$export$136048bcb9946c75","findIndex","splice","$140f8d4f1c304308$export$d660c2254e74960d","newRecipe","entries","filter","entry","startsWith","ingredient","ingArray","str","trim","unit","description","Number","$bc530c31e28424ba$exports","URL","$810158a560040d0f$export$2e2bcd8739ae039","_data","render","Array","isArray","renderError","markup","_generateMarkup","_clear","_parentElement","insertAdjacentHTML","update","newMarkup","newElements","from","newDOM","createRange","createContextualFragment","querySelectorAll","currElements","newEl","currEl","isEqualNode","firstChild","nodeValue","textContent","attributes","attr","setAttribute","renderSpinner","innerHTML","_errMessage","renderMessage","_message","$af517d3060c307fe$exports","$af517d3060c307fe$var$reduce","numerator","denominator","rep","den","num","primeNumberArray","j","parseInt","decimal","abs","isNaN","isInteger","numberString","parseFloat","pattern","decimalRev","reverse","pow","patternSequence","endPattern","endPatternArray","testSingleUnit","$af517d3060c307fe$var$yesRepeat","nonPatternLength","float","decimalMultiplier1","round","$86533811ca0ba9c7$var$RecipeView","querySelector","addHandlerRender","addHandlerUpdateServings","e","btn","closest","updateTo","dataset","addHandlerToggleBookmark","_generateMarkupIngredients","$86533811ca0ba9c7$export$2e2bcd8739ae039","$71dd548963c9e5e8$var$SearchView","_inputField","getQuery","_clearInputField","addHandlerSearch","preventDefault","$71dd548963c9e5e8$export$2e2bcd8739ae039","$d4ae917f67aa029f$export$2e2bcd8739ae039","hash","$724bbc6447737f8b$var$ResultsView","$724bbc6447737f8b$export$2e2bcd8739ae039","$d3dd33aaa1958054$var$PaginationView","resultsLength","numPages","currPage","prevButton","nextButton","addHandlerClick","goto","$d3dd33aaa1958054$export$2e2bcd8739ae039","$04d9757374bd75ac$var$BookmarksView","$04d9757374bd75ac$export$2e2bcd8739ae039","$3a3bed218b3ac980$var$AddRecipeView","_window","_overlay","_btnOpen","_btnClose","_addHandlerShowWindow","_addHandlerHideWindow","toggleWindow","classList","toggle","addHandlerUpload","fromEntries","FormData","$3a3bed218b3ac980$export$2e2bcd8739ae039","$7238a34a955809b2$var$runtime","exports","Op","desc","iteratorSymbol","asyncIteratorSymbol","asyncIterator","toStringTagSymbol","toStringTag","define","wrap","innerFn","outerFn","tryLocsList","context","generator","create","protoGenerator","Generator","Context","GenStateSuspendedStart","arg","GenStateExecuting","GenStateCompleted","done","delegate","delegateResult","maybeInvokeDelegate","methodName","ContinueSentinel","record","tryCatch","info","resultName","next","nextLoc","sent","_sent","dispatchException","abrupt","GeneratorFunction","GeneratorFunctionPrototype","IteratorPrototype","getProto","getPrototypeOf","NativeIteratorPrototype","values","Gp","defineIteratorMethods","_invoke","AsyncIterator","PromiseImpl","previousPromise","callInvokeWithMethodAndArg","resolve","invoke","__await","then","unwrapped","pushTryEntry","locs","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","resetTryEntry","completion","reset","iterable","iteratorMethod","displayName","isGeneratorFunction","genFun","ctor","mark","setPrototypeOf","__proto__","awrap","async","iter","pop","skipTempReset","prev","charAt","stop","rootRecord","rootEntry","rval","exception","handle","loc","caught","hasCatch","hasFinally","finallyEntry","complete","finish","thrown","delegateYield","regeneratorRuntime","accidentalStrictMode","$4a8214ac06c5fc69$var$controlRecipes","console","log","$4a8214ac06c5fc69$var$controlSearchResults","$4a8214ac06c5fc69$var$controlAddRecipe","history","pushState","$140f8d4f1c304308$export$973ecd6243726f9d","storage","getItem","parse","goToPage"],"version":3,"file":"index.7fbfcae0.js.map"}